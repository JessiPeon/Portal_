// Generated by Haxe 4.2.2+e116db3
(function ($hx_exports, $global) { "use strict";
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	var windowsOptions = new kha_WindowOptions("portal",0,0,1280,720,null,true,1,0);
	var frameBufferOptions = new kha_FramebufferOptions(60,true,32,16,8,0);
	kha_System.start(new kha_SystemOptions("portal",1280,720,windowsOptions,frameBufferOptions),function(w) {
		new com_framework_Simulation(states_StartGame,1280,720,1,0);
	});
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var com_TimeManager = function() { };
$hxClasses["com.TimeManager"] = com_TimeManager;
com_TimeManager.__name__ = "com.TimeManager";
com_TimeManager.setDelta = function(delta) {
	if(com_TimeManager.fixedTime) {
		delta = 0.016666666666666666;
	}
	com_TimeManager.time += delta;
	com_TimeManager.realDelta = delta;
	if(delta > 0.05) {
		delta = 0.05;
	}
	com_TimeManager.delta = delta;
};
com_TimeManager.reset = function() {
	com_TimeManager.time = 0;
};
var com_loading_ResourceHandler = function() { };
$hxClasses["com.loading.ResourceHandler"] = com_loading_ResourceHandler;
com_loading_ResourceHandler.__name__ = "com.loading.ResourceHandler";
com_loading_ResourceHandler.__isInterface__ = true;
com_loading_ResourceHandler.prototype = {
	clear: null
	,__class__: com_loading_ResourceHandler
};
var com_basicDisplay_SpriteSheetDB = function() {
	this.animations = [];
	com_framework_Simulation.i.addResourceHandler(this);
};
$hxClasses["com.basicDisplay.SpriteSheetDB"] = com_basicDisplay_SpriteSheetDB;
com_basicDisplay_SpriteSheetDB.__name__ = "com.basicDisplay.SpriteSheetDB";
com_basicDisplay_SpriteSheetDB.__interfaces__ = [com_loading_ResourceHandler];
com_basicDisplay_SpriteSheetDB.__properties__ = {get_i:"get_i"};
com_basicDisplay_SpriteSheetDB.get_i = function() {
	if(com_basicDisplay_SpriteSheetDB.i == null) {
		com_basicDisplay_SpriteSheetDB.i = new com_basicDisplay_SpriteSheetDB();
	}
	return com_basicDisplay_SpriteSheetDB.i;
};
com_basicDisplay_SpriteSheetDB.prototype = {
	animations: null
	,add: function(data) {
		this.animations.push(data);
	}
	,getData: function(name) {
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			if(animation.name == name) {
				return animation;
			}
		}
		throw haxe_Exception.thrown("spriteSheet with name " + name + " not found. Make sure it's loaded");
	}
	,clear: function() {
		this.animations.splice(0,this.animations.length);
	}
	,__class__: com_basicDisplay_SpriteSheetDB
};
var com_collision_platformer_Body = function() {
	this.touching = 0;
	this.maxVelocityY = Infinity;
	this.maxVelocityX = Infinity;
	this.staticObject = false;
	this.dragY = 1;
	this.dragX = 1;
	this.accelerationY = 0;
	this.accelerationX = 0;
	this.bounce = 0;
	this.lastVelocityY = 0;
	this.lastVelocityX = 0;
	this.velocityY = 0;
	this.velocityX = 0;
	this.y = 0;
	this.x = 0;
	this.lastY = 0;
	this.lastX = 0;
};
$hxClasses["com.collision.platformer.Body"] = com_collision_platformer_Body;
com_collision_platformer_Body.__name__ = "com.collision.platformer.Body";
com_collision_platformer_Body.prototype = {
	lastX: null
	,lastY: null
	,x: null
	,y: null
	,velocityX: null
	,velocityY: null
	,lastVelocityX: null
	,lastVelocityY: null
	,bounce: null
	,accelerationX: null
	,accelerationY: null
	,dragX: null
	,dragY: null
	,staticObject: null
	,maxVelocityX: null
	,maxVelocityY: null
	,touching: null
	,update: function(dt) {
		this.touching = 0;
		this.lastX = this.x;
		this.lastY = this.y;
		this.lastVelocityX = this.velocityX;
		this.lastVelocityY = this.velocityY;
		this.velocityX += this.accelerationX * dt;
		this.velocityY += this.accelerationY * dt;
		if(Math.abs(this.velocityX) > this.maxVelocityX) {
			if(this.velocityX > 0) {
				this.velocityX = this.maxVelocityX;
			} else {
				this.velocityX = -this.maxVelocityX;
			}
		}
		if(Math.abs(this.velocityY) > this.maxVelocityY) {
			if(this.velocityY > 0) {
				this.velocityY = this.maxVelocityY;
			} else {
				this.velocityY = -this.maxVelocityY;
			}
		}
		this.x += this.velocityX * dt;
		this.y += this.velocityY * dt;
		if(this.accelerationX == 0) {
			this.velocityX *= this.dragX;
			if(this.velocityX * this.velocityX < 0.25) {
				this.velocityX = 0;
			}
		}
		if(this.accelerationY == 0) {
			this.velocityY *= this.dragY;
			if(this.velocityY * this.velocityY < 0.25) {
				this.velocityY = 0;
			}
		}
	}
	,__class__: com_collision_platformer_Body
};
var com_collision_platformer_ICollider = function() { };
$hxClasses["com.collision.platformer.ICollider"] = com_collision_platformer_ICollider;
com_collision_platformer_ICollider.__name__ = "com.collision.platformer.ICollider";
com_collision_platformer_ICollider.__isInterface__ = true;
com_collision_platformer_ICollider.prototype = {
	collide: null
	,overlap: null
	,collisionType: null
	,userData: null
	,parent: null
	,removeFromParent: null
	,debugDraw: null
	,__class__: com_collision_platformer_ICollider
};
var com_collision_platformer_CollisionBox = function() {
	this.collisionAllow = 15;
	this.height = 10;
	this.width = 10;
	com_collision_platformer_Body.call(this);
};
$hxClasses["com.collision.platformer.CollisionBox"] = com_collision_platformer_CollisionBox;
com_collision_platformer_CollisionBox.__name__ = "com.collision.platformer.CollisionBox";
com_collision_platformer_CollisionBox.__interfaces__ = [com_collision_platformer_ICollider];
com_collision_platformer_CollisionBox.__super__ = com_collision_platformer_Body;
com_collision_platformer_CollisionBox.prototype = $extend(com_collision_platformer_Body.prototype,{
	width: null
	,height: null
	,collisionAllow: null
	,userData: null
	,parent: null
	,middleX: null
	,middleY: null
	,removeFromParent: function() {
		if(this.parent != null) {
			this.parent.remove(this);
		}
	}
	,get_middleX: function() {
		return this.x + this.width * 0.5;
	}
	,get_middleY: function() {
		return this.y + this.height * 0.5;
	}
	,collisionType: function() {
		return 0;
	}
	,isTouching: function(side) {
		return (side & this.touching) > 0;
	}
	,collide: function(collider,notifyCallback) {
		if(collider == this) {
			return false;
		}
		if(collider.collisionType() == 0) {
			var boxCollider = collider;
			var myPonderation = 0.5;
			var colliderPonderation = 0.5;
			if(this.staticObject) {
				myPonderation = 0;
				colliderPonderation = 1;
			} else if(boxCollider.staticObject) {
				myPonderation = 1;
				colliderPonderation = 0;
			}
			if(this.overlapVsBox(boxCollider)) {
				var overlapX = this.width * 0.5 + boxCollider.width * 0.5 - Math.abs(this.x + this.width * 0.5 - (boxCollider.x + boxCollider.width * 0.5));
				var overlapY = this.height * 0.5 + boxCollider.height * 0.5 - Math.abs(this.y + this.height * 0.5 - (boxCollider.y + boxCollider.height * 0.5));
				var overlapXSmaller = overlapX < overlapY;
				var myCollisionNeededX = 1;
				var colliderNeededX = 2;
				var myCollisionNeededY = 4;
				var colliderNeededY = 8;
				if(this.x + this.width * 0.5 < boxCollider.x + boxCollider.width * 0.5) {
					myCollisionNeededX = 2;
					colliderNeededX = 1;
					overlapX *= -1;
				}
				if(this.y + this.height * 0.5 < boxCollider.y + boxCollider.height * 0.5) {
					myCollisionNeededY = 8;
					colliderNeededY = 4;
					overlapY *= -1;
				}
				if(this.collisionAllow != 15 || boxCollider.collisionAllow != 15) {
					var currentX = this.x;
					var currentY = this.y;
					this.x = this.lastX;
					this.y = this.lastY;
					var colliderX = boxCollider.x;
					var colliderY = boxCollider.y;
					boxCollider.x = boxCollider.lastX;
					boxCollider.y = boxCollider.lastY;
					var colliding = this.overlapVsBox(boxCollider);
					this.x = currentX;
					this.y = currentY;
					boxCollider.x = colliderX;
					boxCollider.y = colliderY;
					if(colliding) {
						return false;
					}
				}
				if(overlapXSmaller && (this.collisionAllow & myCollisionNeededX) > 0 && (boxCollider.collisionAllow & colliderNeededX) > 0) {
					if(this.velocityX * overlapX <= 0 && !this.staticObject) {
						this.velocityX *= -this.bounce;
						this.x += overlapX * myPonderation;
					}
					if(boxCollider.velocityX * overlapX >= 0 && !boxCollider.staticObject) {
						boxCollider.velocityX *= -boxCollider.bounce;
						boxCollider.x -= overlapX * colliderPonderation;
					}
					this.touching |= myCollisionNeededX;
					boxCollider.touching |= colliderNeededX;
					if(notifyCallback != null) {
						notifyCallback(this,collider);
					}
					return true;
				} else if((this.collisionAllow & myCollisionNeededY) > 0 && (boxCollider.collisionAllow & colliderNeededY) > 0) {
					if(this.velocityY * overlapY <= 0 && !this.staticObject) {
						this.velocityY *= -this.bounce;
						this.y += overlapY * myPonderation;
					}
					if(boxCollider.velocityY * overlapY >= 0 && !boxCollider.staticObject) {
						boxCollider.velocityY *= -boxCollider.bounce;
						boxCollider.y -= overlapY * colliderPonderation;
					}
					this.touching |= myCollisionNeededY;
					boxCollider.touching |= colliderNeededY;
					if(notifyCallback != null) {
						notifyCallback(this,collider);
					}
					return true;
				}
			}
			return false;
		} else if(collider.collisionType() == 1) {
			return collider.collide(this,notifyCallback);
		} else if(collider.collisionType() == 2) {
			var collision = collider;
			var result = false;
			var _g = 0;
			var _g1 = collision.colliders;
			while(_g < _g1.length) {
				var col = _g1[_g];
				++_g;
				if(this.collide(col,notifyCallback)) {
					result = true;
				}
			}
			return result;
		}
		return false;
	}
	,overlap: function(collider,NotifyCallback) {
		if(collider.collisionType() == 0) {
			var box = collider;
			if(box.x < this.x + this.width && box.x + box.width > this.x && box.y < this.y + this.height && box.y + box.height > this.y) {
				if(NotifyCallback != null) {
					NotifyCallback(this,collider);
				}
				return true;
			}
		} else if(collider.collisionType() == 1) {
			return collider.overlap(this,NotifyCallback);
		} else if(collider.collisionType() == 2) {
			return collider.overlapInverted(this,NotifyCallback);
		}
		return false;
	}
	,bottom: function() {
		return this.y + this.height;
	}
	,right: function() {
		return this.x + this.width;
	}
	,topMiddle: function() {
		return this.x + this.width / 2;
	}
	,bottomMiddle: function() {
		return this.y + this.height / 2;
	}
	,overlapVsBox: function(box) {
		if(box.x < this.x + this.width && box.x + box.width > this.x && box.y < this.y + this.height) {
			return box.y + box.height > this.y;
		} else {
			return false;
		}
	}
	,debugDraw: function(canvas) {
		var g2 = canvas.get_g2();
		g2.drawLine(this.x,this.y,this.x + this.width,this.y);
		g2.drawLine(this.x + this.width,this.y,this.x + this.width,this.y + this.height);
		g2.drawLine(this.x + this.width,this.y + this.height,this.x,this.y + this.height);
		g2.drawLine(this.x,this.y + this.height,this.x,this.y);
	}
	,__class__: com_collision_platformer_CollisionBox
	,__properties__: {get_middleY:"get_middleY",get_middleX:"get_middleX"}
});
var com_collision_platformer_CollisionEngine = function() {
};
$hxClasses["com.collision.platformer.CollisionEngine"] = com_collision_platformer_CollisionEngine;
com_collision_platformer_CollisionEngine.__name__ = "com.collision.platformer.CollisionEngine";
com_collision_platformer_CollisionEngine.renderDebug = function(canvas,camera) {
	canvas.get_g2().begin(false);
	canvas.get_g2().set_color(-256);
	var cV = camera.view;
	var scaleX = canvas.get_width() / camera.width;
	var scaleY = canvas.get_height() / camera.height;
	var _this = canvas.get_g2();
	var _this__00 = scaleX;
	var _this__10 = 0;
	var _this__20 = 0;
	var _this__01 = 0;
	var _this__11 = scaleY;
	var _this__21 = 0;
	var _this__02 = 0;
	var _this__12 = 0;
	var _this__22 = 1;
	var m__00 = cV._00;
	var m__10 = cV._10;
	var m__20 = cV._30 + camera.width * 0.5;
	var m__01 = cV._01;
	var m__11 = cV._11;
	var m__21 = cV._31 + camera.height * 0.5;
	var m__02 = cV._03;
	var m__12 = cV._13;
	var m__22 = cV._33;
	var transformation = new kha_math_FastMatrix3(_this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02,_this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12,_this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22,_this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02,_this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12,_this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22,_this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02,_this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12,_this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22);
	_this.setTransformation(transformation);
	var _this1 = _this.transformations[_this.transformationIndex];
	_this1._00 = transformation._00;
	_this1._10 = transformation._10;
	_this1._20 = transformation._20;
	_this1._01 = transformation._01;
	_this1._11 = transformation._11;
	_this1._21 = transformation._21;
	_this1._02 = transformation._02;
	_this1._12 = transformation._12;
	_this1._22 = transformation._22;
	var _g = 0;
	var _g1 = com_collision_platformer_CollisionEngine.colliders;
	while(_g < _g1.length) {
		var collider = _g1[_g];
		++_g;
		collider.debugDraw(canvas);
	}
	canvas.get_g2().end();
	com_collision_platformer_CollisionEngine.colliders.splice(0,com_collision_platformer_CollisionEngine.colliders.length);
};
com_collision_platformer_CollisionEngine.collide = function(A,B,aCallBack) {
	com_collision_platformer_CollisionEngine.colliders.push(A);
	com_collision_platformer_CollisionEngine.colliders.push(B);
	return A.collide(B,aCallBack);
};
com_collision_platformer_CollisionEngine.bulletCollide = function(A,B,iterations,aCallBack) {
	com_collision_platformer_CollisionEngine.colliders.push(A);
	com_collision_platformer_CollisionEngine.colliders.push(B);
	var returnValue = false;
	var AendX = A.x;
	var AendY = A.y;
	var _g = 1;
	var _g1 = iterations + 1;
	while(_g < _g1) {
		var i = _g++;
		if(A.x != A.lastX) {
			var aS = i / iterations;
			A.x = AendX * aS - A.lastX * (aS - 1);
		}
		if(A.y != A.lastY) {
			var aS1 = i / iterations;
			A.y = AendY * aS1 - A.lastY * (aS1 - 1);
		}
		if(A.collide(B,aCallBack)) {
			returnValue = true;
		}
		if(A.y == A.lastY && A.x == A.lastX) {
			break;
		}
	}
	return returnValue;
};
com_collision_platformer_CollisionEngine.overlap = function(A,B,aCallBack) {
	com_collision_platformer_CollisionEngine.colliders.push(A);
	com_collision_platformer_CollisionEngine.colliders.push(B);
	return A.overlap(B,aCallBack);
};
com_collision_platformer_CollisionEngine.prototype = {
	__class__: com_collision_platformer_CollisionEngine
};
var com_collision_platformer_CollisionGroup = function() {
	this.colliders = [];
};
$hxClasses["com.collision.platformer.CollisionGroup"] = com_collision_platformer_CollisionGroup;
com_collision_platformer_CollisionGroup.__name__ = "com.collision.platformer.CollisionGroup";
com_collision_platformer_CollisionGroup.__interfaces__ = [com_collision_platformer_ICollider];
com_collision_platformer_CollisionGroup.prototype = {
	colliders: null
	,userData: null
	,parent: null
	,removeFromParent: function() {
		if(this.parent != null) {
			this.parent.remove(this);
		}
	}
	,add: function(aCollider) {
		if(aCollider.parent == this) {
			return;
		}
		this.colliders.push(aCollider);
		aCollider.parent = this;
	}
	,remove: function(aCollider) {
		aCollider.parent = null;
		HxOverrides.remove(this.colliders,aCollider);
	}
	,clear: function() {
		while(this.colliders.length > 0) this.colliders.pop().parent = null;
	}
	,collide: function(aCollider,NotifyCallback) {
		var toReturn = false;
		if(aCollider.collisionType() == 2) {
			var group = aCollider;
			var _g = 0;
			var _g1 = this.colliders;
			while(_g < _g1.length) {
				var col1 = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = group.colliders;
				while(_g2 < _g3.length) {
					var col2 = _g3[_g2];
					++_g2;
					if(col1.collide(col2,NotifyCallback)) {
						toReturn = true;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.colliders;
			while(_g < _g1.length) {
				var col = _g1[_g];
				++_g;
				if(col.collide(aCollider,NotifyCallback)) {
					toReturn = true;
				}
			}
		}
		return toReturn;
	}
	,overlap: function(aCollider,NotifyCallback) {
		var toReturn = false;
		if(aCollider.collisionType() == 2) {
			var group = aCollider;
			var _g = 0;
			var _g1 = this.colliders;
			while(_g < _g1.length) {
				var col1 = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = group.colliders;
				while(_g2 < _g3.length) {
					var col2 = _g3[_g2];
					++_g2;
					if(col1.overlap(col2,NotifyCallback)) {
						toReturn = true;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.colliders;
			while(_g < _g1.length) {
				var col = _g1[_g];
				++_g;
				if(col.overlap(aCollider,NotifyCallback)) {
					toReturn = true;
				}
			}
		}
		return toReturn;
	}
	,overlapInverted: function(aCollider,NotifyCallback) {
		var toReturn = false;
		if(aCollider.collisionType() == 2) {
			var group = aCollider;
			var _g = 0;
			var _g1 = this.colliders;
			while(_g < _g1.length) {
				var col1 = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = group.colliders;
				while(_g2 < _g3.length) {
					var col2 = _g3[_g2];
					++_g2;
					if(col2.overlap(col1,NotifyCallback)) {
						toReturn = true;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.colliders;
			while(_g < _g1.length) {
				var col = _g1[_g];
				++_g;
				if(aCollider.overlap(col,NotifyCallback)) {
					toReturn = true;
				}
			}
		}
		return toReturn;
	}
	,collisionType: function() {
		return 2;
	}
	,debugDraw: function(canvas) {
		var _g = 0;
		var _g1 = this.colliders;
		while(_g < _g1.length) {
			var col = _g1[_g];
			++_g;
			col.debugDraw(canvas);
		}
	}
	,__class__: com_collision_platformer_CollisionGroup
};
var com_collision_platformer_CollisionTileMap = function(aTiles,aTileWidth,aTileHeight,aWidthInTiles,aHeightInTiles,startCollisionIndex) {
	if(startCollisionIndex == null) {
		startCollisionIndex = 1;
	}
	this.y = 0;
	this.x = 0;
	this.startingCollisionIndex = 1;
	this.tiles = aTiles;
	this.tileWidth = aTileWidth;
	this.tileHeight = aTileHeight;
	this.widthIntTiles = aWidthInTiles;
	this.heightInTiles = aHeightInTiles;
	this.helperTile = new com_collision_platformer_CollisionBox();
	this.helperTile.width = aTileWidth;
	this.helperTile.height = aTileHeight;
	this.helperTile.staticObject = true;
	this.startingCollisionIndex = startCollisionIndex;
	this.edges = [];
	var _g = 0;
	var _g1 = this.tiles.length;
	while(_g < _g1) {
		var i = _g++;
		this.edges.push(0);
	}
	this.calculateEdges(0,0,aWidthInTiles,aHeightInTiles);
};
$hxClasses["com.collision.platformer.CollisionTileMap"] = com_collision_platformer_CollisionTileMap;
com_collision_platformer_CollisionTileMap.__name__ = "com.collision.platformer.CollisionTileMap";
com_collision_platformer_CollisionTileMap.__interfaces__ = [com_collision_platformer_ICollider];
com_collision_platformer_CollisionTileMap.prototype = {
	tiles: null
	,tileWidth: null
	,tileHeight: null
	,widthIntTiles: null
	,heightInTiles: null
	,startingCollisionIndex: null
	,edges: null
	,userData: null
	,helperTile: null
	,parent: null
	,x: null
	,y: null
	,removeFromParent: function() {
		if(this.parent != null) {
			this.parent.remove(this);
		}
	}
	,calculateEdges: function(minX,minY,maxX,maxY) {
		var _g = minY;
		var _g1 = maxY;
		while(_g < _g1) {
			var tileY = _g++;
			var _g2 = minX;
			var _g3 = maxX;
			while(_g2 < _g3) {
				var tileX = _g2++;
				if(this.getTileId(tileX,tileY) >= this.startingCollisionIndex) {
					var edge = 0;
					if(this.getTileId(tileX,tileY - 1) < this.startingCollisionIndex) {
						edge |= 4;
					}
					if(this.getTileId(tileX - 1,tileY) < this.startingCollisionIndex) {
						edge |= 1;
					}
					if(this.getTileId(tileX + 1,tileY) < this.startingCollisionIndex) {
						edge |= 2;
					}
					if(this.getTileId(tileX,tileY + 1) < this.startingCollisionIndex) {
						edge |= 8;
					}
					this.edges[tileX + tileY * this.widthIntTiles] = edge;
				}
			}
		}
	}
	,collide: function(aCollider,NotifyCallback) {
		if(aCollider.collisionType() == 0) {
			var box = aCollider;
			var minX = (box.x - this.x) / this.tileWidth | 0;
			var minY = (box.y - this.y) / this.tileHeight | 0;
			var maxX = ((box.x - this.x + box.width) / this.tileWidth | 0) + 1;
			var maxY = ((box.y - this.y + box.height) / this.tileHeight | 0) + 1;
			var toReturn = false;
			var _g = minY;
			var _g1 = maxY;
			while(_g < _g1) {
				var tileY = _g++;
				var _g2 = minX;
				var _g3 = maxX;
				while(_g2 < _g3) {
					var tileX = _g2++;
					if(this.getTileId(tileX,tileY) >= this.startingCollisionIndex) {
						this.helperTile.collisionAllow = this.edges[tileX + tileY * this.widthIntTiles];
						this.helperTile.x = this.x + tileX * this.tileWidth;
						this.helperTile.y = this.y + tileY * this.tileHeight;
						if(this.helperTile.collide(box,NotifyCallback)) {
							toReturn = true;
						}
					}
				}
			}
			return toReturn;
		} else if(aCollider.collisionType() == 2) {
			return aCollider.collide(this,NotifyCallback);
		}
		return false;
	}
	,getTileId: function(aX,aY) {
		if(aX >= 0 && aY >= 0 && aX < this.widthIntTiles && aY < this.heightInTiles) {
			return this.tiles[aX + aY * this.widthIntTiles];
		}
		return 0;
	}
	,getTileId2: function(aX,aY) {
		return this.getTileId(aX / this.tileWidth | 0,aY / this.tileHeight | 0);
	}
	,overlap: function(aCollider,NotifyCallback) {
		var toReturn = false;
		if(aCollider.collisionType() == 0) {
			var box = aCollider;
			var minX = box.x / this.tileWidth | 0;
			var minY = box.y / this.tileHeight | 0;
			var maxX = ((box.x + box.width) / this.tileWidth | 0) + 1;
			var maxY = ((box.y + box.height) / this.tileHeight | 0) + 1;
			var _g = minY;
			var _g1 = maxY;
			while(_g < _g1) {
				var tileY = _g++;
				var _g2 = minX;
				var _g3 = maxX;
				while(_g2 < _g3) {
					var tileX = _g2++;
					if(this.getTileId(tileX,tileY) >= this.startingCollisionIndex) {
						this.helperTile.collisionAllow = this.edges[tileX + tileY * this.widthIntTiles];
						this.helperTile.x = this.x + tileX * this.tileWidth;
						this.helperTile.y = this.y + tileY * this.tileHeight;
						if(this.helperTile.overlap(box,NotifyCallback)) {
							toReturn = true;
						}
					}
				}
			}
		}
		return toReturn;
	}
	,collisionType: function() {
		return 1;
	}
	,changeTileId: function(aX,aY,aId) {
		if(aX > 0 && aY > 0 && aX < this.widthIntTiles && aY < this.heightInTiles) {
			this.tiles[aX + aY * this.widthIntTiles] = aId;
			this.calculateEdges(aX - 1,aY - 1,aX + 1,aY + 1);
		}
	}
	,edgeType: function(tileX,tileY) {
		return this.edges[tileX + tileY * this.widthIntTiles];
	}
	,edgeType2: function(aX,aY) {
		return this.edgeType(aX / this.tileWidth | 0,aY / this.tileHeight | 0);
	}
	,changeEdgeType: function(tileX,tileY,edgeType) {
		this.edges[tileX + tileY * this.widthIntTiles] = edgeType;
	}
	,raycast: function(start,dir,length) {
		var currentX = Math.floor(start.x / this.tileWidth);
		var currentY = Math.floor(start.y / this.tileHeight);
		var endX = Math.floor((start.x + dir.x * length) / this.tileWidth);
		var endY = Math.floor((start.y + dir.y * length) / this.tileHeight);
		var stepX = dir.x >= 0 ? 1 : -1;
		var stepY = dir.y >= 0 ? 1 : -1;
		var nextTileEdgeX = (currentX + stepX) * this.tileWidth;
		var nextTileEdgeY = (currentY + stepY) * this.tileHeight;
		var tMaxX = dir.x != 0 ? (nextTileEdgeX - start.x) / dir.x : Infinity;
		var tMaxY = dir.y != 0 ? (nextTileEdgeY - start.y) / dir.y : Infinity;
		var tDeltaX = dir.x != 0 ? this.tileWidth / dir.x * stepX : Infinity;
		var tDeltaY = dir.y != 0 ? this.tileHeight / dir.y * stepY : Infinity;
		var diff_x = 0;
		var diff_y = 0;
		var neg_ray = false;
		if(currentX != endX && dir.x < 0) {
			--diff_x;
			neg_ray = true;
		}
		if(currentY != endY && dir.y < 0) {
			--diff_y;
			neg_ray = true;
		}
		if(neg_ray) {
			currentX += diff_x;
			currentY += diff_y;
		}
		while(endX != currentX || endY != currentY) {
			if(tMaxX < tMaxY) {
				tMaxX += tDeltaX;
				currentX += stepX;
				if(currentX < 0 || currentX > this.widthIntTiles) {
					break;
				}
			} else {
				tMaxY += tDeltaY;
				currentY += stepY;
				if(currentY < 0 || currentY > this.heightInTiles) {
					break;
				}
			}
			if(this.tiles[currentX + currentY * this.widthIntTiles | 0] > 0) {
				return currentX + currentY * this.widthIntTiles | 0;
			}
		}
		return -1;
	}
	,debugDraw: function(canvas) {
	}
	,__class__: com_collision_platformer_CollisionTileMap
};
var com_collision_platformer_Sides = function() { };
$hxClasses["com.collision.platformer.Sides"] = com_collision_platformer_Sides;
com_collision_platformer_Sides.__name__ = "com.collision.platformer.Sides";
var com_collision_platformer_Tilemap = function(tmxData,scale) {
	if(scale == null) {
		scale = 1;
	}
	this.heightInTiles = 0;
	this.widthIntTiles = 0;
	this.tmxData = tmxData;
	this.scale = scale;
	this.collision = new com_collision_platformer_CollisionGroup();
	this.display = new com_gEngine_display_Layer();
};
$hxClasses["com.collision.platformer.Tilemap"] = com_collision_platformer_Tilemap;
com_collision_platformer_Tilemap.__name__ = "com.collision.platformer.Tilemap";
com_collision_platformer_Tilemap.prototype = {
	tmxData: null
	,scale: null
	,tileWidth: null
	,tileHeight: null
	,display: null
	,collision: null
	,widthIntTiles: null
	,heightInTiles: null
	,tileIdStart: null
	,createCollisions: function(tileMap,startCollisionIndex) {
		if(startCollisionIndex == null) {
			startCollisionIndex = 1;
		}
		var tiles = [];
		var _g = 0;
		var _g1 = tileMap.data.tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			tiles.push(tile.gid);
		}
		var collision = new com_collision_platformer_CollisionTileMap(tiles,this.tileWidth * this.scale,this.tileHeight * this.scale,tileMap.width,tileMap.height,startCollisionIndex);
		this.collision.add(collision);
		return collision;
	}
	,createCombineCollisions: function(tileMaps,vertical) {
		var tiles = [];
		var scaleX = vertical ? 1 : tileMaps.length;
		var scaleY = vertical ? tileMaps.length : 1;
		var _g = 0;
		while(_g < tileMaps.length) {
			var map = tileMaps[_g];
			++_g;
			var _g1 = 0;
			var _g2 = map.data.tiles;
			while(_g1 < _g2.length) {
				var tile = _g2[_g1];
				++_g1;
				tiles.push(tile.gid);
			}
		}
		var collision = new com_collision_platformer_CollisionTileMap(tiles,this.tileWidth * this.scale * scaleX,this.tileHeight * this.scale * scaleY,tileMaps[0].width * scaleX,tileMaps[0].height * scaleY);
		this.collision.add(collision);
		return collision;
	}
	,createDisplay: function(tileMap,display) {
		var tiles = tileMap.data.tiles;
		var tileMapDisplay = new com_gEngine_display_extra_TileMapDisplay(display,tileMap.width,tileMap.height,this.tileWidth,this.tileHeight);
		tileMapDisplay.scaleX = tileMapDisplay.scaleY = this.scale;
		var counter = 0;
		var _g = 0;
		while(_g < tiles.length) {
			var tile = tiles[_g];
			++_g;
			var flipped_horizontally = tile.gid & -2147483648;
			var flipped_vertically = tile.gid & 1073741824;
			var flipped_diagonally = tile.gid & 536870912;
			var id = tile.gid & 536870911;
			tileMapDisplay.setTile2(counter++,this.idToFrame(id),flipped_horizontally != 0,flipped_vertically != 0,flipped_diagonally != 0);
		}
		this.display.addChild(tileMapDisplay);
		return tileMapDisplay;
	}
	,createAdvanceDisplay: function(tileMap,displayConstructor) {
		var tiles = tileMap.data.tiles;
		var tileMapDisplay = new com_gEngine_display_extra_TileMapAdvanceDisplay(displayConstructor,tileMap.width,tileMap.height,this.tileWidth,this.tileHeight);
		tileMapDisplay.scaleX = tileMapDisplay.scaleY = this.scale;
		var counter = 0;
		var _g = 0;
		while(_g < tiles.length) {
			var tile = tiles[_g];
			++_g;
			if(tile.gid <= 0) {
				++counter;
				continue;
			}
			var flipped_horizontally = tile.gid & -2147483648;
			var flipped_vertically = tile.gid & 1073741824;
			var flipped_diagonally = tile.gid & 536870912;
			var id = tile.gid & 536870911;
			tileMapDisplay.setTile2(counter++,this.idToFrame(id),flipped_horizontally != 0,flipped_vertically != 0,flipped_diagonally != 0);
		}
		this.display.addChild(tileMapDisplay);
		return tileMapDisplay;
	}
	,idToFrame: function(id) {
		var length = this.tileIdStart.length;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			if(i == length - 1 || this.tileIdStart[i + 1] > id) {
				return id - this.tileIdStart[i];
			}
		}
		throw haxe_Exception.thrown("tile id can't be map to tilset");
	}
	,init: function(processTileMap,processObject) {
		this.tileIdStart = [];
		var r = new format_tmx_Reader();
		var t = r.read(Xml.parse(kha_Assets.blobs.get(this.tmxData).toString()));
		this.tileWidth = t.tileWidth;
		this.tileHeight = t.tileHeight;
		this.widthIntTiles = t.width;
		this.heightInTiles = t.height;
		var collision = null;
		var _g = 0;
		var _g1 = t.tilesets;
		while(_g < _g1.length) {
			var tilset = _g1[_g];
			++_g;
			this.tileIdStart.push(tilset.firstGID);
		}
		var _g = 0;
		var _g1 = t.layers;
		while(_g < _g1.length) {
			var layer = _g1[_g];
			++_g;
			switch(layer._hx_index) {
			case 0:
				var tileMap = layer.layer;
				if(processTileMap != null) {
					processTileMap(this,tileMap);
				}
				break;
			case 1:
				var objectMap = layer.group;
				if(processObject != null) {
					var _g2 = 0;
					var _g3 = objectMap.objects;
					while(_g2 < _g3.length) {
						var object = _g3[_g2];
						++_g2;
						processObject(this,object);
					}
				}
				break;
			default:
			}
		}
		return collision;
	}
	,__class__: com_collision_platformer_Tilemap
};
var com_debug_Profiler = function() { };
$hxClasses["com.debug.Profiler"] = com_debug_Profiler;
com_debug_Profiler.__name__ = "com.debug.Profiler";
com_debug_Profiler.startMeasure = function(name) {
};
com_debug_Profiler.endMeasure = function(name) {
};
com_debug_Profiler.show = function() {
};
com_debug_Profiler.clear = function() {
};
var com_framework_Simulation = function(initialState,virtualWidth,virtualHeight,oversample,antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	if(oversample == null) {
		oversample = 1;
	}
	this.mLastRealFrameTime = 0;
	this.mLastFrameTime = 0;
	this.mFrameByFrameTime = 0;
	this.iterationRest = 0;
	this.initState = false;
	this.initialized = false;
	this.startingSeed = 50;
	kha_math_Random.init(this.startingSeed | 0);
	this.initialState = initialState;
	this.resourcesHandlers = [];
	com_framework_Simulation.i = this;
	this.virtualHeight = virtualHeight;
	this.virtualWidth = virtualWidth;
	this.resources = new com_loading_Resources();
	com_framework_utils_Input.init();
	var tmp = kha_System.windowWidth();
	com_framework_utils_Input.i.screenScale.x = virtualWidth / tmp;
	var tmp = kha_System.windowHeight();
	com_framework_utils_Input.i.screenScale.y = virtualHeight / tmp;
	com_gEngine_GEngine.init(virtualWidth,virtualHeight,oversample,antiAlias);
	com_gEngine_GEngine.get_i().createDefaultPainters();
	com_soundLib_SoundManager.init();
	this.init();
};
$hxClasses["com.framework.Simulation"] = com_framework_Simulation;
com_framework_Simulation.__name__ = "com.framework.Simulation";
com_framework_Simulation.prototype = {
	currentState: null
	,isPause: null
	,nextState: null
	,requestChangeState: null
	,virtualWidth: null
	,virtualHeight: null
	,initialState: null
	,initialized: null
	,initState: null
	,resources: null
	,resourcesHandlers: null
	,startingSeed: null
	,noUnload: null
	,mManualLoad: null
	,iterationRest: null
	,needRender: null
	,get_manualLoad: function() {
		return this.mManualLoad;
	}
	,set_manualLoad: function(aValue) {
		this.mManualLoad = aValue;
		this.resources.keepData = aValue;
		return this.mManualLoad;
	}
	,init: function() {
		this.changeState(Type.createInstance(this.initialState,[]));
		kha_Scheduler.addTimeTask($bind(this,this.onEnterFrame),0,0.016666666666666666);
		kha_System.notifyOnFrames($bind(this,this.onRender));
	}
	,onDeactivate: function() {
		if(this.currentState != null) {
			this.currentState.onDesactivate();
		}
	}
	,onActive: function() {
		if(this.currentState != null) {
			this.currentState.onActivate();
		}
	}
	,mFrameByFrameTime: null
	,mLastFrameTime: null
	,mLastRealFrameTime: null
	,onEnterFrame: function() {
		this.needRender = true;
		var time = kha_Scheduler.time();
		this.mFrameByFrameTime = time - this.mLastFrameTime;
		this.mLastFrameTime = time;
		if(!this.isPause) {
			com_TimeManager.setDelta(this.mFrameByFrameTime);
			this.update(this.mFrameByFrameTime);
		}
		if(this.requestChangeState) {
			this.requestChangeState = false;
			this.loadState(this.nextState);
			this.nextState = null;
			return;
		}
	}
	,onRender: function(framebuffers) {
		var framebuffer = framebuffers[0];
		var _this = com_framework_utils_Input.i.screenScale;
		var x = this.virtualWidth / framebuffer.get_width();
		var y = this.virtualHeight / framebuffer.get_height();
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		if(this.initialized) {
			this.currentState.render();
		}
		com_gEngine_GEngine.get_i().draw(framebuffer,true,this.needRender);
		this.currentState.draw(framebuffer);
		if(this.isPause) {
			var g2 = framebuffer.get_g2();
			g2.begin(false);
			var transformation = new kha_math_FastMatrix3(0.75,0,0,0,0.75,0,0,0,1);
			g2.setTransformation(transformation);
			var _this = g2.transformations[g2.transformationIndex];
			_this._00 = transformation._00;
			_this._10 = transformation._10;
			_this._20 = transformation._20;
			_this._01 = transformation._01;
			_this._11 = transformation._11;
			_this._21 = transformation._21;
			_this._02 = transformation._02;
			_this._12 = transformation._12;
			_this._22 = transformation._22;
			g2.set_color(kha_Color.fromFloats(0.5,0.5,0.5,0.5));
			g2.fillRect(0,0,1280,720);
			g2.set_color(kha_Color.fromFloats(1,1,1,1));
			g2.fillTriangle(485,270,740,390,485,510);
			g2.end();
		}
		this.needRender = false;
	}
	,update: function(dt) {
		if(!this.initialized) {
			if(this.currentState != null) {
				this.currentState.loading(this.resources.percentage());
			}
			this.resources.update();
			return;
		}
		var fullIterations = Math.floor(com_TimeManager.multiplier + this.iterationRest);
		var _g = 0;
		var _g1 = fullIterations;
		while(_g < _g1) {
			var i = _g++;
			this.currentState.update(dt);
			com_gEngine_GEngine.get_i().update();
			com_framework_utils_Input.i.update();
		}
		this.iterationRest = com_TimeManager.multiplier + this.iterationRest - fullIterations;
	}
	,loadState: function(state) {
		this.initialized = false;
		if(this.currentState != null) {
			com_framework_utils_Input.i.clearInput();
			this.currentState.destroy();
			com_gEngine_GEngine.get_i().unload();
			if(!this.noUnload) {
				com_soundLib_SoundManager.reset();
				this.resources.unload();
				this.unloadResourceHandlers();
			} else {
				this.resources = new com_loading_Resources();
			}
		}
		this.currentState = state;
		var tmp = com_gEngine_GEngine.get_i().stage;
		this.currentState.stage = tmp;
		this.currentState.load(this.resources);
		if(this.get_manualLoad()) {
			this.resources.loadLocal($bind(this,this.finishUpload));
		} else {
			this.resources.load($bind(this,this.finishUpload));
		}
	}
	,addResourceHandler: function(resourceHandler) {
		this.resourcesHandlers.push(resourceHandler);
	}
	,unloadResourceHandlers: function() {
		var _g = 0;
		var _g1 = this.resourcesHandlers;
		while(_g < _g1.length) {
			var resourceHandler = _g1[_g];
			++_g;
			resourceHandler.clear();
		}
	}
	,finishUpload: function() {
		this.initialized = true;
		this.currentState.init();
		com_gEngine_GEngine.get_i().update();
	}
	,changeState: function(state) {
		this.requestChangeState = true;
		this.nextState = state;
	}
	,pause: function() {
		this.isPause = true;
		if(this.currentState != null) {
			this.currentState.onDesactivate();
		}
	}
	,unpause: function() {
		this.isPause = false;
		if(this.currentState != null) {
			this.currentState.onActivate();
		}
	}
	,__class__: com_framework_Simulation
	,__properties__: {set_manualLoad:"set_manualLoad",get_manualLoad:"get_manualLoad"}
};
var com_framework_utils_Entity = function() {
	this.toDelete = [];
	this.childrenInLimbo = 0;
	this.limbo = false;
	this.dead = false;
	this.children = [];
	this.parent = null;
};
$hxClasses["com.framework.utils.Entity"] = com_framework_utils_Entity;
com_framework_utils_Entity.__name__ = "com.framework.utils.Entity";
com_framework_utils_Entity.notify = function(entity,id,args) {
	var res = entity.onNotify(id,args);
	if(!res) {
		haxe_Log.trace("Unhandled message: " + id + ", args: " + Std.string(args),{ fileName : "com/framework/utils/Entity.hx", lineNumber : 106, className : "com.framework.utils.Entity", methodName : "notify"});
	}
};
com_framework_utils_Entity.prototype = {
	parent: null
	,children: null
	,dead: null
	,pool: null
	,limbo: null
	,childrenInLimbo: null
	,toDelete: null
	,update: function(dt) {
		var counter = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.limbo) {
				++counter;
				continue;
			}
			child.update(dt);
			if(child.isDead()) {
				if(this.pool) {
					child.limbo = true;
					child.limboStart();
					++this.childrenInLimbo;
				} else {
					child.destroy();
					this.toDelete.push(counter);
				}
			}
			++counter;
		}
		var offset = 0;
		var _g = 0;
		var _g1 = this.toDelete;
		while(_g < _g1.length) {
			var index = _g1[_g];
			++_g;
			this.children.splice(index - offset,1);
			++offset;
		}
		this.toDelete.splice(0,this.toDelete.length);
	}
	,render: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!child.limbo) {
				child.render();
			}
		}
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.destroy();
		}
		this.parent = null;
	}
	,revive: function() {
		this.limbo = false;
		this.dead = false;
	}
	,limboStart: function() {
		throw haxe_Exception.thrown("override this function recycle object");
	}
	,recycle: function(type,arg) {
		if(this.childrenInLimbo > 0) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				if(!child.limbo) {
					continue;
				}
				child.limbo = false;
				child.dead = false;
				--this.childrenInLimbo;
				return child;
			}
		}
		var obj = Type.createInstance(type,arg == null ? [] : arg);
		this.addChild(obj);
		return obj;
	}
	,die: function() {
		this.dead = true;
	}
	,isDead: function() {
		return this.dead;
	}
	,addChild: function(entity) {
		if(entity.parent != null) {
			throw haxe_Exception.thrown("remove from parent first");
		}
		this.children.push(entity);
		entity.parent = this;
	}
	,onNotify: function(id,args) {
		return false;
	}
	,numAliveChildren: function() {
		return this.children.length - this.childrenInLimbo;
	}
	,currentCapacity: function() {
		return this.children.length;
	}
	,clear: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.limboStart();
			child.limbo = true;
			child.dead = true;
		}
		this.childrenInLimbo = this.currentCapacity();
	}
	,__class__: com_framework_utils_Entity
};
var com_framework_utils_Input = function() {
	this.mouseDeltaY = 0;
	this.mouseDeltaX = 0;
	this.screenScale = new com_helpers_FastPoint(1,1);
	this.mouseIsDown = false;
	this.mousePressed = false;
	this.mouseReleased = false;
	this.keysDown = [];
	this.keysPressed = [];
	this.keysReleased = [];
	this.onKeyDownSubscribers = [];
	this.onKeyUpSubscribers = [];
	this.activeTouchSpots = 0;
	this.touchActive = [];
	this.touchPos = [];
	this.touchPos.push(0);
	this.touchPos.push(0);
	this.touchPos.push(0);
	this.touchPos.push(0);
	this.touchPos.push(0);
	this.touchPos.push(0);
	this.touchPos.push(0);
	this.touchPos.push(0);
	this.touchPos.push(0);
	this.touchPos.push(0);
	this.touchPos.push(0);
	this.touchPos.push(0);
	this.mousePosition = new com_helpers_FastPoint();
	this.joysticks = [];
};
$hxClasses["com.framework.utils.Input"] = com_framework_utils_Input;
com_framework_utils_Input.__name__ = "com.framework.utils.Input";
com_framework_utils_Input.__properties__ = {get_inst:"get_inst"};
com_framework_utils_Input.get_inst = function() {
	return com_framework_utils_Input.i;
};
com_framework_utils_Input.init = function() {
	com_framework_utils_Input.i = new com_framework_utils_Input();
	com_framework_utils_Input.i.subscibeInput();
};
com_framework_utils_Input.prototype = {
	mouseIsDown: null
	,mousePressed: null
	,mouseReleased: null
	,keysDown: null
	,keysPressed: null
	,keysReleased: null
	,touchPos: null
	,touchActive: null
	,mouseDeltaX: null
	,mouseDeltaY: null
	,activeTouchSpots: null
	,joysticks: null
	,mousePosition: null
	,screenScale: null
	,onKeyDownSubscribers: null
	,onKeyUpSubscribers: null
	,getGamepad: function(index) {
		return this.joysticks[index];
	}
	,subscibeInput: function() {
		kha_input_Keyboard.get().notify($bind(this,this.onKeyDown),$bind(this,this.onKeyUp));
		kha_input_Mouse.get().notify($bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),null);
		var surface = kha_input_Surface.get();
		if(surface != null) {
			surface.notify($bind(this,this.onTouchStart),$bind(this,this.onTouchEnd),$bind(this,this.onTouchMove));
		}
		this.joysticks.push(new com_framework_utils_JoystickProxy(0));
		this.joysticks.push(new com_framework_utils_JoystickProxy(1));
		this.joysticks.push(new com_framework_utils_JoystickProxy(2));
		this.joysticks.push(new com_framework_utils_JoystickProxy(3));
		kha_input_Gamepad.notifyOnConnect($bind(this,this.onConnect),$bind(this,this.onDisconnect));
	}
	,onConnect: function(aId) {
		haxe_Log.trace("gamepad " + aId,{ fileName : "com/framework/utils/Input.hx", lineNumber : 170, className : "com.framework.utils.Input", methodName : "onConnect"});
		this.joysticks[aId].onConnect();
	}
	,onDisconnect: function(gamePad) {
		this.joysticks[gamePad].onDisconnect();
	}
	,onTouchMove: function(id,x,y) {
		this.touchPos[id * 2] = x;
		this.touchPos[id * 2 + 1] = y;
		if(id == 0) {
			var _this = this.mousePosition;
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			_this.x = x1;
			_this.y = y1;
		}
	}
	,onTouchEnd: function(id,x,y) {
		HxOverrides.remove(this.touchActive,id);
		this.touchPos[id * 2] = x;
		this.touchPos[id * 2 + 1] = y;
		--this.activeTouchSpots;
		if(id == 0) {
			var _this = this.mousePosition;
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			_this.x = x1;
			_this.y = y1;
			this.mouseIsDown = false;
			this.mouseReleased = true;
		}
	}
	,onTouchStart: function(id,x,y) {
		++this.activeTouchSpots;
		this.touchActive.push(id);
		this.touchPos[id * 2] = x;
		this.touchPos[id * 2 + 1] = y;
		if(id == 0) {
			var _this = this.mousePosition;
			var x1 = x;
			var y1 = y;
			if(y1 == null) {
				y1 = 0;
			}
			if(x1 == null) {
				x1 = 0;
			}
			_this.x = x1;
			_this.y = y1;
			this.mouseIsDown = true;
			this.mousePressed = true;
		}
	}
	,onMouseMove: function(x,y,moveX,moveY) {
		this.touchPos[0] = x;
		this.touchPos[1] = y;
		this.mousePosition.x = x;
		this.mousePosition.y = y;
		this.mouseDeltaX = moveX;
		this.mouseDeltaY = moveY;
	}
	,onMouseUp: function(button,x,y) {
		HxOverrides.remove(this.touchActive,0);
		--this.activeTouchSpots;
		this.mousePosition.x = x;
		this.mousePosition.y = y;
		this.mouseReleased = button == 0;
		this.mouseIsDown = button != 0;
	}
	,onMouseDown: function(button,x,y) {
		++this.activeTouchSpots;
		this.touchActive.push(0);
		this.touchPos[0] = x;
		this.touchPos[1] = y;
		this.mousePosition.x = x;
		this.mousePosition.y = y;
		this.mousePressed = this.mouseIsDown = button == 0;
	}
	,onKeyDown: function(key) {
		if(this.keysDown.indexOf(key) == -1) {
			this.keysDown.push(key);
			this.keysPressed.push(key);
		}
		var _g = 0;
		var _g1 = this.onKeyDownSubscribers;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(key);
		}
	}
	,onKeyUp: function(key) {
		var vIndex = this.keysDown.indexOf(key);
		if(vIndex != -1) {
			this.keysDown.splice(vIndex,1);
		}
		this.keysReleased.push(key);
		var _g = 0;
		var _g1 = this.onKeyUpSubscribers;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(key);
		}
	}
	,lockMouse: function() {
		kha_input_Mouse.get().lock();
	}
	,unlockMouse: function() {
		kha_input_Mouse.get().unlock();
	}
	,isMouseLock: function() {
		return kha_input_Mouse.get().isLocked();
	}
	,update: function() {
		this.mousePressed = false;
		this.mouseReleased = false;
		this.keysPressed.splice(0,this.keysPressed.length);
		this.keysReleased.splice(0,this.keysReleased.length);
		var _g = 0;
		var _g1 = this.joysticks;
		while(_g < _g1.length) {
			var joystick = _g1[_g];
			++_g;
			joystick.update();
		}
		this.mouseDeltaX = 0;
		this.mouseDeltaY = 0;
	}
	,clearInput: function() {
		this.mousePressed = false;
		this.mouseReleased = false;
		this.activeTouchSpots = 0;
		this.keysPressed.splice(0,this.keysPressed.length);
		this.keysReleased.splice(0,this.keysReleased.length);
		this.keysDown.splice(0,this.keysDown.length);
		var _g = 0;
		var _g1 = this.joysticks;
		while(_g < _g1.length) {
			var joystick = _g1[_g];
			++_g;
			joystick.clearInput();
		}
	}
	,isKeyCodeDown: function(keyCode) {
		return this.keysDown.indexOf(keyCode) != -1;
	}
	,isKeyCodePressed: function(keyCode) {
		return this.keysPressed.indexOf(keyCode) != -1;
	}
	,isKeyCodeReleased: function(keyCode) {
		return this.keysReleased.indexOf(keyCode) != -1;
	}
	,isMouseDown: function() {
		return this.mouseIsDown;
	}
	,isMousePressed: function() {
		return this.mousePressed;
	}
	,isMouseReleased: function() {
		return this.mouseReleased;
	}
	,getMouseX: function() {
		return this.mousePosition.x * this.screenScale.x;
	}
	,getMouseY: function() {
		return this.mousePosition.y * this.screenScale.y;
	}
	,touchX: function(id) {
		return this.touchPos[id * 2] * this.screenScale.x;
	}
	,touchY: function(id) {
		return this.touchPos[id * 2 + 1] * this.screenScale.y;
	}
	,isTouchActive: function(id) {
		return this.touchActive.indexOf(id) != -1;
	}
	,activeTouches: function() {
		return this.touchActive;
	}
	,buttonDown: function(joystickId,buttonId) {
		return this.joysticks[joystickId].buttonDown(buttonId);
	}
	,buttonPressed: function(joystickId,buttonId) {
		return this.joysticks[joystickId].buttonPressed(buttonId);
	}
	,buttonReleased: function(joystickId,buttonId) {
		return this.joysticks[joystickId].buttonReleased(buttonId);
	}
	,axis: function(joystickId,buttonId) {
		return this.joysticks[joystickId].axis(buttonId);
	}
	,subscribeKeyboard: function(onKeyDown,onKeyUp) {
		this.onKeyDownSubscribers.push(onKeyDown);
		this.onKeyUpSubscribers.push(onKeyUp);
	}
	,unsubscribeKeyboard: function(onKeyDown,onKeyUp) {
		HxOverrides.remove(this.onKeyDownSubscribers,onKeyDown);
		HxOverrides.remove(this.onKeyUpSubscribers,onKeyUp);
	}
	,__class__: com_framework_utils_Input
};
var com_framework_utils_JoystickProxy = function(id) {
	this.id = id;
	this.buttons = [];
	this.axes = [];
	this.pressed = [];
	this.released = [];
	this.onConnect();
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.buttons.push(0);
	this.axes.push(0);
	this.axes.push(0);
	this.axes.push(0);
	this.axes.push(0);
	this.axes.push(0);
	this.axes.push(0);
	this.axes.push(0);
};
$hxClasses["com.framework.utils.JoystickProxy"] = com_framework_utils_JoystickProxy;
com_framework_utils_JoystickProxy.__name__ = "com.framework.utils.JoystickProxy";
com_framework_utils_JoystickProxy.prototype = {
	buttons: null
	,axes: null
	,pressed: null
	,released: null
	,gamepad: null
	,onAxisChange: null
	,onButtonChange: null
	,id: null
	,active: null
	,notify: function(onAxisChange,onButtonChange) {
		this.onAxisChange = onAxisChange;
		this.onButtonChange = onButtonChange;
	}
	,onConnect: function() {
		if(!this.active) {
			this.gamepad = kha_input_Gamepad.get(this.id);
			if(this.gamepad != null) {
				this.gamepad.notify($bind(this,this.onAxis),$bind(this,this.onButton));
				this.active = true;
			}
		}
	}
	,onDisconnect: function() {
		if(this.active) {
			this.gamepad = kha_input_Gamepad.get(this.id);
			if(this.gamepad != null) {
				this.gamepad.remove($bind(this,this.onAxis),$bind(this,this.onButton));
				this.active = false;
			}
		}
	}
	,onAxis: function(id,value) {
		this.axes[id] = value;
		if(this.onAxisChange != null) {
			this.onAxisChange(id,value);
		}
	}
	,onButton: function(id,value) {
		this.buttons[id] = value;
		if(value == 0) {
			this.released.push(id);
		} else {
			this.pressed.push(id);
		}
		if(this.onButtonChange != null) {
			this.onButtonChange(id,value);
		}
	}
	,update: function() {
		this.released.splice(0,this.released.length);
		this.pressed.splice(0,this.pressed.length);
	}
	,clearInput: function() {
		this.released.splice(0,this.released.length);
		this.pressed.splice(0,this.pressed.length);
		var _g = 0;
		var _g1 = this.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			this.buttons[i] = 0;
		}
		this.onButtonChange = null;
		this.onAxisChange = null;
	}
	,buttonPressed: function(id) {
		var _g = 0;
		var _g1 = this.pressed;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i == id) {
				return true;
			}
		}
		return false;
	}
	,buttonReleased: function(id) {
		var _g = 0;
		var _g1 = this.released;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(i == id) {
				return true;
			}
		}
		return false;
	}
	,buttonDown: function(id) {
		return this.buttons[id] == 1;
	}
	,axis: function(id) {
		return this.axes[id];
	}
	,__class__: com_framework_utils_JoystickProxy
};
var com_framework_utils_LERP = function() { };
$hxClasses["com.framework.utils.LERP"] = com_framework_utils_LERP;
com_framework_utils_LERP.__name__ = "com.framework.utils.LERP";
com_framework_utils_LERP.f = function(aA,aB,aS) {
	return aB * aS - aA * (aS - 1);
};
com_framework_utils_LERP.s = function(current,total) {
	return current / total;
};
var com_framework_utils_Perlin = function(repeat) {
	if(repeat == null) {
		repeat = -1;
	}
	this.repeat = repeat;
	if(com_framework_utils_Perlin.P == null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < 512) {
			var x = _g1++;
			_g.push(com_framework_utils_Perlin.PERMUTATIONS[x % 256]);
		}
		com_framework_utils_Perlin.P = _g;
	}
};
$hxClasses["com.framework.utils.Perlin"] = com_framework_utils_Perlin;
com_framework_utils_Perlin.__name__ = "com.framework.utils.Perlin";
com_framework_utils_Perlin.grad = function(hash,x,y,z) {
	var h = hash & 15;
	var u = h < 8 ? x : y;
	var v;
	if(h < 4) {
		v = y;
	} else if(h == 12 || h == 14) {
		v = x;
	} else {
		v = z;
	}
	return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
};
com_framework_utils_Perlin.prototype = {
	repeat: null
	,perlin: function(x,y,z) {
		if(this.repeat > 0) {
			x %= this.repeat;
			y %= this.repeat;
			z %= this.repeat;
		}
		var xi = Math.floor(x) & 255;
		var yi = Math.floor(y) & 255;
		var zi = Math.floor(z) & 255;
		var xf = x - Math.floor(x);
		var yf = y - Math.floor(y);
		var zf = z - Math.floor(z);
		var u = this.fade(xf);
		var v = this.fade(yf);
		var w = this.fade(zf);
		var aaa = com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[xi] + yi] + zi];
		var aba = com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[xi] + this.inc(yi)] + zi];
		var aab = com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[xi] + yi] + this.inc(zi)];
		var abb = com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[xi] + this.inc(yi)] + this.inc(zi)];
		var baa = com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[this.inc(xi)] + yi] + zi];
		var bba = com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[this.inc(xi)] + this.inc(yi)] + zi];
		var bab = com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[this.inc(xi)] + yi] + this.inc(zi)];
		var bbb = com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[com_framework_utils_Perlin.P[this.inc(xi)] + this.inc(yi)] + this.inc(zi)];
		var x1 = this.lerp(com_framework_utils_Perlin.grad(aaa,xf,yf,zf),com_framework_utils_Perlin.grad(baa,xf - 1,yf,zf),u);
		var x2 = this.lerp(com_framework_utils_Perlin.grad(aba,xf,yf - 1,zf),com_framework_utils_Perlin.grad(bba,xf - 1,yf - 1,zf),u);
		var y1 = this.lerp(x1,x2,v);
		x1 = this.lerp(com_framework_utils_Perlin.grad(aab,xf,yf,zf - 1),com_framework_utils_Perlin.grad(bab,xf - 1,yf,zf - 1),u);
		x2 = this.lerp(com_framework_utils_Perlin.grad(abb,xf,yf - 1,zf - 1),com_framework_utils_Perlin.grad(bbb,xf - 1,yf - 1,zf - 1),u);
		var y2 = this.lerp(x1,x2,v);
		return (this.lerp(y1,y2,w) + 1) / 2;
	}
	,OctavePerlin: function(x,y,z,octaves,persistence,frequency) {
		var total = 0.0;
		var maxValue = 0.0;
		var amplitude = 1.0;
		var _g = 0;
		var _g1 = octaves;
		while(_g < _g1) {
			var i = _g++;
			total += this.perlin(x * frequency,y * frequency,z * frequency) * amplitude;
			maxValue += amplitude;
			amplitude *= persistence;
			frequency *= 2.0;
		}
		return total / maxValue;
	}
	,fade: function(t) {
		return t * t * t * (t * (t * 6 - 15) + 10);
	}
	,inc: function(num) {
		++num;
		if(this.repeat > 0) {
			num %= this.repeat;
		}
		return num;
	}
	,lerp: function(a,b,x) {
		return a + x * (b - a);
	}
	,__class__: com_framework_utils_Perlin
};
var com_framework_utils_Random = function() { };
$hxClasses["com.framework.utils.Random"] = com_framework_utils_Random;
com_framework_utils_Random.__name__ = "com.framework.utils.Random";
com_framework_utils_Random.getRandom = function() {
	return kha_math_Random.getFloat();
};
com_framework_utils_Random.getRandomIn = function(min,max) {
	return kha_math_Random.getFloatIn(min,max);
};
com_framework_utils_Random.init = function(seed) {
	kha_math_Random.init(seed);
};
var com_framework_utils_State = function() {
	this.timeScale = 1;
	com_framework_utils_Entity.call(this);
	this.subStates = [];
};
$hxClasses["com.framework.utils.State"] = com_framework_utils_State;
com_framework_utils_State.__name__ = "com.framework.utils.State";
com_framework_utils_State.__super__ = com_framework_utils_Entity;
com_framework_utils_State.prototype = $extend(com_framework_utils_Entity.prototype,{
	stage: null
	,timeScale: null
	,subStates: null
	,parentState: null
	,resources: null
	,load: function(resources) {
	}
	,init: function() {
	}
	,addSubState: function(state) {
		if(state.resources == null) {
			throw haxe_Exception.thrown("call initSubState from parent befour adding");
		}
		this.subStates.push(state);
		state.parentState = this;
		this.stage.addSubStage(state.stage);
	}
	,removeSubState: function(state) {
		HxOverrides.remove(this.subStates,state);
		this.stage.removeSubStage(state.stage);
		state.parentState = null;
		state.die();
	}
	,initSubState: function(state) {
		state.resources = new com_loading_Resources();
		state.load(state.resources);
		state.stage = new com_gEngine_display_Stage();
		state.resources.load(function() {
			state.init();
		});
	}
	,changeState: function(state) {
		com_framework_Simulation.i.changeState(state);
	}
	,stageColor: function(r,g,b,a) {
		if(a == null) {
			a = 1;
		}
		if(b == null) {
			b = 0;
		}
		if(g == null) {
			g = 0;
		}
		if(r == null) {
			r = 0;
		}
		this.stage.set_color(kha_Color.fromFloats(r,g,b,a));
	}
	,draw: function(framebuffer) {
		var _g = 0;
		var _g1 = this.subStates;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.draw(framebuffer);
		}
	}
	,onActivate: function() {
	}
	,onDesactivate: function() {
	}
	,onMessage: function(message) {
	}
	,destroy: function() {
		if(this.resources != null) {
			this.resources.unload();
		}
		while(this.subStates.length > 0) this.removeSubState(this.subStates[0]);
		this.stage.destroy();
		if(this.parentState != null) {
			this.parentState.removeSubState(this);
		}
		com_framework_utils_Entity.prototype.destroy.call(this);
	}
	,update: function(dt) {
		var dt = com_TimeManager.delta * this.timeScale;
		com_framework_utils_Entity.prototype.update.call(this,dt);
		if(this.dead) {
			return;
		}
		var _g = 0;
		var _g1 = this.subStates;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.update(dt);
		}
	}
	,set_timeScale: function(scale) {
		this.timeScale = scale;
		this.stage.timeScale = scale;
		return scale;
	}
	,loading: function(percentage) {
	}
	,__class__: com_framework_utils_State
	,__properties__: {set_timeScale:"set_timeScale"}
});
var com_framework_utils_VirtualGamepad = function() {
	this.scaleY = 1;
	this.scaleX = 1;
	kha_input_Surface.get().notify($bind(this,this.onTouchStart),$bind(this,this.onTouchEnd),$bind(this,this.onTouchMove));
	com_framework_utils_Input.i.subscribeKeyboard($bind(this,this.onKeyDown),$bind(this,this.onKeyUp));
	this.buttonsTouch = [];
	this.sticksTouch = [];
	this.globalStick = new com_framework_utils_VirtualStick();
	this.keyButton = new haxe_ds_IntMap();
};
$hxClasses["com.framework.utils.VirtualGamepad"] = com_framework_utils_VirtualGamepad;
com_framework_utils_VirtualGamepad.__name__ = "com.framework.utils.VirtualGamepad";
com_framework_utils_VirtualGamepad.prototype = {
	width: null
	,height: null
	,scaleX: null
	,scaleY: null
	,buttonsTouch: null
	,sticksTouch: null
	,globalStick: null
	,keyButton: null
	,onAxisChange: null
	,onButtonChange: null
	,destroy: function() {
		kha_input_Surface.get().remove($bind(this,this.onTouchStart),$bind(this,this.onTouchEnd),$bind(this,this.onTouchMove));
		com_framework_utils_Input.i.unsubscribeKeyboard($bind(this,this.onKeyDown),$bind(this,this.onKeyUp));
		this.onAxisChange = null;
		this.onButtonChange = null;
	}
	,clear: function() {
		this.onAxisChange = null;
		this.onButtonChange = null;
	}
	,addButton: function(id,x,y,radio) {
		var button = new com_framework_utils_VirtualButton();
		button.id = id;
		button.x = x;
		button.y = y;
		button.radio = radio;
		this.buttonsTouch.push(button);
	}
	,addButtonRec: function(id,left,top,right,bottom) {
		var button = new com_framework_utils_VirtualRectangleButton(left,top,right,bottom);
		button.id = id;
		this.buttonsTouch.push(button);
	}
	,addKeyButton: function(id,key) {
		this.keyButton.h[key] = id;
	}
	,addStick: function(idX,idY,x,y,radio) {
		var stick = new com_framework_utils_VirtualStick();
		stick.idX = idX;
		stick.idY = idY;
		stick.x = x;
		stick.y = y;
		stick.radio = radio;
		this.sticksTouch.push(stick);
	}
	,globalStickData: function(idX,idY,radio) {
		this.globalStick.idX = idX;
		this.globalStick.idY = idY;
		this.globalStick.radio = radio;
	}
	,notify: function(onAxis,onButton) {
		this.onAxisChange = onAxis;
		this.onButtonChange = onButton;
	}
	,onTouchStart: function(id,x,y) {
		this.scaleX = com_framework_utils_Input.i.screenScale.x;
		this.scaleY = com_framework_utils_Input.i.screenScale.y;
		var _g = 0;
		var _g1 = this.buttonsTouch;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button.handleInput(x * this.scaleX,y * this.scaleY)) {
				this.pressButton(button,id);
			}
		}
		var _g = 0;
		var _g1 = this.sticksTouch;
		while(_g < _g1.length) {
			var stick = _g1[_g];
			++_g;
			if(!stick.active && stick.handleInput(x * this.scaleX,y * this.scaleY)) {
				this.onAxisChange(stick.idX,stick.axisX);
				this.onAxisChange(stick.idY,stick.axisY);
				stick.active = true;
				stick.touchId = id;
			}
		}
		if(!this.globalStick.active) {
			this.globalStick.active = true;
			this.globalStick.x = x * this.scaleX;
			this.globalStick.y = y * this.scaleY;
			this.globalStick.axisX = 0;
			this.globalStick.axisY = 0;
			this.globalStick.touchId = id;
		}
	}
	,onTouchMove: function(id,x,y) {
		this.scaleX = com_framework_utils_Input.i.screenScale.x;
		this.scaleY = com_framework_utils_Input.i.screenScale.y;
		var _g = 0;
		var _g1 = this.buttonsTouch;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			var inside = button.handleInput(x * this.scaleX,y * this.scaleY);
			if(inside && !button.active) {
				this.pressButton(button,id);
			} else if(!inside && button.active && button.touchId == id) {
				this.releaseButton(button);
			}
		}
		var _g = 0;
		var _g1 = this.sticksTouch;
		while(_g < _g1.length) {
			var stick = _g1[_g];
			++_g;
			if(stick.touchId == id) {
				stick.handleInput(x * this.scaleX,y * this.scaleY);
				this.onAxisChange(stick.idX,stick.axisX);
				this.onAxisChange(stick.idY,stick.axisY);
				stick.active = true;
				return;
			}
		}
		if(this.globalStick.touchId == id) {
			this.globalStick.handleInputNoBound(x * this.scaleX,y * this.scaleY);
			this.onAxisChange(this.globalStick.idX,this.globalStick.axisX);
			this.onAxisChange(this.globalStick.idY,this.globalStick.axisY);
		}
	}
	,onTouchEnd: function(id,x,y) {
		var _g = 0;
		var _g1 = this.buttonsTouch;
		while(_g < _g1.length) {
			var button = _g1[_g];
			++_g;
			if(button.touchId == id) {
				this.releaseButton(button);
			}
		}
		var _g = 0;
		var _g1 = this.sticksTouch;
		while(_g < _g1.length) {
			var stick = _g1[_g];
			++_g;
			if(stick.touchId == id) {
				this.onAxisChange(stick.idX,0);
				this.onAxisChange(stick.idY,0);
				stick.active = false;
				stick.touchId = -1;
			}
		}
		if(this.globalStick.touchId == id) {
			this.onAxisChange(this.globalStick.idX,0);
			this.onAxisChange(this.globalStick.idY,0);
			this.globalStick.active = false;
			this.globalStick.touchId = -1;
		}
	}
	,pressButton: function(button,touchId) {
		button.active = true;
		button.touchId = touchId;
		this.onButtonChange(button.id,1);
	}
	,releaseButton: function(button) {
		button.active = false;
		this.onButtonChange(button.id,0);
		button.touchId = -1;
	}
	,onKeyDown: function(key) {
		if(!this.keyButton.h.hasOwnProperty(key)) {
			return;
		}
		var id = this.keyButton.h[key];
		this.onButtonChange(id,1);
	}
	,onKeyUp: function(key) {
		if(!this.keyButton.h.hasOwnProperty(key)) {
			return;
		}
		var id = this.keyButton.h[key];
		this.onButtonChange(id,0);
	}
	,__class__: com_framework_utils_VirtualGamepad
};
var com_framework_utils_VirtualInput = function() { };
$hxClasses["com.framework.utils.VirtualInput"] = com_framework_utils_VirtualInput;
com_framework_utils_VirtualInput.__name__ = "com.framework.utils.VirtualInput";
com_framework_utils_VirtualInput.__isInterface__ = true;
com_framework_utils_VirtualInput.prototype = {
	touchId: null
	,id: null
	,active: null
	,handleInput: null
	,__class__: com_framework_utils_VirtualInput
};
var com_framework_utils_VirtualButton = function() {
	this.touchId = -1;
};
$hxClasses["com.framework.utils.VirtualButton"] = com_framework_utils_VirtualButton;
com_framework_utils_VirtualButton.__name__ = "com.framework.utils.VirtualButton";
com_framework_utils_VirtualButton.__interfaces__ = [com_framework_utils_VirtualInput];
com_framework_utils_VirtualButton.prototype = {
	touchId: null
	,id: null
	,x: null
	,y: null
	,radio: null
	,active: null
	,handleInput: function(x,y) {
		return (x - this.x) * (x - this.x) + (y - this.y) * (y - this.y) < this.radio * this.radio;
	}
	,__class__: com_framework_utils_VirtualButton
};
var com_framework_utils_VirtualRectangleButton = function(left,top,right,bottom) {
	this.touchId = -1;
	this.area = com_helpers_MinMax.from(left,top,right,bottom);
};
$hxClasses["com.framework.utils.VirtualRectangleButton"] = com_framework_utils_VirtualRectangleButton;
com_framework_utils_VirtualRectangleButton.__name__ = "com.framework.utils.VirtualRectangleButton";
com_framework_utils_VirtualRectangleButton.__interfaces__ = [com_framework_utils_VirtualInput];
com_framework_utils_VirtualRectangleButton.prototype = {
	touchId: null
	,id: null
	,area: null
	,active: null
	,handleInput: function(x,y) {
		return this.area.inside(x,y);
	}
	,__class__: com_framework_utils_VirtualRectangleButton
};
var com_framework_utils_VirtualStick = function() {
	this.touchId = -1;
};
$hxClasses["com.framework.utils.VirtualStick"] = com_framework_utils_VirtualStick;
com_framework_utils_VirtualStick.__name__ = "com.framework.utils.VirtualStick";
com_framework_utils_VirtualStick.prototype = {
	touchId: null
	,idX: null
	,idY: null
	,x: null
	,y: null
	,radio: null
	,axisX: null
	,axisY: null
	,active: null
	,handleInput: function(x,y) {
		var sqrDistance = (x - this.x) * (x - this.x) + (y - this.y) * (y - this.y);
		if(this.active || sqrDistance < this.radio * this.radio) {
			var length = Math.sqrt(sqrDistance);
			this.axisX = (x - this.x) / length;
			this.axisY = (y - this.y) / length;
			return true;
		}
		return false;
	}
	,handleInputNoBound: function(x,y) {
		var sqrDistance = (x - this.x) * (x - this.x) + (y - this.y) * (y - this.y);
		var length = Math.sqrt(sqrDistance);
		if(length > 0) {
			this.axisX = (x - this.x) / length;
			this.axisY = (y - this.y) / length;
		}
		if(length > this.radio) {
			this.x = x - this.axisX * this.radio;
			this.y = y - this.axisY * this.radio;
		}
		return true;
	}
	,__class__: com_framework_utils_VirtualStick
};
var com_framework_utils_XboxJoystick = function() { };
$hxClasses["com.framework.utils.XboxJoystick"] = com_framework_utils_XboxJoystick;
com_framework_utils_XboxJoystick.__name__ = "com.framework.utils.XboxJoystick";
var com_g3d_Container = function() {
	this.children = [];
};
$hxClasses["com.g3d.Container"] = com_g3d_Container;
com_g3d_Container.__name__ = "com.g3d.Container";
com_g3d_Container.prototype = {
	name: null
	,children: null
	,__class__: com_g3d_Container
};
var com_g3d_OgexData = function(data) {
	this.materials = [];
	this.cameraObjects = [];
	this.lightObjects = [];
	this.geometryObjects = [];
	this.metrics = [];
	com_g3d_Container.call(this);
	this.file = new haxe_io_StringInput(data);
	var s;
	try {
		while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "BoneNode":
				this.children.push(this.parseBoneNode(s,this));
				break;
			case "CameraNode":
				this.children.push(this.parseCameraNode(s,this));
				break;
			case "CameraObject":
				this.cameraObjects.push(this.parseCameraObject(s));
				break;
			case "GeometryNode":
				this.children.push(this.parseGeometryNode(s,this));
				break;
			case "GeometryObject":
				this.geometryObjects.push(this.parseGeometryObject(s));
				break;
			case "LightNode":
				this.children.push(this.parseLightNode(s,this));
				break;
			case "LightObject":
				this.lightObjects.push(this.parseLightObject(s));
				break;
			case "Material":
				this.materials.push(this.parseMaterial(s));
				break;
			case "Metric":
				this.metrics.push(this.parseMetric(s));
				break;
			case "Node":
				this.children.push(this.parseNode(s,this));
				break;
			}
		}
	} catch( _g ) {
		if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
			throw _g;
		}
	}
	this.file.close();
};
$hxClasses["com.g3d.OgexData"] = com_g3d_OgexData;
com_g3d_OgexData.__name__ = "com.g3d.OgexData";
com_g3d_OgexData.__super__ = com_g3d_Container;
com_g3d_OgexData.prototype = $extend(com_g3d_Container.prototype,{
	metrics: null
	,geometryObjects: null
	,lightObjects: null
	,cameraObjects: null
	,materials: null
	,file: null
	,getNode: function(name) {
		var res = null;
		this.traverseNodes(function(it) {
			if(it.name == name) {
				res = it;
			}
		});
		return res;
	}
	,getNodeBy: function(ref) {
		var res = null;
		this.traverseNodes(function(it) {
			if(it.ref == ref) {
				res = it;
			}
		});
		return res;
	}
	,traverseNodes: function(callback) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			this.traverseNodesStep(this.children[i],callback);
		}
	}
	,traverseNodesStep: function(node,callback) {
		callback(node);
		var _g = 0;
		var _g1 = node.children.length;
		while(_g < _g1) {
			var i = _g++;
			this.traverseNodesStep(node.children[i],callback);
		}
	}
	,getGeometryObject: function(ref) {
		var _g = 0;
		var _g1 = this.geometryObjects;
		while(_g < _g1.length) {
			var go = _g1[_g];
			++_g;
			if(go.ref == ref) {
				return go;
			}
		}
		return null;
	}
	,getCameraObject: function(ref) {
		var _g = 0;
		var _g1 = this.cameraObjects;
		while(_g < _g1.length) {
			var co = _g1[_g];
			++_g;
			if(co.ref == ref) {
				return co;
			}
		}
		return null;
	}
	,getLightObject: function(ref) {
		var _g = 0;
		var _g1 = this.lightObjects;
		while(_g < _g1.length) {
			var lo = _g1[_g];
			++_g;
			if(lo.ref == ref) {
				return lo;
			}
		}
		return null;
	}
	,getMaterial: function(ref) {
		var _g = 0;
		var _g1 = this.materials;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.ref == ref) {
				return m;
			}
		}
		return null;
	}
	,readLine: function() {
		var line = this.file.readLine();
		line = StringTools.trim(line);
		var str = line.split(" ");
		return str;
	}
	,readLine2: function() {
		var line = this.file.readLine();
		line = StringTools.trim(line);
		return line;
	}
	,parseMetric: function(s) {
		var metric = new com_g3d_Metric();
		metric.key = s[3].split("\"")[1];
		var val = s[5].split("{")[1].split("}")[0];
		if(s[4] == "{float") {
			metric.value = parseFloat(val);
		} else {
			metric.value = val.split("\"")[1];
		}
		return metric;
	}
	,parseNode: function(s,parent) {
		var n = new com_g3d_Node();
		n.parent = parent;
		n.ref = s[1];
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "BoneNode":
				n.children.push(this.parseBoneNode(s,n));
				break;
			case "CameraNode":
				n.children.push(this.parseCameraNode(s,n));
				break;
			case "GeometryNode":
				n.children.push(this.parseGeometryNode(s,n));
				break;
			case "LightNode":
				n.children.push(this.parseLightNode(s,n));
				break;
			case "Name":
				n.name = this.parseName(s);
				break;
			case "Node":
				n.children.push(this.parseNode(s,n));
				break;
			case "Transform":
				n.transform = this.parseTransform(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return n;
	}
	,parseGeometryNode: function(s,parent) {
		var n = new com_g3d_GeometryNode();
		n.parent = parent;
		n.ref = s[1];
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "BoneNode":
				n.children.push(this.parseBoneNode(s,n));
				break;
			case "CameraNode":
				n.children.push(this.parseCameraNode(s,n));
				break;
			case "GeometryNode":
				n.children.push(this.parseGeometryNode(s,n));
				break;
			case "LightNode":
				n.children.push(this.parseLightNode(s,n));
				break;
			case "MaterialRef":
				n.materialRefs.push(this.parseMaterialRef(s));
				break;
			case "Name":
				n.name = this.parseName(s);
				break;
			case "Node":
				n.children.push(this.parseNode(s,n));
				break;
			case "ObjectRef":
				n.objectRefs.push(this.parseObjectRef(s));
				break;
			case "Transform":
				n.transform = this.parseTransform(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return n;
	}
	,parseLightNode: function(s,parent) {
		var n = new com_g3d_LightNode();
		n.parent = parent;
		n.ref = s[1];
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "BoneNode":
				n.children.push(this.parseBoneNode(s,n));
				break;
			case "CameraNode":
				n.children.push(this.parseCameraNode(s,n));
				break;
			case "GeometryNode":
				n.children.push(this.parseGeometryNode(s,n));
				break;
			case "LightNode":
				n.children.push(this.parseLightNode(s,n));
				break;
			case "Name":
				n.name = this.parseName(s);
				break;
			case "Node":
				n.children.push(this.parseNode(s,n));
				break;
			case "ObjectRef":
				n.objectRefs.push(this.parseObjectRef(s));
				break;
			case "Transform":
				n.transform = this.parseTransform(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return n;
	}
	,parseCameraNode: function(s,parent) {
		var n = new com_g3d_CameraNode();
		n.parent = parent;
		n.ref = s[1];
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "BoneNode":
				n.children.push(this.parseBoneNode(s,n));
				break;
			case "CameraNode":
				n.children.push(this.parseCameraNode(s,n));
				break;
			case "GeometryNode":
				n.children.push(this.parseGeometryNode(s,n));
				break;
			case "LightNode":
				n.children.push(this.parseLightNode(s,n));
				break;
			case "Name":
				n.name = this.parseName(s);
				break;
			case "Node":
				n.children.push(this.parseNode(s,n));
				break;
			case "ObjectRef":
				n.objectRefs.push(this.parseObjectRef(s));
				break;
			case "Transform":
				n.transform = this.parseTransform(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return n;
	}
	,parseBoneNode: function(s,parent) {
		var n = new com_g3d_BoneNode();
		n.parent = parent;
		n.ref = s[1];
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "Animation":
				n.animation = this.parseAnimation(s);
				break;
			case "BoneNode":
				n.children.push(this.parseBoneNode(s,n));
				break;
			case "Name":
				n.name = this.parseName(s);
				break;
			case "Transform":
				n.transform = this.parseTransform(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return n;
	}
	,parseGeometryObject: function(s) {
		var go = new com_g3d_GeometryObject();
		go.ref = s[1].split("\t")[0];
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "Mesh":
				go.mesh = this.parseMesh(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return go;
	}
	,parseMesh: function(s) {
		var m = new com_g3d_Mesh();
		m.primitive = s[3].split("\"")[1];
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "IndexArray":
				m.indexArray = this.parseIndexArray(s);
				break;
			case "Skin":
				m.skin = this.parseSkin(s);
				break;
			case "VertexArray":
				m.vertexArrays.push(this.parseVertexArray(s));
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return m;
	}
	,parseSkin: function(s) {
		var skin = new com_g3d_Skin();
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "BoneCountArray":
				skin.boneCountArray = this.parseBoneCountArray(s);
				break;
			case "BoneIndexArray":
				skin.boneIndexArray = this.parseBoneIndexArray(s);
				break;
			case "BoneWeightArray":
				skin.boneWeightArray = this.parseBoneWeightArray(s);
				break;
			case "Skeleton":
				skin.skeleton = this.parseSkeleton(s);
				break;
			case "Transform":
				skin.transform = this.parseTransform(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return skin;
	}
	,parseSkeleton: function(s) {
		var skel = new com_g3d_Skeleton();
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "BoneRefArray":
				skel.boneRefArray = this.parseBoneRefArray(s);
				break;
			case "Transform":
				skel.transforms = this.parseTransformArray(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return skel;
	}
	,parseBoneRefArray: function(s) {
		var bra = new com_g3d_BoneRefArray();
		this.readLine2();
		this.readLine2();
		this.readLine2();
		var ss = this.readLine2();
		ss = StringTools.replace(ss," ","");
		bra.refs = ss.split(",");
		this.readLine2();
		this.readLine2();
		return bra;
	}
	,parseTransformArray: function(s) {
		var bra = [];
		this.readLine2();
		this.readLine2();
		this.readLine2();
		while(true) {
			var va = new com_g3d_Transform();
			var ss = this.readLine2();
			ss = StringTools.replace(ss,"{","");
			ss = StringTools.replace(ss,"}","");
			s = ss.split(",");
			var offset = s[s.length - 1] == "" ? 1 : 0;
			var _g = 0;
			var _g1 = s.length - offset;
			while(_g < _g1) {
				var i = _g++;
				va.values.push(parseFloat(s[i]));
			}
			bra.push(va);
			if(offset == 0) {
				break;
			}
		}
		this.readLine2();
		this.readLine2();
		return bra;
	}
	,parseBoneCountArray: function(s) {
		var bca = new com_g3d_BoneCountArray();
		this.readLine2();
		this.readLine2();
		this.readLine2();
		while(true) {
			var ss = this.readLine2();
			ss = StringTools.replace(ss," ","");
			s = ss.split(",");
			var offset = s[s.length - 1] == "" ? 1 : 0;
			var _g = 0;
			var _g1 = s.length - offset;
			while(_g < _g1) {
				var i = _g++;
				bca.values.push(Std.parseInt(s[i]));
			}
			if(offset == 0) {
				break;
			}
		}
		this.readLine2();
		this.readLine2();
		return bca;
	}
	,parseBoneIndexArray: function(s) {
		var bia = new com_g3d_BoneIndexArray();
		this.readLine2();
		this.readLine2();
		this.readLine2();
		while(true) {
			var ss = this.readLine2();
			ss = StringTools.replace(ss," ","");
			s = ss.split(",");
			var offset = s[s.length - 1] == "" ? 1 : 0;
			var _g = 0;
			var _g1 = s.length - offset;
			while(_g < _g1) {
				var i = _g++;
				bia.values.push(Std.parseInt(s[i]));
			}
			if(offset == 0) {
				break;
			}
		}
		this.readLine2();
		this.readLine2();
		return bia;
	}
	,parseBoneWeightArray: function(s) {
		var bwa = new com_g3d_BoneWeightArray();
		this.readLine2();
		this.readLine2();
		this.readLine2();
		while(true) {
			var ss = this.readLine2();
			ss = StringTools.replace(ss," ","");
			s = ss.split(",");
			var offset = s[s.length - 1] == "" ? 1 : 0;
			var _g = 0;
			var _g1 = s.length - offset;
			while(_g < _g1) {
				var i = _g++;
				bwa.values.push(parseFloat(s[i]));
			}
			if(offset == 0) {
				break;
			}
		}
		this.readLine2();
		this.readLine2();
		return bwa;
	}
	,parseVertexArray: function(s) {
		var va = new com_g3d_VertexArray();
		va.attrib = s[3].split("\"")[1];
		this.readLine2();
		var ss = this.readLine2();
		va.size = Std.parseInt(ss.split("[")[1].split("]")[0]);
		this.readLine2();
		while(true) {
			ss = this.readLine2();
			ss = StringTools.replace(ss,"{","");
			ss = StringTools.replace(ss,"}","");
			s = ss.split(",");
			var offset = s[s.length - 1] == "" ? 1 : 0;
			var _g = 0;
			var _g1 = s.length - offset;
			while(_g < _g1) {
				var i = _g++;
				va.values.push(parseFloat(s[i]));
			}
			if(offset == 0) {
				break;
			}
		}
		this.readLine2();
		this.readLine2();
		return va;
	}
	,parseIndexArray: function(s) {
		var ia = new com_g3d_IndexArray();
		this.readLine2();
		var ss = this.readLine2();
		ia.size = Std.parseInt(ss.split("[")[1].split("]")[0]);
		this.readLine2();
		while(true) {
			ss = this.readLine2();
			ss = StringTools.replace(ss,"{","");
			ss = StringTools.replace(ss,"}","");
			s = ss.split(",");
			var offset = s[s.length - 1] == "" ? 1 : 0;
			var _g = 0;
			var _g1 = s.length - offset;
			while(_g < _g1) {
				var i = _g++;
				ia.values.push(Std.parseInt(s[i]));
			}
			if(offset == 0) {
				break;
			}
		}
		this.readLine2();
		this.readLine2();
		return ia;
	}
	,parseLightObject: function(s) {
		var lo = new com_g3d_LightObject();
		lo.ref = s[1];
		lo.type = s[4].split("\"")[1];
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "Atten":
				lo.atten = this.parseAtten(s);
				break;
			case "Color":
				lo.color = this.parseColor(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return lo;
	}
	,parseColor: function(s) {
		var col = new com_g3d_Color();
		col.attrib = s[3].split("\"")[1];
		var _g = 5;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var ss = s[i];
			ss = StringTools.replace(ss,"{","");
			ss = StringTools.replace(ss,"}","");
			ss = StringTools.replace(ss,",","");
			col.values.push(parseFloat(ss));
		}
		return col;
	}
	,parseTexture: function(s) {
		var texture = new com_g3d_Texture();
		texture.attrib = s[3].split("\"")[1];
		this.readLine();
		s = this.file.readLine().split("string");
		var ss = s[1];
		ss = StringTools.replace(ss,"{","");
		ss = StringTools.replace(ss,"}","");
		ss = StringTools.replace(ss,"\"","");
		texture.path = ss;
		return texture;
	}
	,parseAtten: function(s) {
		var a = new com_g3d_Atten();
		a.curve = s[3].split("\"")[1];
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "Param":
				a.params.push(this.parseParam(s));
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return a;
	}
	,parseParam: function(s) {
		var p = new com_g3d_Param();
		p.attrib = s[3].split("\"")[1];
		var ss = s[5];
		ss = StringTools.replace(ss,"{","");
		ss = StringTools.replace(ss,"}","");
		p.value = parseFloat(ss);
		return p;
	}
	,parseCameraObject: function(s) {
		var co = new com_g3d_CameraObject();
		co.ref = s[1].split("\t")[0];
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "Param":
				co.params.push(this.parseParam(s));
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return co;
	}
	,parseMaterial: function(s) {
		var mat = new com_g3d_Material();
		mat.ref = s[1];
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "Color":
				mat.colors.push(this.parseColor(s));
				break;
			case "Name":
				mat.name = this.parseName(s);
				break;
			case "Param":
				mat.params.push(this.parseParam(s));
				break;
			case "Texture":
				mat.texture.push(this.parseTexture(s));
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return mat;
	}
	,parseName: function(s) {
		return s[2].split("\"")[1];
	}
	,parseObjectRef: function(s) {
		return HxOverrides.substr(s[2].split("}")[0],1,null);
	}
	,parseMaterialRef: function(s) {
		return HxOverrides.substr(s[5].split("}")[0],1,null);
	}
	,parseTransform: function(s) {
		var t = new com_g3d_Transform();
		if(s.length > 1) {
			t.ref = s[1];
		}
		this.readLine2();
		this.readLine2();
		this.readLine2();
		var ss = HxOverrides.substr(this.readLine2(),1,null);
		ss += this.readLine2();
		ss += this.readLine2();
		var sss = this.readLine2();
		ss += HxOverrides.substr(sss,0,sss.length - 2);
		s = ss.split(",");
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var j = i / 4 | 0;
			var k = i % 4;
			t.values.push(parseFloat(s[j + k * 4]));
		}
		this.readLine2();
		this.readLine2();
		return t;
	}
	,parseAnimation: function(s) {
		var a = new com_g3d_Animation();
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "Track":
				a.track = this.parseTrack(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return a;
	}
	,parseTrack: function(s) {
		var t = new com_g3d_Track();
		t.target = HxOverrides.substr(s[3],0,s[3].length - 2);
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "Time":
				t.time = this.parseTime(s);
				break;
			case "Value":
				t.value = this.parseValue(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return t;
	}
	,parseTime: function(s) {
		var t = new com_g3d_OgexTime();
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "Key":
				t.key = this.parseKey(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return t;
	}
	,parseValue: function(s) {
		var v = new com_g3d_Value();
		_hx_loop1: while(true) {
			s = this.readLine();
			switch(s[0]) {
			case "Key":
				v.key = this.parseKey(s);
				break;
			case "}":
				break _hx_loop1;
			}
		}
		return v;
	}
	,parseKey: function(s) {
		var k = new com_g3d_Key();
		if(s.length > 2) {
			k.values.push(parseFloat(HxOverrides.substr(s[2],1,null)));
			var _g = 3;
			var _g1 = s.length - 2;
			while(_g < _g1) {
				var i = _g++;
				k.values.push(parseFloat(s[i]));
			}
			k.values.push(parseFloat(HxOverrides.substr(s[s.length - 1],0,s[s.length - 1].length - 3)));
		} else {
			this.readLine2();
			this.readLine2();
			this.readLine2();
			while(true) {
				var ss = this.readLine2();
				ss = StringTools.replace(ss,"{","");
				ss = StringTools.replace(ss,"}","");
				s = ss.split(",");
				var offset = s[s.length - 1] == "" ? 1 : 0;
				var _g = 0;
				var _g1 = s.length - offset;
				while(_g < _g1) {
					var i = _g++;
					k.values.push(parseFloat(s[i]));
				}
				if(offset == 0) {
					break;
				}
			}
			this.readLine2();
			this.readLine2();
		}
		return k;
	}
	,__class__: com_g3d_OgexData
});
var com_g3d_Metric = function() {
};
$hxClasses["com.g3d.Metric"] = com_g3d_Metric;
com_g3d_Metric.__name__ = "com.g3d.Metric";
com_g3d_Metric.prototype = {
	key: null
	,value: null
	,__class__: com_g3d_Metric
};
var com_g3d_Node = function() {
	this.objectRefs = [];
	com_g3d_Container.call(this);
};
$hxClasses["com.g3d.Node"] = com_g3d_Node;
com_g3d_Node.__name__ = "com.g3d.Node";
com_g3d_Node.__super__ = com_g3d_Container;
com_g3d_Node.prototype = $extend(com_g3d_Container.prototype,{
	parent: null
	,ref: null
	,objectRefs: null
	,transform: null
	,__class__: com_g3d_Node
});
var com_g3d_GeometryNode = function() {
	this.materialRefs = [];
	com_g3d_Node.call(this);
};
$hxClasses["com.g3d.GeometryNode"] = com_g3d_GeometryNode;
com_g3d_GeometryNode.__name__ = "com.g3d.GeometryNode";
com_g3d_GeometryNode.__super__ = com_g3d_Node;
com_g3d_GeometryNode.prototype = $extend(com_g3d_Node.prototype,{
	materialRefs: null
	,__class__: com_g3d_GeometryNode
});
var com_g3d_LightNode = function() {
	com_g3d_Node.call(this);
};
$hxClasses["com.g3d.LightNode"] = com_g3d_LightNode;
com_g3d_LightNode.__name__ = "com.g3d.LightNode";
com_g3d_LightNode.__super__ = com_g3d_Node;
com_g3d_LightNode.prototype = $extend(com_g3d_Node.prototype,{
	__class__: com_g3d_LightNode
});
var com_g3d_CameraNode = function() {
	com_g3d_Node.call(this);
};
$hxClasses["com.g3d.CameraNode"] = com_g3d_CameraNode;
com_g3d_CameraNode.__name__ = "com.g3d.CameraNode";
com_g3d_CameraNode.__super__ = com_g3d_Node;
com_g3d_CameraNode.prototype = $extend(com_g3d_Node.prototype,{
	__class__: com_g3d_CameraNode
});
var com_g3d_BoneNode = function() {
	com_g3d_Node.call(this);
};
$hxClasses["com.g3d.BoneNode"] = com_g3d_BoneNode;
com_g3d_BoneNode.__name__ = "com.g3d.BoneNode";
com_g3d_BoneNode.__super__ = com_g3d_Node;
com_g3d_BoneNode.prototype = $extend(com_g3d_Node.prototype,{
	animation: null
	,__class__: com_g3d_BoneNode
});
var com_g3d_GeometryObject = function() {
};
$hxClasses["com.g3d.GeometryObject"] = com_g3d_GeometryObject;
com_g3d_GeometryObject.__name__ = "com.g3d.GeometryObject";
com_g3d_GeometryObject.prototype = {
	ref: null
	,mesh: null
	,__class__: com_g3d_GeometryObject
};
var com_g3d_LightObject = function() {
};
$hxClasses["com.g3d.LightObject"] = com_g3d_LightObject;
com_g3d_LightObject.__name__ = "com.g3d.LightObject";
com_g3d_LightObject.prototype = {
	ref: null
	,type: null
	,color: null
	,atten: null
	,__class__: com_g3d_LightObject
};
var com_g3d_CameraObject = function() {
	this.params = [];
};
$hxClasses["com.g3d.CameraObject"] = com_g3d_CameraObject;
com_g3d_CameraObject.__name__ = "com.g3d.CameraObject";
com_g3d_CameraObject.prototype = {
	ref: null
	,params: null
	,__class__: com_g3d_CameraObject
};
var com_g3d_Material = function() {
	this.params = [];
	this.texture = [];
	this.colors = [];
};
$hxClasses["com.g3d.Material"] = com_g3d_Material;
com_g3d_Material.__name__ = "com.g3d.Material";
com_g3d_Material.prototype = {
	ref: null
	,name: null
	,colors: null
	,texture: null
	,params: null
	,__class__: com_g3d_Material
};
var com_g3d_Texture = function() {
	this.path = "";
};
$hxClasses["com.g3d.Texture"] = com_g3d_Texture;
com_g3d_Texture.__name__ = "com.g3d.Texture";
com_g3d_Texture.prototype = {
	attrib: null
	,path: null
	,__class__: com_g3d_Texture
};
var com_g3d_Transform = function() {
	this.values = [];
	this.ref = "";
};
$hxClasses["com.g3d.Transform"] = com_g3d_Transform;
com_g3d_Transform.__name__ = "com.g3d.Transform";
com_g3d_Transform.prototype = {
	ref: null
	,values: null
	,__class__: com_g3d_Transform
};
var com_g3d_Mesh = function() {
	this.vertexArrays = [];
};
$hxClasses["com.g3d.Mesh"] = com_g3d_Mesh;
com_g3d_Mesh.__name__ = "com.g3d.Mesh";
com_g3d_Mesh.prototype = {
	primitive: null
	,vertexArrays: null
	,indexArray: null
	,skin: null
	,getArray: function(attrib) {
		var _g = 0;
		var _g1 = this.vertexArrays;
		while(_g < _g1.length) {
			var va = _g1[_g];
			++_g;
			if(va.attrib == attrib) {
				return va;
			}
		}
		return null;
	}
	,__class__: com_g3d_Mesh
};
var com_g3d_Skin = function() {
};
$hxClasses["com.g3d.Skin"] = com_g3d_Skin;
com_g3d_Skin.__name__ = "com.g3d.Skin";
com_g3d_Skin.prototype = {
	transform: null
	,skeleton: null
	,boneCountArray: null
	,boneIndexArray: null
	,boneWeightArray: null
	,__class__: com_g3d_Skin
};
var com_g3d_Skeleton = function() {
};
$hxClasses["com.g3d.Skeleton"] = com_g3d_Skeleton;
com_g3d_Skeleton.__name__ = "com.g3d.Skeleton";
com_g3d_Skeleton.prototype = {
	boneRefArray: null
	,transforms: null
	,__class__: com_g3d_Skeleton
};
var com_g3d_BoneRefArray = function() {
	this.refs = [];
};
$hxClasses["com.g3d.BoneRefArray"] = com_g3d_BoneRefArray;
com_g3d_BoneRefArray.__name__ = "com.g3d.BoneRefArray";
com_g3d_BoneRefArray.prototype = {
	refs: null
	,__class__: com_g3d_BoneRefArray
};
var com_g3d_BoneCountArray = function() {
	this.values = [];
};
$hxClasses["com.g3d.BoneCountArray"] = com_g3d_BoneCountArray;
com_g3d_BoneCountArray.__name__ = "com.g3d.BoneCountArray";
com_g3d_BoneCountArray.prototype = {
	values: null
	,__class__: com_g3d_BoneCountArray
};
var com_g3d_BoneIndexArray = function() {
	this.values = [];
};
$hxClasses["com.g3d.BoneIndexArray"] = com_g3d_BoneIndexArray;
com_g3d_BoneIndexArray.__name__ = "com.g3d.BoneIndexArray";
com_g3d_BoneIndexArray.prototype = {
	values: null
	,__class__: com_g3d_BoneIndexArray
};
var com_g3d_BoneWeightArray = function() {
	this.values = [];
};
$hxClasses["com.g3d.BoneWeightArray"] = com_g3d_BoneWeightArray;
com_g3d_BoneWeightArray.__name__ = "com.g3d.BoneWeightArray";
com_g3d_BoneWeightArray.prototype = {
	values: null
	,__class__: com_g3d_BoneWeightArray
};
var com_g3d_VertexArray = function() {
	this.values = [];
};
$hxClasses["com.g3d.VertexArray"] = com_g3d_VertexArray;
com_g3d_VertexArray.__name__ = "com.g3d.VertexArray";
com_g3d_VertexArray.prototype = {
	attrib: null
	,size: null
	,values: null
	,__class__: com_g3d_VertexArray
};
var com_g3d_IndexArray = function() {
	this.values = [];
};
$hxClasses["com.g3d.IndexArray"] = com_g3d_IndexArray;
com_g3d_IndexArray.__name__ = "com.g3d.IndexArray";
com_g3d_IndexArray.prototype = {
	size: null
	,values: null
	,__class__: com_g3d_IndexArray
};
var com_g3d_Color = function() {
	this.values = [];
};
$hxClasses["com.g3d.Color"] = com_g3d_Color;
com_g3d_Color.__name__ = "com.g3d.Color";
com_g3d_Color.prototype = {
	attrib: null
	,values: null
	,__class__: com_g3d_Color
};
var com_g3d_Atten = function() {
	this.params = [];
};
$hxClasses["com.g3d.Atten"] = com_g3d_Atten;
com_g3d_Atten.__name__ = "com.g3d.Atten";
com_g3d_Atten.prototype = {
	curve: null
	,params: null
	,__class__: com_g3d_Atten
};
var com_g3d_Param = function() {
};
$hxClasses["com.g3d.Param"] = com_g3d_Param;
com_g3d_Param.__name__ = "com.g3d.Param";
com_g3d_Param.prototype = {
	attrib: null
	,value: null
	,__class__: com_g3d_Param
};
var com_g3d_Animation = function() {
};
$hxClasses["com.g3d.Animation"] = com_g3d_Animation;
com_g3d_Animation.__name__ = "com.g3d.Animation";
com_g3d_Animation.prototype = {
	track: null
	,target: null
	,__class__: com_g3d_Animation
};
var com_g3d_Track = function() {
};
$hxClasses["com.g3d.Track"] = com_g3d_Track;
com_g3d_Track.__name__ = "com.g3d.Track";
com_g3d_Track.prototype = {
	target: null
	,time: null
	,value: null
	,__class__: com_g3d_Track
};
var com_g3d_OgexTime = function() {
};
$hxClasses["com.g3d.OgexTime"] = com_g3d_OgexTime;
com_g3d_OgexTime.__name__ = "com.g3d.OgexTime";
com_g3d_OgexTime.prototype = {
	key: null
	,__class__: com_g3d_OgexTime
};
var com_g3d_Value = function() {
};
$hxClasses["com.g3d.Value"] = com_g3d_Value;
com_g3d_Value.__name__ = "com.g3d.Value";
com_g3d_Value.prototype = {
	key: null
	,__class__: com_g3d_Value
};
var com_g3d_Key = function() {
	this.values = [];
	this.size = 0;
};
$hxClasses["com.g3d.Key"] = com_g3d_Key;
com_g3d_Key.__name__ = "com.g3d.Key";
com_g3d_Key.prototype = {
	size: null
	,values: null
	,__class__: com_g3d_Key
};
var com_gEngine_AnimationData = function() {
	this.hasMipMap = false;
	this.texturesID = -1;
};
$hxClasses["com.gEngine.AnimationData"] = com_gEngine_AnimationData;
com_gEngine_AnimationData.__name__ = "com.gEngine.AnimationData";
com_gEngine_AnimationData.prototype = {
	name: null
	,texturesID: null
	,frames: null
	,labels: null
	,hasMipMap: null
	,clone: function() {
		var cl = new com_gEngine_AnimationData();
		cl.name = this.name;
		cl.hasMipMap = this.hasMipMap;
		cl.texturesID = this.texturesID;
		cl.frames = [];
		var _g = 0;
		var _g1 = this.frames;
		while(_g < _g1.length) {
			var frame = _g1[_g];
			++_g;
			cl.frames.push(frame.clone());
		}
		cl.labels = [];
		var _g = 0;
		var _g1 = this.labels;
		while(_g < _g1.length) {
			var label = _g1[_g];
			++_g;
			cl.labels.push(label.clone());
		}
		return cl;
	}
	,__class__: com_gEngine_AnimationData
};
var com_gEngine_DrawArea = function(minX,minY,maxX,maxY) {
	this.minX = minX;
	this.minY = minY;
	this.maxY = maxY;
	this.maxX = maxX;
};
$hxClasses["com.gEngine.DrawArea"] = com_gEngine_DrawArea;
com_gEngine_DrawArea.__name__ = "com.gEngine.DrawArea";
com_gEngine_DrawArea.prototype = {
	minX: null
	,minY: null
	,maxY: null
	,maxX: null
	,clone: function() {
		return new com_gEngine_DrawArea(this.minX,this.minY,this.maxX,this.maxY);
	}
	,get_x: function() {
		return this.minX;
	}
	,set_x: function(value) {
		var delta = value - this.minX;
		this.minX = value;
		this.maxX += delta;
		return this.minX;
	}
	,get_y: function() {
		return this.minY;
	}
	,set_y: function(value) {
		var delta = value - this.minY;
		this.minY = value;
		this.maxY += delta;
		return this.minY;
	}
	,get_width: function() {
		return this.maxX - this.minX;
	}
	,set_width: function(value) {
		this.maxX = this.minX + value;
		return this.maxX;
	}
	,get_height: function() {
		return this.maxY - this.minY;
	}
	,set_height: function(value) {
		this.maxY = this.minY + value;
		return this.maxY;
	}
	,__class__: com_gEngine_DrawArea
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var com_gEngine_Filter = function(filters,cropScreen) {
	if(cropScreen == null) {
		cropScreen = true;
	}
	this.scaleRenderArea = new com_helpers_MinMax();
	this.alpha = 0;
	this.blue = 0;
	this.green = 0;
	this.red = 0;
	this.cropScreen = cropScreen;
	this.renderPass = [];
	this.drawArea = new com_helpers_MinMax();
	if(filters != null) {
		this.setPasses(filters);
	}
};
$hxClasses["com.gEngine.Filter"] = com_gEngine_Filter;
com_gEngine_Filter.__name__ = "com.gEngine.Filter";
com_gEngine_Filter.prototype = {
	renderPass: null
	,red: null
	,green: null
	,blue: null
	,alpha: null
	,cropScreen: null
	,drawArea: null
	,finishTarget: null
	,workTargetId: null
	,scaleRenderArea: null
	,setPasses: function(filters) {
		var passFilters = [];
		this.renderPass = [];
		var _g = 0;
		while(_g < filters.length) {
			var filter = filters[_g];
			++_g;
			if(((filter) instanceof com_gEngine_shaders_ShRender)) {
				this.renderPass.push(new com_gEngine_shaders_RenderPass(passFilters,true));
				passFilters = [];
				continue;
			}
			if(((filter) instanceof com_gEngine_shaders_ShDontRender)) {
				this.renderPass.push(new com_gEngine_shaders_RenderPass(passFilters,false));
				passFilters = [];
				continue;
			}
			passFilters.push(filter);
		}
		if(passFilters.length != 0) {
			this.renderPass.push(new com_gEngine_shaders_RenderPass(passFilters,true));
		}
		var _g = 0;
		var _g1 = this.renderPass;
		while(_g < _g1.length) {
			var renderPass = _g1[_g];
			++_g;
			var length = renderPass.filters.length;
			if(renderPass.renderAtEnd) {
				--length;
			}
		}
	}
	,filterStart: function(display,paintMode,transform) {
		if(!this.cropScreen) {
			var _this = this.drawArea.min;
			var x = 0;
			var y = 0;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this.x = x;
			_this.y = y;
			var _this = this.drawArea.max;
			var x = paintMode.camera.width;
			var y = paintMode.camera.height;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this.x = x;
			_this.y = y;
		}
		if(this.renderPass.length == 0) {
			return;
		}
		paintMode.render();
		this.finishTarget = com_gEngine_GEngine.get_i().currentRenderTargetId;
		var finshTargetImage = com_gEngine_GEngine.get_i().currentCanvas();
		this.workTargetId = com_gEngine_GEngine.get_i().getRenderTarget(paintMode.camera.width,paintMode.camera.height);
		com_gEngine_GEngine.get_i().endCanvas();
		com_gEngine_GEngine.get_i().setCanvas(this.workTargetId);
		var g4 = com_gEngine_GEngine.get_i().currentCanvas().get_g4();
		var currentWorkingTarget = com_gEngine_GEngine.get_i().currentCanvas();
		com_gEngine_GEngine.get_i().beginCanvas();
		currentWorkingTarget.setDepthStencilFrom(finshTargetImage);
		g4.clear(kha_Color.fromFloats(this.red,this.green,this.blue,this.alpha));
		if(this.cropScreen) {
			var _this = this.drawArea;
			var _this1 = _this.min;
			var x = Infinity;
			var y = Infinity;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this1.x = x;
			_this1.y = y;
			var _this1 = _this.max;
			var x = -Infinity;
			var y = -Infinity;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this1.x = x;
			_this1.y = y;
			_this.minZ = Infinity;
			_this.maxZ = -Infinity;
			_this.isEmpty = true;
			display.getDrawArea(this.drawArea,transform);
			if(kha_Image.renderTargetsInvertedY()) {
				var _this = this.drawArea;
				_this.min.x *= 1;
				_this.min.y *= -1;
				_this.max.x *= 1;
				_this.max.y *= -1;
				if(this.drawArea.min.y > this.drawArea.max.y) {
					var temp = this.drawArea.min.y;
					this.drawArea.min.y = this.drawArea.max.y;
					this.drawArea.max.y = temp;
				}
			}
			var _this = this.drawArea;
			var x = paintMode.camera.width * 0.5;
			var y = paintMode.camera.height * 0.5;
			_this.min.x += x;
			_this.min.y += y;
			_this.max.x += x;
			_this.max.y += y;
			if(paintMode.hasRenderArea()) {
				this.drawArea.intersection(paintMode.getRenderArea());
			}
		}
		if(this.drawArea.isEmpty) {
			com_gEngine_GEngine.get_i().endCanvas();
			com_gEngine_GEngine.get_i().releaseRenderTarget(this.workTargetId);
			com_gEngine_GEngine.get_i().setCanvas(this.finishTarget);
			com_gEngine_GEngine.get_i().beginCanvas();
		}
	}
	,filterEnd: function(paintMode) {
		if(this.drawArea.isEmpty) {
			return;
		}
		paintMode.render();
		com_gEngine_GEngine.get_i().endCanvas();
		var counter = this.renderPass.length;
		var _g = 0;
		var _g1 = this.renderPass;
		while(_g < _g1.length) {
			var renderPass = _g1[_g];
			++_g;
			--counter;
			var filters = renderPass.filters;
			var resolution = 1;
			var length;
			if(renderPass.renderAtEnd) {
				length = filters.length - 1;
			} else {
				length = filters.length;
			}
			var _g2 = 0;
			var _g3 = length;
			while(_g2 < _g3) {
				var i = _g2++;
				var sourceImg = this.workTargetId;
				this.workTargetId = com_gEngine_GEngine.get_i().getRenderTarget(paintMode.camera.width,paintMode.camera.height);
				com_gEngine_GEngine.get_i().setCanvas(this.workTargetId);
				com_gEngine_GEngine.get_i().beginCanvas();
				var filter = filters[i];
				filter.setProjection(paintMode.camera.screenTransform);
				filter.adjustRenderArea(this.drawArea);
				this.renderBuffer(sourceImg,filter,this.drawArea.min.x,this.drawArea.min.y,this.drawArea.width(),this.drawArea.height(),1 / resolution,true,resolution * filter.resolution);
				resolution *= filter.resolution;
				if(filter.releaseTexture()) {
					com_gEngine_GEngine.get_i().releaseRenderTarget(sourceImg);
				}
				com_gEngine_GEngine.get_i().endCanvas();
			}
			if(renderPass.renderAtEnd) {
				com_gEngine_GEngine.get_i().setCanvas(this.finishTarget);
				com_gEngine_GEngine.get_i().beginCanvas();
				var filter1 = filters[filters.length - 1];
				filter1.setProjection(paintMode.camera.screenTransform);
				filter1.adjustRenderArea(this.drawArea);
				var scale = 1 / resolution;
				this.renderBuffer(this.workTargetId,filter1,this.drawArea.min.x,this.drawArea.min.y,this.drawArea.width(),this.drawArea.height(),scale,false);
				if(filter1.releaseTexture() && counter == 0) {
					com_gEngine_GEngine.get_i().releaseRenderTarget(this.workTargetId);
				}
				if(0 != counter) {
					com_gEngine_GEngine.get_i().endCanvas();
				}
			}
		}
	}
	,renderBuffer: function(source,painter,x,y,width,height,sourceScale,clear,outScale) {
		if(outScale == null) {
			outScale = 1;
		}
		painter.textureID = source;
		var tex = com_gEngine_GEngine.get_i().getTexture(source);
		var texWidth = tex.get_realWidth() * sourceScale / com_gEngine_GEngine.get_i().oversample;
		var texHeight = tex.get_realHeight() * sourceScale / com_gEngine_GEngine.get_i().oversample;
		painter.write(x * outScale);
		painter.write(y * outScale);
		painter.write(0);
		painter.write(x / texWidth);
		painter.write(y / texHeight);
		var x1 = x + width;
		painter.write(x1 * outScale);
		painter.write(y * outScale);
		painter.write(0);
		painter.write(x1 / texWidth);
		painter.write(y / texHeight);
		var y1 = y + height;
		painter.write(x * outScale);
		painter.write(y1 * outScale);
		painter.write(0);
		painter.write(x / texWidth);
		painter.write(y1 / texHeight);
		var x1 = x + width;
		var y1 = y + height;
		painter.write(x1 * outScale);
		painter.write(y1 * outScale);
		painter.write(0);
		painter.write(x1 / texWidth);
		painter.write(y1 / texHeight);
		painter.render(clear);
	}
	,writeVertex: function(painter,x,y,z,sWidth,sHeight,resolution) {
		painter.write(x * resolution);
		painter.write(y * resolution);
		painter.write(z);
		painter.write(x / sWidth);
		painter.write(y / sHeight);
	}
	,__class__: com_gEngine_Filter
};
var com_gEngine_FontData = function(fontSize) {
	this.fontSize = 0;
	com_gEngine_AnimationData.call(this);
	this.fontSize = fontSize;
};
$hxClasses["com.gEngine.FontData"] = com_gEngine_FontData;
com_gEngine_FontData.__name__ = "com.gEngine.FontData";
com_gEngine_FontData.__super__ = com_gEngine_AnimationData;
com_gEngine_FontData.prototype = $extend(com_gEngine_AnimationData.prototype,{
	fontSize: null
	,__class__: com_gEngine_FontData
});
var com_gEngine_Frame = function() {
};
$hxClasses["com.gEngine.Frame"] = com_gEngine_Frame;
com_gEngine_Frame.__name__ = "com.gEngine.Frame";
com_gEngine_Frame.copyData = function(from,to) {
	var _g = 0;
	while(_g < from.length) {
		var data = from[_g];
		++_g;
		to.push(data);
	}
};
com_gEngine_Frame.prototype = {
	vertexs: null
	,UVs: null
	,drawArea: null
	,clone: function() {
		var cl = new com_gEngine_Frame();
		cl.vertexs = [];
		cl.UVs = [];
		cl.drawArea = this.drawArea.clone();
		var from = this.vertexs;
		var to = cl.vertexs;
		var _g = 0;
		while(_g < from.length) {
			var data = from[_g];
			++_g;
			to.push(data);
		}
		var from = this.UVs;
		var to = cl.UVs;
		var _g = 0;
		while(_g < from.length) {
			var data = from[_g];
			++_g;
			to.push(data);
		}
		return cl;
	}
	,__class__: com_gEngine_Frame
};
var com_gEngine_GEngine = function(oversample,antiAlias) {
	this.currentCanvasActive = false;
	this.scaleHeigth = 1;
	this.scaleWidth = 1;
	this.antiAliasing = 0;
	this.identity3x3 = new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1);
	this.fps = 0;
	this.previousTime = 0.0;
	this.elapsedTime = 0.0;
	this.totalFrames = 0;
	this.deltaTime = 0.0;
	this.currentRenderTargetId = -1;
	this.oversample = 1;
	this.clearColor = kha_Color.fromFloats(0,0,0,1);
	this.antiAliasing = antiAlias;
	this.oversample = oversample;
	kha_Window.get(0).notifyOnResize($bind(this,this.resizeInput));
	com_gEngine_PainterGarbage.init();
	this.renderTargetPool = new com_gEngine_helpers_RenderTargetPool();
	this.textures = [];
	this.createPainters();
	haxe_Log.trace(kha_System.windowWidth() + "x" + kha_System.windowHeight(),{ fileName : "com/gEngine/GEngine.hx", lineNumber : 85, className : "com.gEngine.GEngine", methodName : "new"});
	this.calculateModelViewMatrix(kha_System.windowWidth(),kha_System.windowHeight());
	var recTexture = kha_Image.createRenderTarget(1,1);
	recTexture.get_g2().begin(true,-1);
	recTexture.get_g2().end();
	var id = this.textures.push(recTexture) - 1;
	com_gEngine_helpers_RectangleDisplay.init(id);
};
$hxClasses["com.gEngine.GEngine"] = com_gEngine_GEngine;
com_gEngine_GEngine.__name__ = "com.gEngine.GEngine";
com_gEngine_GEngine.__properties__ = {get_i:"get_i"};
com_gEngine_GEngine.get_i = function() {
	return com_gEngine_GEngine.i;
};
com_gEngine_GEngine.init = function(virtualWidth,virtualHeight,oversample,antiAlias) {
	com_gEngine_GEngine.virtualWidth = virtualWidth;
	com_gEngine_GEngine.virtualHeight = virtualHeight;
	com_gEngine_GEngine.i = new com_gEngine_GEngine(oversample,antiAlias);
	kha_Assets.loadFont("mainfont",com_gEngine_GEngine.setFont,null,{ fileName : "com/gEngine/GEngine.hx", lineNumber : 141, className : "com.gEngine.GEngine", methodName : "init"});
};
com_gEngine_GEngine.setFont = function(aFont) {
	com_gEngine_GEngine.get_i().font = aFont;
	com_gEngine_GEngine.get_i().fontLoaded = true;
};
com_gEngine_GEngine.prototype = {
	width: null
	,height: null
	,realWidth: null
	,realHeight: null
	,textures: null
	,stage: null
	,modelViewMatrix: null
	,painter: null
	,oversample: null
	,renderTargetPool: null
	,currentRenderTargetId: null
	,deltaTime: null
	,totalFrames: null
	,elapsedTime: null
	,previousTime: null
	,fps: null
	,font: null
	,fontLoaded: null
	,identity3x3: null
	,getSimplePainter: function(blend) {
		return this.simplePainters[blend];
	}
	,getSimplePainters: function() {
		return this.simplePainters;
	}
	,getAlphaPainter: function(blend) {
		return this.alphaPainters[blend];
	}
	,getAlphaPainters: function() {
		return this.alphaPainters;
	}
	,getColorTransformPainter: function(blend) {
		return this.colorPainters[blend];
	}
	,getColorTransformPainters: function() {
		return this.colorPainters;
	}
	,calculateModelViewMatrix: function(targetWidth,targetHeight) {
		if(this.width == targetWidth && this.height == targetHeight) {
			return;
		}
		this.width = targetWidth * this.oversample | 0;
		this.height = targetHeight * this.oversample | 0;
		var right = com_gEngine_GEngine.virtualWidth;
		var bottom = com_gEngine_GEngine.virtualHeight;
		var tx = -right / right;
		var ty = -bottom / (0 - bottom);
		var tz = -1.;
		this.modelViewMatrix = new kha_math_FastMatrix4(2 / right,0,0,tx,0,2.0 / (0 - bottom),0,ty,0,0,-0.0004,tz,0,0,0,1);
		if(kha_Image.renderTargetsInvertedY()) {
			var _this = this.modelViewMatrix;
			var _this__00 = 1;
			var _this__10 = 0;
			var _this__20 = 0;
			var _this__30 = 0;
			var _this__01 = 0;
			var _this__11 = -1;
			var _this__21 = 0;
			var _this__31 = 0;
			var _this__02 = 0;
			var _this__12 = 0;
			var _this__22 = 1;
			var _this__32 = 0;
			var _this__03 = 0;
			var _this__13 = 0;
			var _this__23 = 0;
			var _this__33 = 1;
			var m = this.modelViewMatrix;
			var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02 + _this__30 * m._03;
			var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12 + _this__30 * m._13;
			var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22 + _this__30 * m._23;
			var m__30 = _this__00 * m._30 + _this__10 * m._31 + _this__20 * m._32 + _this__30 * m._33;
			var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02 + _this__31 * m._03;
			var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12 + _this__31 * m._13;
			var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22 + _this__31 * m._23;
			var m__31 = _this__01 * m._30 + _this__11 * m._31 + _this__21 * m._32 + _this__31 * m._33;
			var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02 + _this__32 * m._03;
			var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12 + _this__32 * m._13;
			var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22 + _this__32 * m._23;
			var m__32 = _this__02 * m._30 + _this__12 * m._31 + _this__22 * m._32 + _this__32 * m._33;
			var m__03 = _this__03 * m._00 + _this__13 * m._01 + _this__23 * m._02 + _this__33 * m._03;
			var m__13 = _this__03 * m._10 + _this__13 * m._11 + _this__23 * m._12 + _this__33 * m._13;
			var m__23 = _this__03 * m._20 + _this__13 * m._21 + _this__23 * m._22 + _this__33 * m._23;
			var m__33 = _this__03 * m._30 + _this__13 * m._31 + _this__23 * m._32 + _this__33 * m._33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		}
	}
	,createDefaultPainters: function() {
		this.stage = new com_gEngine_display_Stage();
		this.painter = new com_gEngine_painters_Painter(false,com_gEngine_display_Blend.blendNone());
		this.painter.setProjection(new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1));
		this.painter.filter = 1;
	}
	,resizeInput: function(availWidth,availHeight) {
		if(availWidth == 0 || availWidth == 0) {
			return;
		}
		var _this = com_framework_utils_Input.i.screenScale;
		var x = com_gEngine_GEngine.virtualWidth / availWidth;
		var y = com_gEngine_GEngine.virtualHeight / availHeight;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
	}
	,getNewRectangle: function(width,height) {
		var rectangle = new com_gEngine_helpers_RectangleDisplay();
		rectangle.scaleX = width;
		rectangle.scaleY = height;
		return rectangle;
	}
	,addTexture: function(texture) {
		return this.textures.push(texture) - 1;
	}
	,frameBuffer: null
	,renderCustomBuffer: null
	,customBuffer: null
	,antiAliasing: null
	,scaleWidth: null
	,scaleHeigth: null
	,clearColor: null
	,currentCanvasActive: null
	,simplePainters: null
	,alphaPainters: null
	,colorPainters: null
	,setFrameBufferAsCanvas: function() {
		this.renderCustomBuffer = false;
	}
	,setCanvas: function(id) {
		this.currentRenderTargetId = id;
		if(this.currentRenderTargetId != -1) {
			this.renderCustomBuffer = true;
			this.customBuffer = this.textures[id];
		} else {
			this.setFrameBufferAsCanvas();
		}
	}
	,setCanvasFromImage: function(image) {
		this.renderCustomBuffer = true;
		this.customBuffer = image;
	}
	,createPainters: function() {
		var blends = [com_gEngine_display_Blend.blendDefault(),com_gEngine_display_Blend.blendMultipass(),com_gEngine_display_Blend.blendAdd(),com_gEngine_display_Blend.blendMultiply(),com_gEngine_display_Blend.blendScreen()];
		this.simplePainters = [];
		this.alphaPainters = [];
		this.colorPainters = [];
		var _g = 0;
		while(_g < blends.length) {
			var blend = blends[_g];
			++_g;
			this.simplePainters.push(new com_gEngine_painters_Painter(false,blend));
			this.alphaPainters.push(new com_gEngine_painters_PainterAlpha(false,blend));
			this.colorPainters.push(new com_gEngine_painters_PainterColorTransform(false,blend));
		}
	}
	,endCanvas: function() {
		if(!this.currentCanvasActive) {
			haxe_Log.trace("Warning :start buffer before you end it",{ fileName : "com/gEngine/GEngine.hx", lineNumber : 230, className : "com.gEngine.GEngine", methodName : "endCanvas"});
		}
		if(this.currentCanvasActive) {
			this.currentCanvas().get_g4().end();
			this.currentCanvasActive = false;
		}
	}
	,beginCanvas: function() {
		if(this.currentCanvasActive) {
			haxe_Log.trace("Warning :end buffer before you start ",{ fileName : "com/gEngine/GEngine.hx", lineNumber : 242, className : "com.gEngine.GEngine", methodName : "beginCanvas"});
		}
		if(!this.currentCanvasActive) {
			this.currentCanvas().get_g4().begin();
			this.currentCanvasActive = true;
		}
	}
	,getStage: function() {
		return this.stage;
	}
	,currentCanvasId: function() {
		return this.currentRenderTargetId;
	}
	,currentCanvas: function() {
		if(this.renderCustomBuffer) {
			return this.customBuffer;
		}
		return this.frameBuffer;
	}
	,getMatrix: function() {
		return this.modelViewMatrix;
	}
	,renderToFrameBuffer: function(source,painter,x,y,width,height,sourceScale,clear,outScale) {
		if(outScale == null) {
			outScale = 1;
		}
		painter.textureID = source;
		painter.setProjection(this.getMatrix());
		var text = this.getTexture(source);
		painter.write(x * outScale);
		painter.write(y * outScale);
		painter.write(0);
		painter.write(0);
		painter.write(0);
		var x1 = (x + width) * this.scaleWidth;
		var y1 = y * this.scaleHeigth;
		var sWidth = width * this.oversample / text.get_realWidth();
		painter.write(x1 * outScale);
		painter.write(y1 * outScale);
		painter.write(0);
		painter.write(sWidth);
		painter.write(0);
		var x1 = x * this.scaleWidth;
		var y1 = (y + height) * this.scaleHeigth;
		var sHeight = height * this.oversample / text.get_realHeight();
		painter.write(x1 * outScale);
		painter.write(y1 * outScale);
		painter.write(0);
		painter.write(0);
		painter.write(sHeight);
		var x1 = (x + width) * this.scaleWidth;
		var y1 = (y + height) * this.scaleHeigth;
		var sWidth = width * this.oversample / text.get_realWidth();
		var sHeight = height * this.oversample / text.get_realHeight();
		painter.write(x1 * outScale);
		painter.write(y1 * outScale);
		painter.write(0);
		painter.write(sWidth);
		painter.write(sHeight);
		painter.render(clear);
	}
	,writeVertexFull: function(painter,x,y,z,sWidth,sHeight,resolution) {
		painter.write(x * resolution);
		painter.write(y * resolution);
		painter.write(z);
		painter.write(sWidth);
		painter.write(sHeight);
	}
	,getTexture: function(id) {
		return this.textures[id];
	}
	,update: function() {
		this.stage.update();
	}
	,draw: function(frameBuffer,clear,needRefresh) {
		if(clear == null) {
			clear = true;
		}
		if(frameBuffer.get_width() * this.oversample != this.width || frameBuffer.get_height() * this.oversample != this.height) {
			this.resizeInput(frameBuffer.get_width(),frameBuffer.get_height());
		}
		this.calculateFPS();
		this.frameBuffer = frameBuffer;
		var g = frameBuffer.get_g4();
		g.begin();
		if(clear) {
			g.clear(this.clearColor,1);
		}
		g.end();
		this.stage.render(needRefresh);
		this.drawDebugInfo(frameBuffer);
	}
	,calculateFPS: function() {
		var currentTime = kha_Scheduler.realTime();
		this.deltaTime = currentTime - this.previousTime;
		this.elapsedTime += this.deltaTime;
		if(this.elapsedTime >= 1.0) {
			this.fps = this.totalFrames;
			this.totalFrames = 0;
			this.elapsedTime = 0;
		}
		this.totalFrames++;
		this.previousTime = currentTime;
	}
	,drawDebugInfo: function(frameBuffer) {
		if(this.fontLoaded) {
			var g2 = frameBuffer.get_g2();
			g2.begin(false);
			var transformation = this.identity3x3;
			g2.setTransformation(transformation);
			var _this = g2.transformations[g2.transformationIndex];
			_this._00 = transformation._00;
			_this._10 = transformation._10;
			_this._20 = transformation._20;
			_this._01 = transformation._01;
			_this._11 = transformation._11;
			_this._21 = transformation._21;
			_this._02 = transformation._02;
			_this._12 = transformation._12;
			_this._22 = transformation._22;
			g2.set_font(this.font);
			g2.set_fontSize(16);
			g2.set_color(-16777216);
			g2.fillRect(0,0,250,20);
			g2.set_color(-1);
			g2.drawString("drawCount: " + com_gEngine_GEngine.drawCount + "         fps: " + this.fps + " " + com_gEngine_GEngine.extraInfo,10,2);
			g2.end();
		}
		com_gEngine_GEngine.drawCount = 0;
	}
	,addChild: function(draw) {
		this.stage.addChild(draw);
	}
	,getRenderTarget: function(width,height) {
		var id = this.renderTargetPool.getFreeImageId(width,height);
		if(id == -1) {
			var target = kha_Image.createRenderTarget(width * this.oversample | 0,height * this.oversample | 0,null,1,this.antiAliasing);
			id = this.textures.push(target) - 1;
			this.renderTargetPool.addRenderTarget(id,width,height);
		}
		return id;
	}
	,releaseRenderTarget: function(id) {
		this.renderTargetPool.release(id);
	}
	,adjustRenderTargets: function() {
		var _g = 0;
		var _g1 = this.renderTargetPool.targets;
		while(_g < _g1.length) {
			var proxy = _g1[_g];
			++_g;
			this.textures[proxy.textureId].unload();
			this.textures[proxy.textureId] = kha_Image.createRenderTarget(this.width,this.height,null,1,this.antiAliasing);
		}
	}
	,unload: function() {
		var end = this.textures.length;
		var _g = 0;
		var _g1 = this.renderTargetPool.targets;
		while(_g < _g1.length) {
			var proxy = _g1[_g];
			++_g;
			this.textures[proxy.textureId].unload();
		}
		com_gEngine_PainterGarbage.get_i().clear();
		this.renderTargetPool.clear();
		this.stage = new com_gEngine_display_Stage();
	}
	,swapBuffer: function(a,b) {
		var temp = this.textures[a];
		this.textures[a] = this.textures[b];
		this.textures[b] = temp;
	}
	,__class__: com_gEngine_GEngine
};
var com_gEngine_Label = function(text,frame) {
	this.text = text;
	this.frame = frame;
};
$hxClasses["com.gEngine.Label"] = com_gEngine_Label;
com_gEngine_Label.__name__ = "com.gEngine.Label";
com_gEngine_Label.prototype = {
	text: null
	,frame: null
	,clone: function() {
		var cl = new com_gEngine_Label(this.text,this.frame);
		return cl;
	}
	,__class__: com_gEngine_Label
};
var com_gEngine_PainterGarbage = function() {
	this.painters = [];
};
$hxClasses["com.gEngine.PainterGarbage"] = com_gEngine_PainterGarbage;
com_gEngine_PainterGarbage.__name__ = "com.gEngine.PainterGarbage";
com_gEngine_PainterGarbage.__properties__ = {get_i:"get_i"};
com_gEngine_PainterGarbage.get_i = function() {
	return com_gEngine_PainterGarbage.i;
};
com_gEngine_PainterGarbage.init = function() {
	com_gEngine_PainterGarbage.i = new com_gEngine_PainterGarbage();
};
com_gEngine_PainterGarbage.prototype = {
	painters: null
	,add: function(painter) {
		this.painters.push(painter);
	}
	,clear: function() {
	}
	,__class__: com_gEngine_PainterGarbage
};
var com_gEngine_display_Blend = function() {
	this.blendOperation = 0;
};
$hxClasses["com.gEngine.display.Blend"] = com_gEngine_display_Blend;
com_gEngine_display_Blend.__name__ = "com.gEngine.display.Blend";
com_gEngine_display_Blend.blendAdd = function() {
	var blend = new com_gEngine_display_Blend();
	blend.blendSource = 1;
	blend.blendDestination = 1;
	blend.alphaBlendSource = 1;
	blend.alphaBlendDestination = 1;
	return blend;
};
com_gEngine_display_Blend.blendFastMultiply = function() {
	var blend = new com_gEngine_display_Blend();
	blend.blendSource = 2;
	blend.blendDestination = 7;
	blend.alphaBlendSource = 2;
	blend.alphaBlendDestination = 7;
	return blend;
};
com_gEngine_display_Blend.blendMultiply = function() {
	var blend = new com_gEngine_display_Blend();
	blend.blendSource = 8;
	blend.blendDestination = 5;
	blend.alphaBlendSource = 4;
	blend.alphaBlendDestination = 5;
	return blend;
};
com_gEngine_display_Blend.blendScreen = function() {
	var blend = new com_gEngine_display_Blend();
	blend.blendSource = 1;
	blend.blendDestination = 9;
	blend.alphaBlendSource = 1;
	blend.alphaBlendDestination = 1;
	return blend;
};
com_gEngine_display_Blend.blendMultipass = function() {
	var blend = new com_gEngine_display_Blend();
	blend.blendSource = 1;
	blend.blendDestination = 2;
	blend.alphaBlendSource = 1;
	blend.alphaBlendDestination = 2;
	return blend;
};
com_gEngine_display_Blend.blendDefault = function() {
	var blend = new com_gEngine_display_Blend();
	blend.blendSource = 1;
	blend.blendDestination = 5;
	blend.alphaBlendSource = 1;
	blend.alphaBlendDestination = 5;
	return blend;
};
com_gEngine_display_Blend.blendNone = function() {
	var blend = new com_gEngine_display_Blend();
	blend.blendSource = 1;
	blend.blendDestination = 2;
	blend.alphaBlendSource = 1;
	blend.alphaBlendDestination = 2;
	return blend;
};
com_gEngine_display_Blend.prototype = {
	blendOperation: null
	,blendSource: null
	,blendDestination: null
	,alphaBlendSource: null
	,alphaBlendDestination: null
	,__class__: com_gEngine_display_Blend
};
var com_gEngine_display_Camera = function(width,height) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	this.maxSeparationFromTarget = 10000;
	this.deadOffset = new com_helpers_Point();
	this.deadZone = new com_helpers_Rectangle();
	this.projectionIsOrthogonal = false;
	this.camera2d = true;
	this.blend = 0;
	this.textureFilter = 1;
	this.shakeY = 0;
	this.shakeX = 0;
	this.pixelSnap = false;
	this.postProcess = null;
	this.renderTarget = -1;
	this.finalY = 0;
	this.finalX = 0;
	this.clearColor = kha_Color.fromFloats(0,0,0,0);
	this.offsetEye = new kha_math_FastVector3();
	this.z = 0;
	this.y = 0;
	this.x = 0;
	this.lastShake = 0;
	this.shakeInterval = 0;
	this.time = 0;
	this.angle = 1;
	this.scale = 1;
	if(width < 0 || height < 0) {
		width = com_gEngine_GEngine.virtualWidth;
		height = com_gEngine_GEngine.virtualHeight;
	}
	this.eye = new kha_math_FastVector3(0,0,646.1168);
	this.at = new kha_math_FastVector3(0,0,0);
	this.up = new kha_math_FastVector3(0,1,0);
	this.view = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.targetPos = new com_helpers_FastPoint(width * 0.5,height * 0.5);
	this.setDrawArea(0,0,width,height);
	this.finalX = 0;
	this.finalY = 0;
	this.width = width;
	this.height = height;
	this.renderTarget = com_gEngine_GEngine.get_i().getRenderTarget(width,height);
	var texture = com_gEngine_GEngine.get_i().getTexture(this.renderTarget);
	texture.get_g2().begin(true,-16777216);
	texture.get_g2().end();
	this.setOrthogonalProjection();
	this.projection = this.orthogonal;
	this.projectionIsOrthogonal = true;
	this.screenTransform = this.createScreenTransform();
	this.perlin = new com_framework_utils_Perlin(1);
	this.update(0);
};
$hxClasses["com.gEngine.display.Camera"] = com_gEngine_display_Camera;
com_gEngine_display_Camera.__name__ = "com.gEngine.display.Camera";
com_gEngine_display_Camera.prototype = {
	targetPos: null
	,min: null
	,max: null
	,width: null
	,height: null
	,scale: null
	,angle: null
	,time: null
	,randomSeed: null
	,maxShakeX: null
	,maxShakeY: null
	,shakeRotation: null
	,totalTime: null
	,shakeInterval: null
	,lastShake: null
	,x: null
	,y: null
	,z: null
	,offsetEye: null
	,autoCrop: null
	,clearColor: null
	,projection: null
	,orthogonal: null
	,screenTransform: null
	,finalX: null
	,finalY: null
	,eye: null
	,at: null
	,up: null
	,view: null
	,onPreRender: null
	,renderTarget: null
	,postProcess: null
	,pixelSnap: null
	,shakeX: null
	,shakeY: null
	,perlin: null
	,drawArea: null
	,textureFilter: null
	,blend: null
	,world: null
	,camera2d: null
	,projectionIsOrthogonal: null
	,deadZone: null
	,deadOffset: null
	,updateView: function() {
		var _this = this.view;
		var eye = this.eye;
		var at = this.at;
		var up = this.up;
		var x = at.x - eye.x;
		var y = at.y - eye.y;
		var z = at.z - eye.z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var x = _this_x;
		var y = _this_y;
		var z = _this_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var zaxis_x = x;
		var zaxis_y = y;
		var zaxis_z = z;
		var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
		if(currentLength != 0) {
			var mul = 1 / currentLength;
			zaxis_x *= mul;
			zaxis_y *= mul;
			zaxis_z *= mul;
		}
		var _x = zaxis_y * up.z - zaxis_z * up.y;
		var _y = zaxis_z * up.x - zaxis_x * up.z;
		var _z = zaxis_x * up.y - zaxis_y * up.x;
		var x = _x;
		var y = _y;
		var z = _z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var _this_x = x;
		var _this_y = y;
		var _this_z = z;
		var x = _this_x;
		var y = _this_y;
		var z = _this_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var xaxis_x = x;
		var xaxis_y = y;
		var xaxis_z = z;
		var currentLength = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
		if(currentLength != 0) {
			var mul = 1 / currentLength;
			xaxis_x *= mul;
			xaxis_y *= mul;
			xaxis_z *= mul;
		}
		var _x = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
		var _y = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
		var _z = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
		var x = _x;
		var y = _y;
		var z = _z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var yaxis_x = x;
		var yaxis_y = y;
		var yaxis_z = z;
		var m__00 = xaxis_x;
		var m__10 = xaxis_y;
		var m__20 = xaxis_z;
		var m__30 = -(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z);
		var m__01 = yaxis_x;
		var m__11 = yaxis_y;
		var m__21 = yaxis_z;
		var m__31 = -(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z);
		var m__02 = -zaxis_x;
		var m__12 = -zaxis_y;
		var m__22 = -zaxis_z;
		var m__32 = zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z;
		var m__03 = 0;
		var m__13 = 0;
		var m__23 = 0;
		var m__33 = 1;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._30 = m__30;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._31 = m__31;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
		_this._32 = m__32;
		_this._03 = m__03;
		_this._13 = m__13;
		_this._23 = m__23;
		_this._33 = m__33;
		if(this.projectionIsOrthogonal) {
			var _this = this.view;
			var _this__00 = this.scale;
			var _this__10 = 0;
			var _this__20 = 0;
			var _this__30 = 0;
			var _this__01 = 0;
			var _this__11 = this.scale;
			var _this__21 = 0;
			var _this__31 = 0;
			var _this__02 = 0;
			var _this__12 = 0;
			var _this__22 = 1;
			var _this__32 = 0;
			var _this__03 = 0;
			var _this__13 = 0;
			var _this__23 = 0;
			var _this__33 = 1;
			var m = this.view;
			var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02 + _this__30 * m._03;
			var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12 + _this__30 * m._13;
			var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22 + _this__30 * m._23;
			var m__30 = _this__00 * m._30 + _this__10 * m._31 + _this__20 * m._32 + _this__30 * m._33;
			var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02 + _this__31 * m._03;
			var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12 + _this__31 * m._13;
			var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22 + _this__31 * m._23;
			var m__31 = _this__01 * m._30 + _this__11 * m._31 + _this__21 * m._32 + _this__31 * m._33;
			var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02 + _this__32 * m._03;
			var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12 + _this__32 * m._13;
			var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22 + _this__32 * m._23;
			var m__32 = _this__02 * m._30 + _this__12 * m._31 + _this__22 * m._32 + _this__32 * m._33;
			var m__03 = _this__03 * m._00 + _this__13 * m._01 + _this__23 * m._02 + _this__33 * m._03;
			var m__13 = _this__03 * m._10 + _this__13 * m._11 + _this__23 * m._12 + _this__33 * m._13;
			var m__23 = _this__03 * m._20 + _this__13 * m._21 + _this__23 * m._22 + _this__33 * m._23;
			var m__33 = _this__03 * m._30 + _this__13 * m._31 + _this__23 * m._32 + _this__33 * m._33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		}
		if(this.pixelSnap) {
			this.view._30 = this.view._30 | 0;
			this.view._31 = this.view._31 | 0;
		}
	}
	,setArea: function(x,y,width,height) {
		this.setDrawArea(x,y,width,height);
		this.finalX = x;
		this.finalY = y;
		this.width = width;
		this.height = height;
		com_gEngine_GEngine.get_i().releaseRenderTarget(this.renderTarget);
		this.setOrthogonalProjection();
		this.screenTransform = this.createScreenTransform();
		this.renderTarget = com_gEngine_GEngine.get_i().getRenderTarget(width,height);
	}
	,setOrthogonalProjection: function() {
		this.orthogonal = this.createOrthogonalProjection();
	}
	,createOrthogonalProjection: function() {
		var left = -this.width * 0.5;
		var right = this.width * 0.5;
		var bottom = this.height * 0.5;
		var top = -this.height * 0.5;
		var tx = -(right + left) / (right - left);
		var ty = -(top + bottom) / (top - bottom);
		var tz = 0.;
		return new kha_math_FastMatrix4(2 / (right - left),0,0,tx,0,2.0 / (top - bottom),0,ty,0,0,-0.0002,tz,0,0,0,1);
	}
	,createScreenTransform: function() {
		if(kha_Image.renderTargetsInvertedY()) {
			var _this__00 = 1;
			var _this__10 = 0;
			var _this__20 = 0;
			var _this__30 = 0;
			var _this__01 = 0;
			var _this__11 = -1;
			var _this__21 = 0;
			var _this__31 = 0;
			var _this__02 = 0;
			var _this__12 = 0;
			var _this__22 = 1;
			var _this__32 = 0;
			var _this__03 = 0;
			var _this__13 = 0;
			var _this__23 = 0;
			var _this__33 = 1;
			var right = this.width;
			var bottom = this.height;
			var tx = -right / right;
			var ty = -bottom / (0 - bottom);
			var tz = -1.;
			var m__00 = 2 / right;
			var m__10 = 0;
			var m__20 = 0;
			var m__30 = tx;
			var m__01 = 0;
			var m__11 = 2.0 / (0 - bottom);
			var m__21 = 0;
			var m__31 = ty;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = -0.0004;
			var m__32 = tz;
			var m__03 = 0;
			var m__13 = 0;
			var m__23 = 0;
			var m__33 = 1;
			return new kha_math_FastMatrix4(_this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02 + _this__30 * m__03,_this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12 + _this__30 * m__13,_this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22 + _this__30 * m__23,_this__00 * m__30 + _this__10 * m__31 + _this__20 * m__32 + _this__30 * m__33,_this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02 + _this__31 * m__03,_this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12 + _this__31 * m__13,_this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22 + _this__31 * m__23,_this__01 * m__30 + _this__11 * m__31 + _this__21 * m__32 + _this__31 * m__33,_this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02 + _this__32 * m__03,_this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12 + _this__32 * m__13,_this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22 + _this__32 * m__23,_this__02 * m__30 + _this__12 * m__31 + _this__22 * m__32 + _this__32 * m__33,_this__03 * m__00 + _this__13 * m__01 + _this__23 * m__02 + _this__33 * m__03,_this__03 * m__10 + _this__13 * m__11 + _this__23 * m__12 + _this__33 * m__13,_this__03 * m__20 + _this__13 * m__21 + _this__23 * m__22 + _this__33 * m__23,_this__03 * m__30 + _this__13 * m__31 + _this__23 * m__32 + _this__33 * m__33);
		} else {
			var right = this.width;
			var bottom = this.height;
			var tx = -right / right;
			var ty = -bottom / (0 - bottom);
			var tz = -1.;
			return new kha_math_FastMatrix4(2 / right,0,0,tx,0,2.0 / (0 - bottom),0,ty,0,0,-0.0004,tz,0,0,0,1);
		}
	}
	,setProjection: function(mat) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = 0;
		var _this__30 = 0;
		var _this__01 = 0;
		var _this__11 = -1;
		var _this__21 = 0;
		var _this__31 = 0;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var _this__32 = 0;
		var _this__03 = 0;
		var _this__13 = 0;
		var _this__23 = 0;
		var _this__33 = 1;
		this.projection = new kha_math_FastMatrix4(_this__00 * mat._00 + _this__10 * mat._01 + _this__20 * mat._02 + _this__30 * mat._03,_this__00 * mat._10 + _this__10 * mat._11 + _this__20 * mat._12 + _this__30 * mat._13,_this__00 * mat._20 + _this__10 * mat._21 + _this__20 * mat._22 + _this__30 * mat._23,_this__00 * mat._30 + _this__10 * mat._31 + _this__20 * mat._32 + _this__30 * mat._33,_this__01 * mat._00 + _this__11 * mat._01 + _this__21 * mat._02 + _this__31 * mat._03,_this__01 * mat._10 + _this__11 * mat._11 + _this__21 * mat._12 + _this__31 * mat._13,_this__01 * mat._20 + _this__11 * mat._21 + _this__21 * mat._22 + _this__31 * mat._23,_this__01 * mat._30 + _this__11 * mat._31 + _this__21 * mat._32 + _this__31 * mat._33,_this__02 * mat._00 + _this__12 * mat._01 + _this__22 * mat._02 + _this__32 * mat._03,_this__02 * mat._10 + _this__12 * mat._11 + _this__22 * mat._12 + _this__32 * mat._13,_this__02 * mat._20 + _this__12 * mat._21 + _this__22 * mat._22 + _this__32 * mat._23,_this__02 * mat._30 + _this__12 * mat._31 + _this__22 * mat._32 + _this__32 * mat._33,_this__03 * mat._00 + _this__13 * mat._01 + _this__23 * mat._02 + _this__33 * mat._03,_this__03 * mat._10 + _this__13 * mat._11 + _this__23 * mat._12 + _this__33 * mat._13,_this__03 * mat._20 + _this__13 * mat._21 + _this__23 * mat._22 + _this__33 * mat._23,_this__03 * mat._30 + _this__13 * mat._31 + _this__23 * mat._32 + _this__33 * mat._33);
		var _this = this.projection;
		var m3 = _this._12;
		var m4 = _this._22;
		var m5 = _this._32;
		var m6 = _this._13;
		var m7 = _this._23;
		var m8 = _this._33;
		var c00 = _this._11 * (m4 * m8 - m5 * m7) - _this._21 * (m3 * m8 - m5 * m6) + _this._31 * (m3 * m7 - m4 * m6);
		var m3 = _this._12;
		var m4 = _this._22;
		var m5 = _this._32;
		var m6 = _this._13;
		var m7 = _this._23;
		var m8 = _this._33;
		var c01 = _this._10 * (m4 * m8 - m5 * m7) - _this._20 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
		var m3 = _this._11;
		var m4 = _this._21;
		var m5 = _this._31;
		var m6 = _this._13;
		var m7 = _this._23;
		var m8 = _this._33;
		var c02 = _this._10 * (m4 * m8 - m5 * m7) - _this._20 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
		var m3 = _this._11;
		var m4 = _this._21;
		var m5 = _this._31;
		var m6 = _this._12;
		var m7 = _this._22;
		var m8 = _this._32;
		var c03 = _this._10 * (m4 * m8 - m5 * m7) - _this._20 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
		this.projectionIsOrthogonal = Math.abs(_this._00 * c00 - _this._01 * c01 + _this._02 * c02 - _this._03 * c03) < 0.000001;
	}
	,setDrawArea: function(x,y,width,height) {
		this.drawArea = com_helpers_MinMax.from(0,0,width,height);
	}
	,set_angle: function(value) {
		this.angle = value;
		this.up.x = Math.sin(value);
		this.up.y = Math.cos(value);
		return this.angle;
	}
	,render: function(paintMode,transform,needRefresh) {
		if(needRefresh) {
			com_gEngine_GEngine.get_i().setCanvas(this.renderTarget);
			com_gEngine_GEngine.get_i().beginCanvas();
			var g = com_gEngine_GEngine.get_i().currentCanvas().get_g4();
			g.clear(this.clearColor,1);
			paintMode.camera = this;
			paintMode.resetRenderArea();
			paintMode.adjustRenderArea(this.drawArea);
			if(this.onPreRender != null) {
				this.onPreRender(this,this.view);
			}
			this.world.render(paintMode,this.view);
			paintMode.render();
			com_gEngine_GEngine.get_i().endCanvas();
		}
		com_gEngine_GEngine.get_i().setFrameBufferAsCanvas();
		com_gEngine_GEngine.get_i().beginCanvas();
		var painter = this.postProcess != null ? this.postProcess : com_gEngine_GEngine.get_i().simplePainters[this.blend];
		painter.filter = this.textureFilter;
		painter.setProjection(com_gEngine_GEngine.get_i().getMatrix());
		var tmp = this.postProcess != null;
		com_gEngine_GEngine.get_i().renderToFrameBuffer(this.renderTarget,painter,this.finalX,this.finalY,this.drawArea.width(),this.drawArea.height(),1,false,1);
		com_gEngine_GEngine.get_i().endCanvas();
	}
	,limits: function(x,y,width,height) {
		this.min = new com_helpers_FastPoint(x,y);
		this.max = new com_helpers_FastPoint(x + width,y + height);
	}
	,setTarget: function(x,y) {
		var _this = this.targetPos;
		var x1 = x;
		var y1 = y;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		_this.x = x1;
		_this.y = y1;
	}
	,move: function(deltaX,deltaY) {
		this.targetPos.x += deltaX;
		this.targetPos.y += deltaY;
	}
	,goTo: function(x,y) {
		this.x = x - this.width * 0.5;
		this.y = y - this.height * 0.5;
	}
	,worldToScreen: function(x,y,z) {
		var _this = this.projection;
		var m = this.view;
		var transform__00 = _this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02 + _this._30 * m._03;
		var transform__10 = _this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12 + _this._30 * m._13;
		var transform__20 = _this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22 + _this._30 * m._23;
		var transform__30 = _this._00 * m._30 + _this._10 * m._31 + _this._20 * m._32 + _this._30 * m._33;
		var transform__01 = _this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02 + _this._31 * m._03;
		var transform__11 = _this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12 + _this._31 * m._13;
		var transform__21 = _this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22 + _this._31 * m._23;
		var transform__31 = _this._01 * m._30 + _this._11 * m._31 + _this._21 * m._32 + _this._31 * m._33;
		var transform__02 = _this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02 + _this._32 * m._03;
		var transform__12 = _this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12 + _this._32 * m._13;
		var transform__22 = _this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22 + _this._32 * m._23;
		var transform__32 = _this._02 * m._30 + _this._12 * m._31 + _this._22 * m._32 + _this._32 * m._33;
		var transform__03 = _this._03 * m._00 + _this._13 * m._01 + _this._23 * m._02 + _this._33 * m._03;
		var transform__13 = _this._03 * m._10 + _this._13 * m._11 + _this._23 * m._12 + _this._33 * m._13;
		var transform__23 = _this._03 * m._20 + _this._13 * m._21 + _this._23 * m._22 + _this._33 * m._23;
		var transform__33 = _this._03 * m._30 + _this._13 * m._31 + _this._23 * m._32 + _this._33 * m._33;
		var x1 = x;
		var y1 = y;
		var z1 = z;
		if(z1 == null) {
			z1 = 0;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var value_z = z1;
		var value_w = 1;
		var screen_x = 0;
		var screen_y = 0;
		var screen_z = 0;
		var screen_w = 1;
		screen_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		screen_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		screen_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		screen_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var value = screen_w;
		var x = screen_x * value;
		var y = screen_y * value;
		var z = screen_z * value;
		var w = screen_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var inlFastVector4_x = x;
		var inlFastVector4_y = y;
		var inlFastVector4_z = z;
		var inlFastVector4_w = w;
		return new kha_math_FastVector2(this.width * 0.5 + screen_x,this.height * 0.5 + screen_y);
	}
	,screenToWorld: function(targetX,targetY,targetZ) {
		if(targetZ == null) {
			targetZ = 0;
		}
		var homogeneousTargetX = targetX / this.width * 2 - 1;
		var homogeneousTargetY = kha_Image.renderTargetsInvertedY() ? targetY / this.height * 2 - 1 : 1 - targetY / this.height * 2;
		var transform__00 = 1;
		var transform__10 = 0;
		var transform__20 = 0;
		var transform__30 = 0;
		var transform__01 = 0;
		var transform__11 = 1;
		var transform__21 = 0;
		var transform__31 = 0;
		var transform__02 = 0;
		var transform__12 = 0;
		var transform__22 = 1;
		var transform__32 = 0;
		var transform__03 = 0;
		var transform__13 = 0;
		var transform__23 = 0;
		var transform__33 = 1;
		if(this.projectionIsOrthogonal) {
			homogeneousTargetX = targetX - this.width * 0.5;
			homogeneousTargetY = targetY - this.height * 0.5;
			var _this = this.view;
			var m3 = _this._12;
			var m4 = _this._22;
			var m5 = _this._32;
			var m6 = _this._13;
			var m7 = _this._23;
			var m8 = _this._33;
			var c00 = _this._11 * (m4 * m8 - m5 * m7) - _this._21 * (m3 * m8 - m5 * m6) + _this._31 * (m3 * m7 - m4 * m6);
			var m3 = _this._12;
			var m4 = _this._22;
			var m5 = _this._32;
			var m6 = _this._13;
			var m7 = _this._23;
			var m8 = _this._33;
			var c01 = _this._10 * (m4 * m8 - m5 * m7) - _this._20 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
			var m3 = _this._11;
			var m4 = _this._21;
			var m5 = _this._31;
			var m6 = _this._13;
			var m7 = _this._23;
			var m8 = _this._33;
			var c02 = _this._10 * (m4 * m8 - m5 * m7) - _this._20 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
			var m3 = _this._11;
			var m4 = _this._21;
			var m5 = _this._31;
			var m6 = _this._12;
			var m7 = _this._22;
			var m8 = _this._32;
			var c03 = _this._10 * (m4 * m8 - m5 * m7) - _this._20 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
			var det = _this._00 * c00 - _this._01 * c01 + _this._02 * c02 - _this._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this._02;
			var m4 = _this._22;
			var m5 = _this._32;
			var m6 = _this._03;
			var m7 = _this._23;
			var m8 = _this._33;
			var c10 = _this._01 * (m4 * m8 - m5 * m7) - _this._21 * (m3 * m8 - m5 * m6) + _this._31 * (m3 * m7 - m4 * m6);
			var m3 = _this._02;
			var m4 = _this._22;
			var m5 = _this._32;
			var m6 = _this._03;
			var m7 = _this._23;
			var m8 = _this._33;
			var c11 = _this._00 * (m4 * m8 - m5 * m7) - _this._20 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
			var m3 = _this._01;
			var m4 = _this._21;
			var m5 = _this._31;
			var m6 = _this._03;
			var m7 = _this._23;
			var m8 = _this._33;
			var c12 = _this._00 * (m4 * m8 - m5 * m7) - _this._20 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
			var m3 = _this._01;
			var m4 = _this._21;
			var m5 = _this._31;
			var m6 = _this._02;
			var m7 = _this._22;
			var m8 = _this._32;
			var c13 = _this._00 * (m4 * m8 - m5 * m7) - _this._20 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
			var m3 = _this._02;
			var m4 = _this._12;
			var m5 = _this._32;
			var m6 = _this._03;
			var m7 = _this._13;
			var m8 = _this._33;
			var c20 = _this._01 * (m4 * m8 - m5 * m7) - _this._11 * (m3 * m8 - m5 * m6) + _this._31 * (m3 * m7 - m4 * m6);
			var m3 = _this._02;
			var m4 = _this._12;
			var m5 = _this._32;
			var m6 = _this._03;
			var m7 = _this._13;
			var m8 = _this._33;
			var c21 = _this._00 * (m4 * m8 - m5 * m7) - _this._10 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
			var m3 = _this._01;
			var m4 = _this._11;
			var m5 = _this._31;
			var m6 = _this._03;
			var m7 = _this._13;
			var m8 = _this._33;
			var c22 = _this._00 * (m4 * m8 - m5 * m7) - _this._10 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
			var m3 = _this._01;
			var m4 = _this._11;
			var m5 = _this._31;
			var m6 = _this._02;
			var m7 = _this._12;
			var m8 = _this._32;
			var c23 = _this._00 * (m4 * m8 - m5 * m7) - _this._10 * (m3 * m8 - m5 * m6) + _this._30 * (m3 * m7 - m4 * m6);
			var m3 = _this._02;
			var m4 = _this._12;
			var m5 = _this._22;
			var m6 = _this._03;
			var m7 = _this._13;
			var m8 = _this._23;
			var c30 = _this._01 * (m4 * m8 - m5 * m7) - _this._11 * (m3 * m8 - m5 * m6) + _this._21 * (m3 * m7 - m4 * m6);
			var m3 = _this._02;
			var m4 = _this._12;
			var m5 = _this._22;
			var m6 = _this._03;
			var m7 = _this._13;
			var m8 = _this._23;
			var c31 = _this._00 * (m4 * m8 - m5 * m7) - _this._10 * (m3 * m8 - m5 * m6) + _this._20 * (m3 * m7 - m4 * m6);
			var m3 = _this._01;
			var m4 = _this._11;
			var m5 = _this._21;
			var m6 = _this._03;
			var m7 = _this._13;
			var m8 = _this._23;
			var c32 = _this._00 * (m4 * m8 - m5 * m7) - _this._10 * (m3 * m8 - m5 * m6) + _this._20 * (m3 * m7 - m4 * m6);
			var m3 = _this._01;
			var m4 = _this._11;
			var m5 = _this._21;
			var m6 = _this._02;
			var m7 = _this._12;
			var m8 = _this._22;
			var c33 = _this._00 * (m4 * m8 - m5 * m7) - _this._10 * (m3 * m8 - m5 * m6) + _this._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		} else {
			var _this = this.projection;
			var m = this.view;
			var _this__00 = _this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02 + _this._30 * m._03;
			var _this__10 = _this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12 + _this._30 * m._13;
			var _this__20 = _this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22 + _this._30 * m._23;
			var _this__30 = _this._00 * m._30 + _this._10 * m._31 + _this._20 * m._32 + _this._30 * m._33;
			var _this__01 = _this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02 + _this._31 * m._03;
			var _this__11 = _this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12 + _this._31 * m._13;
			var _this__21 = _this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22 + _this._31 * m._23;
			var _this__31 = _this._01 * m._30 + _this._11 * m._31 + _this._21 * m._32 + _this._31 * m._33;
			var _this__02 = _this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02 + _this._32 * m._03;
			var _this__12 = _this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12 + _this._32 * m._13;
			var _this__22 = _this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22 + _this._32 * m._23;
			var _this__32 = _this._02 * m._30 + _this._12 * m._31 + _this._22 * m._32 + _this._32 * m._33;
			var _this__03 = _this._03 * m._00 + _this._13 * m._01 + _this._23 * m._02 + _this._33 * m._03;
			var _this__13 = _this._03 * m._10 + _this._13 * m._11 + _this._23 * m._12 + _this._33 * m._13;
			var _this__23 = _this._03 * m._20 + _this._13 * m._21 + _this._23 * m._22 + _this._33 * m._23;
			var _this__33 = _this._03 * m._30 + _this._13 * m._31 + _this._23 * m._32 + _this._33 * m._33;
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c00 = _this__11 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c01 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c02 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__12;
			var m7 = _this__22;
			var m8 = _this__32;
			var c03 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var det = _this__00 * c00 - _this__01 * c01 + _this__02 * c02 - _this__03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c10 = _this__01 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c11 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c12 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__22;
			var m8 = _this__32;
			var c13 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c20 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c21 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c22 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__32;
			var c23 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c30 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__21 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c31 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c32 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__22;
			var c33 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		}
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = -1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var farRaw_x = 0;
		var farRaw_y = 0;
		var farRaw_z = 0;
		var farRaw_w = 1;
		farRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		farRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		farRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		farRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = 1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var nearRaw_x = 0;
		var nearRaw_y = 0;
		var nearRaw_z = 0;
		var nearRaw_w = 1;
		nearRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		nearRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		nearRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		nearRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var value = 1 / farRaw_w;
		var x = farRaw_x * value;
		var y = farRaw_y * value;
		var z = farRaw_z * value;
		var w = farRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var far_x = x;
		var far_y = y;
		var far_z = z;
		var far_w = w;
		var value = 1 / nearRaw_w;
		var x = nearRaw_x * value;
		var y = nearRaw_y * value;
		var z = nearRaw_z * value;
		var w = nearRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var near_x = x;
		var near_y = y;
		var near_z = z;
		var near_w = w;
		var x = far_x - near_x;
		var y = far_y - near_y;
		var z = far_z - near_z;
		var w = far_w - near_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var dir_x = x;
		var dir_y = y;
		var dir_z = z;
		var dir_w = w;
		return new kha_math_FastVector2(near_x + dir_x * ((targetZ - near_z) / dir_z),near_y + dir_y * ((targetZ - near_z) / dir_z));
	}
	,destroy: function() {
		com_gEngine_GEngine.get_i().releaseRenderTarget(this.renderTarget);
	}
	,setDeadZone: function(x,y,width,height) {
		this.deadOffset.x = x - this.width * 0.5;
		this.deadOffset.y = y - this.height * 0.5;
		this.deadZone.width = width;
		this.deadZone.height = height;
	}
	,maxSeparationFromTarget: null
	,update: function(dt) {
		if(this.camera2d) {
			this.deadZone.x = this.x + this.deadOffset.x;
			this.deadZone.y = this.y + this.deadOffset.y;
			if(this.targetPos.x < this.deadZone.x) {
				this.x += this.targetPos.x - this.deadZone.x;
			} else if(this.targetPos.x > this.deadZone.x + this.deadZone.width) {
				this.x += this.targetPos.x - (this.deadZone.x + this.deadZone.width);
			}
			if(this.targetPos.y < this.deadZone.y) {
				this.y += this.targetPos.y - this.deadZone.y;
			} else if(this.targetPos.y > this.deadZone.y + this.deadZone.height) {
				this.y += this.targetPos.y - (this.deadZone.y + this.deadZone.height);
			}
			this.z = 646.1168 / this.scale;
			var shakeX = 0.;
			var shakeY = 0.;
			this.adjustToLimits();
			if(this.time > 0) {
				this.time -= dt;
				var s = this.time / this.totalTime;
				shakeX = this.maxShakeX - 2 * this.perlin.OctavePerlin(this.time + this.randomSeed,this.time + this.randomSeed,this.time + this.randomSeed,8,s,this.shakeInterval) * this.maxShakeX * 2;
				shakeY = this.maxShakeY - 2 * this.perlin.OctavePerlin(-this.time - this.randomSeed,-this.time - this.randomSeed,-this.time - this.randomSeed,8,s,this.shakeInterval) * this.maxShakeY * 2;
				shakeX *= s;
				shakeY *= s;
			}
			var _this = this.eye;
			var x = this.x + shakeX;
			var y = this.y + shakeY;
			var z = this.z;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var _this_x = x;
			var _this_y = y;
			var _this_z = z;
			var vec = this.offsetEye;
			var x = _this_x - vec.x;
			var y = _this_y - vec.y;
			var z = _this_z - vec.z;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var v_x = x;
			var v_y = y;
			var v_z = z;
			_this.x = v_x;
			_this.y = v_y;
			_this.z = v_z;
			var _this = this.at;
			var x = this.x + shakeX;
			var y = this.y + shakeY;
			var z = 0;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var v_x = x;
			var v_y = y;
			var v_z = z;
			_this.x = v_x;
			_this.y = v_y;
			_this.z = v_z;
		}
		this.updateView();
	}
	,screenHeight: function() {
		return this.height;
	}
	,screenWidth: function() {
		return this.width;
	}
	,adjustToLimits: function() {
		if(this.min != null) {
			if(this.x - this.width * 0.5 / this.scale < this.min.x) {
				this.x = this.min.x + this.width * 0.5 / this.scale;
			} else if(this.x + this.width * 0.5 / this.scale > this.max.x) {
				this.x = this.max.x - this.width * 0.5 / this.scale;
			}
			if(this.y - this.height * 0.5 / this.scale < this.min.y) {
				this.y = this.min.y + this.height * 0.5 / this.scale;
			} else if(this.y + this.height * 0.5 / this.scale > this.max.y) {
				this.y = this.max.y - this.height * 0.5 / this.scale;
			}
		}
	}
	,shake: function(time,maxX,maxY,rotation,shakeInterval) {
		if(shakeInterval == null) {
			shakeInterval = 0.1;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(maxY == null) {
			maxY = 10;
		}
		if(maxX == null) {
			maxX = 10;
		}
		if(time == null) {
			time = -1;
		}
		this.time = this.totalTime = time;
		if(time < 0) {
			this.time = 100000;
			this.totalTime = 1;
		}
		this.shakeRotation = rotation;
		this.maxShakeX = maxX;
		this.maxShakeY = maxY;
		this.randomSeed = Math.random() * 100;
		this.shakeInterval = shakeInterval;
	}
	,get_smooth: function() {
		return this.textureFilter == 1;
	}
	,set_smooth: function(value) {
		if(value) {
			this.textureFilter = 1;
		} else {
			this.textureFilter = 0;
		}
		return value;
	}
	,stopShake: function() {
		this.time = this.totalTime = 0;
	}
	,__class__: com_gEngine_display_Camera
	,__properties__: {set_smooth:"set_smooth",get_smooth:"get_smooth",set_angle:"set_angle"}
};
var com_gEngine_display_DisplayObject = function() { };
$hxClasses["com.gEngine.display.DisplayObject"] = com_gEngine_display_DisplayObject;
com_gEngine_display_DisplayObject.__name__ = "com.gEngine.display.DisplayObject";
com_gEngine_display_DisplayObject.__isInterface__ = true;
com_gEngine_display_DisplayObject.prototype = {
	set_rotation: null
	,x: null
	,y: null
	,z: null
	,offsetX: null
	,offsetY: null
	,rotation: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,parent: null
	,visible: null
	,render: null
	,update: null
	,removeFromParent: null
	,getDrawArea: null
	,getTransformation: null
	,getFinalTransformation: null
	,__class__: com_gEngine_display_DisplayObject
	,__properties__: {set_rotation:"set_rotation"}
};
var com_gEngine_display_IAnimation = function() { };
$hxClasses["com.gEngine.display.IAnimation"] = com_gEngine_display_IAnimation;
com_gEngine_display_IAnimation.__name__ = "com.gEngine.display.IAnimation";
com_gEngine_display_IAnimation.__isInterface__ = true;
com_gEngine_display_IAnimation.__interfaces__ = [com_gEngine_display_DisplayObject];
com_gEngine_display_IAnimation.prototype = {
	timeline: null
	,__class__: com_gEngine_display_IAnimation
};
var com_gEngine_display_IContainer = function() { };
$hxClasses["com.gEngine.display.IContainer"] = com_gEngine_display_IContainer;
com_gEngine_display_IContainer.__name__ = "com.gEngine.display.IContainer";
com_gEngine_display_IContainer.__isInterface__ = true;
com_gEngine_display_IContainer.__interfaces__ = [com_gEngine_display_DisplayObject];
com_gEngine_display_IContainer.prototype = {
	remove: null
	,__class__: com_gEngine_display_IContainer
};
var com_gEngine_display_IRotation = function() { };
$hxClasses["com.gEngine.display.IRotation"] = com_gEngine_display_IRotation;
com_gEngine_display_IRotation.__name__ = "com.gEngine.display.IRotation";
com_gEngine_display_IRotation.__isInterface__ = true;
com_gEngine_display_IRotation.__interfaces__ = [com_gEngine_display_DisplayObject];
com_gEngine_display_IRotation.prototype = {
	set_rotation: null
	,rotation: null
	,__class__: com_gEngine_display_IRotation
	,__properties__: {set_rotation:"set_rotation"}
};
var com_gEngine_display_Layer = function() {
	this.offsetY = 0;
	this.offsetX = 0;
	this.playing = true;
	this.drawAreaTemp = new com_helpers_MinMax();
	this.mulA = 1;
	this.mulB = 1;
	this.mulG = 1;
	this.mulR = 1;
	this.colorTransform = false;
	this.billboard = false;
	this.scaleArea = new com_helpers_MinMax();
	this.visible = true;
	this.paralaxY = 1;
	this.paralaxX = 1;
	this.pivotY = 0;
	this.pivotX = 0;
	this.scaleZ = 1;
	this.scaleY = 1;
	this.scaleX = 1;
	this.z = 0;
	this.y = 0;
	this.x = 0;
	this.children = [];
	this.set_rotation(0);
	this.cosAng = 1;
	this.sinAng = 0;
	this.transform = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.customTransform = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
};
$hxClasses["com.gEngine.display.Layer"] = com_gEngine_display_Layer;
com_gEngine_display_Layer.__name__ = "com.gEngine.display.Layer";
com_gEngine_display_Layer.__interfaces__ = [com_gEngine_display_IContainer,com_gEngine_display_DisplayObject];
com_gEngine_display_Layer.sortYCompare = function(a,b) {
	if(a.y < b.y) {
		return -1;
	}
	if(a.y > b.y) {
		return 1;
	}
	return 0;
};
com_gEngine_display_Layer.sortZCompare = function(a,b) {
	if(a.z < b.z) {
		return -1;
	}
	if(a.z > b.z) {
		return 1;
	}
	return 0;
};
com_gEngine_display_Layer.prototype = {
	children: null
	,texture: null
	,x: null
	,y: null
	,z: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,pivotX: null
	,pivotY: null
	,paralaxX: null
	,paralaxY: null
	,parent: null
	,visible: null
	,filter: null
	,drawArea: null
	,length: null
	,useCustomTransform: null
	,customTransform: null
	,cosAng: null
	,sinAng: null
	,scaleArea: null
	,transform: null
	,billboard: null
	,colorTransform: null
	,mulR: null
	,mulG: null
	,mulB: null
	,mulA: null
	,setColorMultiply: function(r,g,b,a) {
		this.mulR = r;
		this.mulB = b;
		this.mulG = g;
		this.mulA = a;
		this.colorTransform = true;
	}
	,setBlendFilter: function(blend,r,g,b,a) {
		if(a == null) {
			a = 1;
		}
		this.filter = new com_gEngine_Filter([new com_gEngine_painters_Painter(true,blend)],false);
		this.filter.red = r;
		this.filter.green = g;
		this.filter.blue = b;
		this.filter.alpha = a;
	}
	,calculateTransform: function(transform) {
		if(this.useCustomTransform) {
			var _this = this.transform;
			var m = this.customTransform;
			var m__00 = transform._00 * m._00 + transform._10 * m._01 + transform._20 * m._02 + transform._30 * m._03;
			var m__10 = transform._00 * m._10 + transform._10 * m._11 + transform._20 * m._12 + transform._30 * m._13;
			var m__20 = transform._00 * m._20 + transform._10 * m._21 + transform._20 * m._22 + transform._30 * m._23;
			var m__30 = transform._00 * m._30 + transform._10 * m._31 + transform._20 * m._32 + transform._30 * m._33;
			var m__01 = transform._01 * m._00 + transform._11 * m._01 + transform._21 * m._02 + transform._31 * m._03;
			var m__11 = transform._01 * m._10 + transform._11 * m._11 + transform._21 * m._12 + transform._31 * m._13;
			var m__21 = transform._01 * m._20 + transform._11 * m._21 + transform._21 * m._22 + transform._31 * m._23;
			var m__31 = transform._01 * m._30 + transform._11 * m._31 + transform._21 * m._32 + transform._31 * m._33;
			var m__02 = transform._02 * m._00 + transform._12 * m._01 + transform._22 * m._02 + transform._32 * m._03;
			var m__12 = transform._02 * m._10 + transform._12 * m._11 + transform._22 * m._12 + transform._32 * m._13;
			var m__22 = transform._02 * m._20 + transform._12 * m._21 + transform._22 * m._22 + transform._32 * m._23;
			var m__32 = transform._02 * m._30 + transform._12 * m._31 + transform._22 * m._32 + transform._32 * m._33;
			var m__03 = transform._03 * m._00 + transform._13 * m._01 + transform._23 * m._02 + transform._33 * m._03;
			var m__13 = transform._03 * m._10 + transform._13 * m._11 + transform._23 * m._12 + transform._33 * m._13;
			var m__23 = transform._03 * m._20 + transform._13 * m._21 + transform._23 * m._22 + transform._33 * m._23;
			var m__33 = transform._03 * m._30 + transform._13 * m._31 + transform._23 * m._32 + transform._33 * m._33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		} else {
			var model__00 = 1;
			var model__10 = 0;
			var model__20 = 0;
			var model__30 = -this.pivotX;
			var model__01 = 0;
			var model__11 = 1;
			var model__21 = 0;
			var model__31 = -this.pivotY;
			var model__02 = 0;
			var model__12 = 0;
			var model__22 = 1;
			var model__32 = 0;
			var model__03 = 0;
			var model__13 = 0;
			var model__23 = 0;
			var model__33 = 1;
			var _this__00 = this.scaleX;
			var _this__10 = 0;
			var _this__20 = 0;
			var _this__30 = 0;
			var _this__01 = 0;
			var _this__11 = this.scaleY;
			var _this__21 = 0;
			var _this__31 = 0;
			var _this__02 = 0;
			var _this__12 = 0;
			var _this__22 = 1;
			var _this__32 = 0;
			var _this__03 = 0;
			var _this__13 = 0;
			var _this__23 = 0;
			var _this__33 = 1;
			var m__00 = _this__00 * model__00 + _this__10 * model__01 + _this__20 * model__02 + _this__30 * model__03;
			var m__10 = _this__00 * model__10 + _this__10 * model__11 + _this__20 * model__12 + _this__30 * model__13;
			var m__20 = _this__00 * model__20 + _this__10 * model__21 + _this__20 * model__22 + _this__30 * model__23;
			var m__30 = _this__00 * model__30 + _this__10 * model__31 + _this__20 * model__32 + _this__30 * model__33;
			var m__01 = _this__01 * model__00 + _this__11 * model__01 + _this__21 * model__02 + _this__31 * model__03;
			var m__11 = _this__01 * model__10 + _this__11 * model__11 + _this__21 * model__12 + _this__31 * model__13;
			var m__21 = _this__01 * model__20 + _this__11 * model__21 + _this__21 * model__22 + _this__31 * model__23;
			var m__31 = _this__01 * model__30 + _this__11 * model__31 + _this__21 * model__32 + _this__31 * model__33;
			var m__02 = _this__02 * model__00 + _this__12 * model__01 + _this__22 * model__02 + _this__32 * model__03;
			var m__12 = _this__02 * model__10 + _this__12 * model__11 + _this__22 * model__12 + _this__32 * model__13;
			var m__22 = _this__02 * model__20 + _this__12 * model__21 + _this__22 * model__22 + _this__32 * model__23;
			var m__32 = _this__02 * model__30 + _this__12 * model__31 + _this__22 * model__32 + _this__32 * model__33;
			var m__03 = _this__03 * model__00 + _this__13 * model__01 + _this__23 * model__02 + _this__33 * model__03;
			var m__13 = _this__03 * model__10 + _this__13 * model__11 + _this__23 * model__12 + _this__33 * model__13;
			var m__23 = _this__03 * model__20 + _this__13 * model__21 + _this__23 * model__22 + _this__33 * model__23;
			var m__33 = _this__03 * model__30 + _this__13 * model__31 + _this__23 * model__32 + _this__33 * model__33;
			model__00 = m__00;
			model__10 = m__10;
			model__20 = m__20;
			model__30 = m__30;
			model__01 = m__01;
			model__11 = m__11;
			model__21 = m__21;
			model__31 = m__31;
			model__02 = m__02;
			model__12 = m__12;
			model__22 = m__22;
			model__32 = m__32;
			model__03 = m__03;
			model__13 = m__13;
			model__23 = m__23;
			model__33 = m__33;
			if(this.billboard) {
				var m3 = transform._12;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._13;
				var m7 = transform._23;
				var m8 = transform._33;
				var c00 = transform._11 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
				var m3 = transform._12;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._13;
				var m7 = transform._23;
				var m8 = transform._33;
				var c01 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._11;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._13;
				var m7 = transform._23;
				var m8 = transform._33;
				var c02 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._11;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._12;
				var m7 = transform._22;
				var m8 = transform._32;
				var c03 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var det = transform._00 * c00 - transform._01 * c01 + transform._02 * c02 - transform._03 * c03;
				if(Math.abs(det) < 0.000001) {
					throw haxe_Exception.thrown("determinant is too small");
				}
				var m3 = transform._02;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._23;
				var m8 = transform._33;
				var c10 = transform._01 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._23;
				var m8 = transform._33;
				var c11 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._03;
				var m7 = transform._23;
				var m8 = transform._33;
				var c12 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._02;
				var m7 = transform._22;
				var m8 = transform._32;
				var c13 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._33;
				var c20 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._33;
				var c21 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._31;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._33;
				var c22 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._31;
				var m6 = transform._02;
				var m7 = transform._12;
				var m8 = transform._32;
				var c23 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._22;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._23;
				var c30 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._21 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._22;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._23;
				var c31 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._21;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._23;
				var c32 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._21;
				var m6 = transform._02;
				var m7 = transform._12;
				var m8 = transform._22;
				var c33 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
				var invdet = 1.0 / det;
				var rotation__00 = c00 * invdet;
				var rotation__10 = -c01 * invdet;
				var rotation__20 = c02 * invdet;
				var rotation__30 = -c03 * invdet;
				var rotation__01 = -c10 * invdet;
				var rotation__11 = c11 * invdet;
				var rotation__21 = -c12 * invdet;
				var rotation__31 = c13 * invdet;
				var rotation__02 = c20 * invdet;
				var rotation__12 = -c21 * invdet;
				var rotation__22 = c22 * invdet;
				var rotation__32 = -c23 * invdet;
				var rotation__03 = -c30 * invdet;
				var rotation__13 = c31 * invdet;
				var rotation__23 = -c32 * invdet;
				var rotation__33 = c33 * invdet;
				rotation__32 = 0;
				rotation__31 = rotation__32;
				rotation__30 = rotation__31;
				var m__00 = rotation__00 * model__00 + rotation__10 * model__01 + rotation__20 * model__02 + rotation__30 * model__03;
				var m__10 = rotation__00 * model__10 + rotation__10 * model__11 + rotation__20 * model__12 + rotation__30 * model__13;
				var m__20 = rotation__00 * model__20 + rotation__10 * model__21 + rotation__20 * model__22 + rotation__30 * model__23;
				var m__30 = rotation__00 * model__30 + rotation__10 * model__31 + rotation__20 * model__32 + rotation__30 * model__33;
				var m__01 = rotation__01 * model__00 + rotation__11 * model__01 + rotation__21 * model__02 + rotation__31 * model__03;
				var m__11 = rotation__01 * model__10 + rotation__11 * model__11 + rotation__21 * model__12 + rotation__31 * model__13;
				var m__21 = rotation__01 * model__20 + rotation__11 * model__21 + rotation__21 * model__22 + rotation__31 * model__23;
				var m__31 = rotation__01 * model__30 + rotation__11 * model__31 + rotation__21 * model__32 + rotation__31 * model__33;
				var m__02 = rotation__02 * model__00 + rotation__12 * model__01 + rotation__22 * model__02 + rotation__32 * model__03;
				var m__12 = rotation__02 * model__10 + rotation__12 * model__11 + rotation__22 * model__12 + rotation__32 * model__13;
				var m__22 = rotation__02 * model__20 + rotation__12 * model__21 + rotation__22 * model__22 + rotation__32 * model__23;
				var m__32 = rotation__02 * model__30 + rotation__12 * model__31 + rotation__22 * model__32 + rotation__32 * model__33;
				var m__03 = rotation__03 * model__00 + rotation__13 * model__01 + rotation__23 * model__02 + rotation__33 * model__03;
				var m__13 = rotation__03 * model__10 + rotation__13 * model__11 + rotation__23 * model__12 + rotation__33 * model__13;
				var m__23 = rotation__03 * model__20 + rotation__13 * model__21 + rotation__23 * model__22 + rotation__33 * model__23;
				var m__33 = rotation__03 * model__30 + rotation__13 * model__31 + rotation__23 * model__32 + rotation__33 * model__33;
				model__00 = m__00;
				model__10 = m__10;
				model__20 = m__20;
				model__30 = m__30;
				model__01 = m__01;
				model__11 = m__11;
				model__21 = m__21;
				model__31 = m__31;
				model__02 = m__02;
				model__12 = m__12;
				model__22 = m__22;
				model__32 = m__32;
				model__03 = m__03;
				model__13 = m__13;
				model__23 = m__23;
				model__33 = m__33;
			} else {
				var _this__00 = this.cosAng;
				var _this__10 = -this.sinAng;
				var _this__20 = 0;
				var _this__30 = 0;
				var _this__01 = this.sinAng;
				var _this__11 = this.cosAng;
				var _this__21 = 0;
				var _this__31 = 0;
				var _this__02 = 0;
				var _this__12 = 0;
				var _this__22 = 1;
				var _this__32 = 0;
				var _this__03 = 0;
				var _this__13 = 0;
				var _this__23 = 0;
				var _this__33 = 1;
				var m__00 = _this__00 * model__00 + _this__10 * model__01 + _this__20 * model__02 + _this__30 * model__03;
				var m__10 = _this__00 * model__10 + _this__10 * model__11 + _this__20 * model__12 + _this__30 * model__13;
				var m__20 = _this__00 * model__20 + _this__10 * model__21 + _this__20 * model__22 + _this__30 * model__23;
				var m__30 = _this__00 * model__30 + _this__10 * model__31 + _this__20 * model__32 + _this__30 * model__33;
				var m__01 = _this__01 * model__00 + _this__11 * model__01 + _this__21 * model__02 + _this__31 * model__03;
				var m__11 = _this__01 * model__10 + _this__11 * model__11 + _this__21 * model__12 + _this__31 * model__13;
				var m__21 = _this__01 * model__20 + _this__11 * model__21 + _this__21 * model__22 + _this__31 * model__23;
				var m__31 = _this__01 * model__30 + _this__11 * model__31 + _this__21 * model__32 + _this__31 * model__33;
				var m__02 = _this__02 * model__00 + _this__12 * model__01 + _this__22 * model__02 + _this__32 * model__03;
				var m__12 = _this__02 * model__10 + _this__12 * model__11 + _this__22 * model__12 + _this__32 * model__13;
				var m__22 = _this__02 * model__20 + _this__12 * model__21 + _this__22 * model__22 + _this__32 * model__23;
				var m__32 = _this__02 * model__30 + _this__12 * model__31 + _this__22 * model__32 + _this__32 * model__33;
				var m__03 = _this__03 * model__00 + _this__13 * model__01 + _this__23 * model__02 + _this__33 * model__03;
				var m__13 = _this__03 * model__10 + _this__13 * model__11 + _this__23 * model__12 + _this__33 * model__13;
				var m__23 = _this__03 * model__20 + _this__13 * model__21 + _this__23 * model__22 + _this__33 * model__23;
				var m__33 = _this__03 * model__30 + _this__13 * model__31 + _this__23 * model__32 + _this__33 * model__33;
				model__00 = m__00;
				model__10 = m__10;
				model__20 = m__20;
				model__30 = m__30;
				model__01 = m__01;
				model__11 = m__11;
				model__21 = m__21;
				model__31 = m__31;
				model__02 = m__02;
				model__12 = m__12;
				model__22 = m__22;
				model__32 = m__32;
				model__03 = m__03;
				model__13 = m__13;
				model__23 = m__23;
				model__33 = m__33;
			}
			var _this__00 = 1;
			var _this__10 = 0;
			var _this__20 = 0;
			var _this__30 = this.x + this.pivotX + this.offsetX;
			var _this__01 = 0;
			var _this__11 = 1;
			var _this__21 = 0;
			var _this__31 = this.y + this.pivotY + this.offsetY;
			var _this__02 = 0;
			var _this__12 = 0;
			var _this__22 = 1;
			var _this__32 = this.z;
			var _this__03 = 0;
			var _this__13 = 0;
			var _this__23 = 0;
			var _this__33 = 1;
			var m__00 = _this__00 * model__00 + _this__10 * model__01 + _this__20 * model__02 + _this__30 * model__03;
			var m__10 = _this__00 * model__10 + _this__10 * model__11 + _this__20 * model__12 + _this__30 * model__13;
			var m__20 = _this__00 * model__20 + _this__10 * model__21 + _this__20 * model__22 + _this__30 * model__23;
			var m__30 = _this__00 * model__30 + _this__10 * model__31 + _this__20 * model__32 + _this__30 * model__33;
			var m__01 = _this__01 * model__00 + _this__11 * model__01 + _this__21 * model__02 + _this__31 * model__03;
			var m__11 = _this__01 * model__10 + _this__11 * model__11 + _this__21 * model__12 + _this__31 * model__13;
			var m__21 = _this__01 * model__20 + _this__11 * model__21 + _this__21 * model__22 + _this__31 * model__23;
			var m__31 = _this__01 * model__30 + _this__11 * model__31 + _this__21 * model__32 + _this__31 * model__33;
			var m__02 = _this__02 * model__00 + _this__12 * model__01 + _this__22 * model__02 + _this__32 * model__03;
			var m__12 = _this__02 * model__10 + _this__12 * model__11 + _this__22 * model__12 + _this__32 * model__13;
			var m__22 = _this__02 * model__20 + _this__12 * model__21 + _this__22 * model__22 + _this__32 * model__23;
			var m__32 = _this__02 * model__30 + _this__12 * model__31 + _this__22 * model__32 + _this__32 * model__33;
			var m__03 = _this__03 * model__00 + _this__13 * model__01 + _this__23 * model__02 + _this__33 * model__03;
			var m__13 = _this__03 * model__10 + _this__13 * model__11 + _this__23 * model__12 + _this__33 * model__13;
			var m__23 = _this__03 * model__20 + _this__13 * model__21 + _this__23 * model__22 + _this__33 * model__23;
			var m__33 = _this__03 * model__30 + _this__13 * model__31 + _this__23 * model__32 + _this__33 * model__33;
			model__00 = m__00;
			model__10 = m__10;
			model__20 = m__20;
			model__30 = m__30;
			model__01 = m__01;
			model__11 = m__11;
			model__21 = m__21;
			model__31 = m__31;
			model__02 = m__02;
			model__12 = m__12;
			model__22 = m__22;
			model__32 = m__32;
			model__03 = m__03;
			model__13 = m__13;
			model__23 = m__23;
			model__33 = m__33;
			var _this = this.transform;
			var m__00 = transform._00 * model__00 + transform._10 * model__01 + transform._20 * model__02 + transform._30 * model__03;
			var m__10 = transform._00 * model__10 + transform._10 * model__11 + transform._20 * model__12 + transform._30 * model__13;
			var m__20 = transform._00 * model__20 + transform._10 * model__21 + transform._20 * model__22 + transform._30 * model__23;
			var m__30 = transform._00 * model__30 + transform._10 * model__31 + transform._20 * model__32 + transform._30 * model__33;
			var m__01 = transform._01 * model__00 + transform._11 * model__01 + transform._21 * model__02 + transform._31 * model__03;
			var m__11 = transform._01 * model__10 + transform._11 * model__11 + transform._21 * model__12 + transform._31 * model__13;
			var m__21 = transform._01 * model__20 + transform._11 * model__21 + transform._21 * model__22 + transform._31 * model__23;
			var m__31 = transform._01 * model__30 + transform._11 * model__31 + transform._21 * model__32 + transform._31 * model__33;
			var m__02 = transform._02 * model__00 + transform._12 * model__01 + transform._22 * model__02 + transform._32 * model__03;
			var m__12 = transform._02 * model__10 + transform._12 * model__11 + transform._22 * model__12 + transform._32 * model__13;
			var m__22 = transform._02 * model__20 + transform._12 * model__21 + transform._22 * model__22 + transform._32 * model__23;
			var m__32 = transform._02 * model__30 + transform._12 * model__31 + transform._22 * model__32 + transform._32 * model__33;
			var m__03 = transform._03 * model__00 + transform._13 * model__01 + transform._23 * model__02 + transform._33 * model__03;
			var m__13 = transform._03 * model__10 + transform._13 * model__11 + transform._23 * model__12 + transform._33 * model__13;
			var m__23 = transform._03 * model__20 + transform._13 * model__21 + transform._23 * model__22 + transform._33 * model__23;
			var m__33 = transform._03 * model__30 + transform._13 * model__31 + transform._23 * model__32 + transform._33 * model__33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
			this.transform._30 *= this.paralaxX;
			this.transform._31 *= this.paralaxY;
		}
	}
	,render: function(paintMode,transform) {
		if(this.useCustomTransform) {
			var _this = this.transform;
			var m = this.customTransform;
			var m__00 = transform._00 * m._00 + transform._10 * m._01 + transform._20 * m._02 + transform._30 * m._03;
			var m__10 = transform._00 * m._10 + transform._10 * m._11 + transform._20 * m._12 + transform._30 * m._13;
			var m__20 = transform._00 * m._20 + transform._10 * m._21 + transform._20 * m._22 + transform._30 * m._23;
			var m__30 = transform._00 * m._30 + transform._10 * m._31 + transform._20 * m._32 + transform._30 * m._33;
			var m__01 = transform._01 * m._00 + transform._11 * m._01 + transform._21 * m._02 + transform._31 * m._03;
			var m__11 = transform._01 * m._10 + transform._11 * m._11 + transform._21 * m._12 + transform._31 * m._13;
			var m__21 = transform._01 * m._20 + transform._11 * m._21 + transform._21 * m._22 + transform._31 * m._23;
			var m__31 = transform._01 * m._30 + transform._11 * m._31 + transform._21 * m._32 + transform._31 * m._33;
			var m__02 = transform._02 * m._00 + transform._12 * m._01 + transform._22 * m._02 + transform._32 * m._03;
			var m__12 = transform._02 * m._10 + transform._12 * m._11 + transform._22 * m._12 + transform._32 * m._13;
			var m__22 = transform._02 * m._20 + transform._12 * m._21 + transform._22 * m._22 + transform._32 * m._23;
			var m__32 = transform._02 * m._30 + transform._12 * m._31 + transform._22 * m._32 + transform._32 * m._33;
			var m__03 = transform._03 * m._00 + transform._13 * m._01 + transform._23 * m._02 + transform._33 * m._03;
			var m__13 = transform._03 * m._10 + transform._13 * m._11 + transform._23 * m._12 + transform._33 * m._13;
			var m__23 = transform._03 * m._20 + transform._13 * m._21 + transform._23 * m._22 + transform._33 * m._23;
			var m__33 = transform._03 * m._30 + transform._13 * m._31 + transform._23 * m._32 + transform._33 * m._33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		} else {
			var model__00 = 1;
			var model__10 = 0;
			var model__20 = 0;
			var model__30 = -this.pivotX;
			var model__01 = 0;
			var model__11 = 1;
			var model__21 = 0;
			var model__31 = -this.pivotY;
			var model__02 = 0;
			var model__12 = 0;
			var model__22 = 1;
			var model__32 = 0;
			var model__03 = 0;
			var model__13 = 0;
			var model__23 = 0;
			var model__33 = 1;
			var _this__00 = this.scaleX;
			var _this__10 = 0;
			var _this__20 = 0;
			var _this__30 = 0;
			var _this__01 = 0;
			var _this__11 = this.scaleY;
			var _this__21 = 0;
			var _this__31 = 0;
			var _this__02 = 0;
			var _this__12 = 0;
			var _this__22 = 1;
			var _this__32 = 0;
			var _this__03 = 0;
			var _this__13 = 0;
			var _this__23 = 0;
			var _this__33 = 1;
			var m__00 = _this__00 * model__00 + _this__10 * model__01 + _this__20 * model__02 + _this__30 * model__03;
			var m__10 = _this__00 * model__10 + _this__10 * model__11 + _this__20 * model__12 + _this__30 * model__13;
			var m__20 = _this__00 * model__20 + _this__10 * model__21 + _this__20 * model__22 + _this__30 * model__23;
			var m__30 = _this__00 * model__30 + _this__10 * model__31 + _this__20 * model__32 + _this__30 * model__33;
			var m__01 = _this__01 * model__00 + _this__11 * model__01 + _this__21 * model__02 + _this__31 * model__03;
			var m__11 = _this__01 * model__10 + _this__11 * model__11 + _this__21 * model__12 + _this__31 * model__13;
			var m__21 = _this__01 * model__20 + _this__11 * model__21 + _this__21 * model__22 + _this__31 * model__23;
			var m__31 = _this__01 * model__30 + _this__11 * model__31 + _this__21 * model__32 + _this__31 * model__33;
			var m__02 = _this__02 * model__00 + _this__12 * model__01 + _this__22 * model__02 + _this__32 * model__03;
			var m__12 = _this__02 * model__10 + _this__12 * model__11 + _this__22 * model__12 + _this__32 * model__13;
			var m__22 = _this__02 * model__20 + _this__12 * model__21 + _this__22 * model__22 + _this__32 * model__23;
			var m__32 = _this__02 * model__30 + _this__12 * model__31 + _this__22 * model__32 + _this__32 * model__33;
			var m__03 = _this__03 * model__00 + _this__13 * model__01 + _this__23 * model__02 + _this__33 * model__03;
			var m__13 = _this__03 * model__10 + _this__13 * model__11 + _this__23 * model__12 + _this__33 * model__13;
			var m__23 = _this__03 * model__20 + _this__13 * model__21 + _this__23 * model__22 + _this__33 * model__23;
			var m__33 = _this__03 * model__30 + _this__13 * model__31 + _this__23 * model__32 + _this__33 * model__33;
			model__00 = m__00;
			model__10 = m__10;
			model__20 = m__20;
			model__30 = m__30;
			model__01 = m__01;
			model__11 = m__11;
			model__21 = m__21;
			model__31 = m__31;
			model__02 = m__02;
			model__12 = m__12;
			model__22 = m__22;
			model__32 = m__32;
			model__03 = m__03;
			model__13 = m__13;
			model__23 = m__23;
			model__33 = m__33;
			if(this.billboard) {
				var m3 = transform._12;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._13;
				var m7 = transform._23;
				var m8 = transform._33;
				var c00 = transform._11 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
				var m3 = transform._12;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._13;
				var m7 = transform._23;
				var m8 = transform._33;
				var c01 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._11;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._13;
				var m7 = transform._23;
				var m8 = transform._33;
				var c02 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._11;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._12;
				var m7 = transform._22;
				var m8 = transform._32;
				var c03 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var det = transform._00 * c00 - transform._01 * c01 + transform._02 * c02 - transform._03 * c03;
				if(Math.abs(det) < 0.000001) {
					throw haxe_Exception.thrown("determinant is too small");
				}
				var m3 = transform._02;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._23;
				var m8 = transform._33;
				var c10 = transform._01 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._23;
				var m8 = transform._33;
				var c11 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._03;
				var m7 = transform._23;
				var m8 = transform._33;
				var c12 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._02;
				var m7 = transform._22;
				var m8 = transform._32;
				var c13 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._33;
				var c20 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._33;
				var c21 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._31;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._33;
				var c22 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._31;
				var m6 = transform._02;
				var m7 = transform._12;
				var m8 = transform._32;
				var c23 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._22;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._23;
				var c30 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._21 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._22;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._23;
				var c31 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._21;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._23;
				var c32 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._21;
				var m6 = transform._02;
				var m7 = transform._12;
				var m8 = transform._22;
				var c33 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
				var invdet = 1.0 / det;
				var rotation__00 = c00 * invdet;
				var rotation__10 = -c01 * invdet;
				var rotation__20 = c02 * invdet;
				var rotation__30 = -c03 * invdet;
				var rotation__01 = -c10 * invdet;
				var rotation__11 = c11 * invdet;
				var rotation__21 = -c12 * invdet;
				var rotation__31 = c13 * invdet;
				var rotation__02 = c20 * invdet;
				var rotation__12 = -c21 * invdet;
				var rotation__22 = c22 * invdet;
				var rotation__32 = -c23 * invdet;
				var rotation__03 = -c30 * invdet;
				var rotation__13 = c31 * invdet;
				var rotation__23 = -c32 * invdet;
				var rotation__33 = c33 * invdet;
				rotation__32 = 0;
				rotation__31 = rotation__32;
				rotation__30 = rotation__31;
				var m__00 = rotation__00 * model__00 + rotation__10 * model__01 + rotation__20 * model__02 + rotation__30 * model__03;
				var m__10 = rotation__00 * model__10 + rotation__10 * model__11 + rotation__20 * model__12 + rotation__30 * model__13;
				var m__20 = rotation__00 * model__20 + rotation__10 * model__21 + rotation__20 * model__22 + rotation__30 * model__23;
				var m__30 = rotation__00 * model__30 + rotation__10 * model__31 + rotation__20 * model__32 + rotation__30 * model__33;
				var m__01 = rotation__01 * model__00 + rotation__11 * model__01 + rotation__21 * model__02 + rotation__31 * model__03;
				var m__11 = rotation__01 * model__10 + rotation__11 * model__11 + rotation__21 * model__12 + rotation__31 * model__13;
				var m__21 = rotation__01 * model__20 + rotation__11 * model__21 + rotation__21 * model__22 + rotation__31 * model__23;
				var m__31 = rotation__01 * model__30 + rotation__11 * model__31 + rotation__21 * model__32 + rotation__31 * model__33;
				var m__02 = rotation__02 * model__00 + rotation__12 * model__01 + rotation__22 * model__02 + rotation__32 * model__03;
				var m__12 = rotation__02 * model__10 + rotation__12 * model__11 + rotation__22 * model__12 + rotation__32 * model__13;
				var m__22 = rotation__02 * model__20 + rotation__12 * model__21 + rotation__22 * model__22 + rotation__32 * model__23;
				var m__32 = rotation__02 * model__30 + rotation__12 * model__31 + rotation__22 * model__32 + rotation__32 * model__33;
				var m__03 = rotation__03 * model__00 + rotation__13 * model__01 + rotation__23 * model__02 + rotation__33 * model__03;
				var m__13 = rotation__03 * model__10 + rotation__13 * model__11 + rotation__23 * model__12 + rotation__33 * model__13;
				var m__23 = rotation__03 * model__20 + rotation__13 * model__21 + rotation__23 * model__22 + rotation__33 * model__23;
				var m__33 = rotation__03 * model__30 + rotation__13 * model__31 + rotation__23 * model__32 + rotation__33 * model__33;
				model__00 = m__00;
				model__10 = m__10;
				model__20 = m__20;
				model__30 = m__30;
				model__01 = m__01;
				model__11 = m__11;
				model__21 = m__21;
				model__31 = m__31;
				model__02 = m__02;
				model__12 = m__12;
				model__22 = m__22;
				model__32 = m__32;
				model__03 = m__03;
				model__13 = m__13;
				model__23 = m__23;
				model__33 = m__33;
			} else {
				var _this__00 = this.cosAng;
				var _this__10 = -this.sinAng;
				var _this__20 = 0;
				var _this__30 = 0;
				var _this__01 = this.sinAng;
				var _this__11 = this.cosAng;
				var _this__21 = 0;
				var _this__31 = 0;
				var _this__02 = 0;
				var _this__12 = 0;
				var _this__22 = 1;
				var _this__32 = 0;
				var _this__03 = 0;
				var _this__13 = 0;
				var _this__23 = 0;
				var _this__33 = 1;
				var m__00 = _this__00 * model__00 + _this__10 * model__01 + _this__20 * model__02 + _this__30 * model__03;
				var m__10 = _this__00 * model__10 + _this__10 * model__11 + _this__20 * model__12 + _this__30 * model__13;
				var m__20 = _this__00 * model__20 + _this__10 * model__21 + _this__20 * model__22 + _this__30 * model__23;
				var m__30 = _this__00 * model__30 + _this__10 * model__31 + _this__20 * model__32 + _this__30 * model__33;
				var m__01 = _this__01 * model__00 + _this__11 * model__01 + _this__21 * model__02 + _this__31 * model__03;
				var m__11 = _this__01 * model__10 + _this__11 * model__11 + _this__21 * model__12 + _this__31 * model__13;
				var m__21 = _this__01 * model__20 + _this__11 * model__21 + _this__21 * model__22 + _this__31 * model__23;
				var m__31 = _this__01 * model__30 + _this__11 * model__31 + _this__21 * model__32 + _this__31 * model__33;
				var m__02 = _this__02 * model__00 + _this__12 * model__01 + _this__22 * model__02 + _this__32 * model__03;
				var m__12 = _this__02 * model__10 + _this__12 * model__11 + _this__22 * model__12 + _this__32 * model__13;
				var m__22 = _this__02 * model__20 + _this__12 * model__21 + _this__22 * model__22 + _this__32 * model__23;
				var m__32 = _this__02 * model__30 + _this__12 * model__31 + _this__22 * model__32 + _this__32 * model__33;
				var m__03 = _this__03 * model__00 + _this__13 * model__01 + _this__23 * model__02 + _this__33 * model__03;
				var m__13 = _this__03 * model__10 + _this__13 * model__11 + _this__23 * model__12 + _this__33 * model__13;
				var m__23 = _this__03 * model__20 + _this__13 * model__21 + _this__23 * model__22 + _this__33 * model__23;
				var m__33 = _this__03 * model__30 + _this__13 * model__31 + _this__23 * model__32 + _this__33 * model__33;
				model__00 = m__00;
				model__10 = m__10;
				model__20 = m__20;
				model__30 = m__30;
				model__01 = m__01;
				model__11 = m__11;
				model__21 = m__21;
				model__31 = m__31;
				model__02 = m__02;
				model__12 = m__12;
				model__22 = m__22;
				model__32 = m__32;
				model__03 = m__03;
				model__13 = m__13;
				model__23 = m__23;
				model__33 = m__33;
			}
			var _this__00 = 1;
			var _this__10 = 0;
			var _this__20 = 0;
			var _this__30 = this.x + this.pivotX + this.offsetX;
			var _this__01 = 0;
			var _this__11 = 1;
			var _this__21 = 0;
			var _this__31 = this.y + this.pivotY + this.offsetY;
			var _this__02 = 0;
			var _this__12 = 0;
			var _this__22 = 1;
			var _this__32 = this.z;
			var _this__03 = 0;
			var _this__13 = 0;
			var _this__23 = 0;
			var _this__33 = 1;
			var m__00 = _this__00 * model__00 + _this__10 * model__01 + _this__20 * model__02 + _this__30 * model__03;
			var m__10 = _this__00 * model__10 + _this__10 * model__11 + _this__20 * model__12 + _this__30 * model__13;
			var m__20 = _this__00 * model__20 + _this__10 * model__21 + _this__20 * model__22 + _this__30 * model__23;
			var m__30 = _this__00 * model__30 + _this__10 * model__31 + _this__20 * model__32 + _this__30 * model__33;
			var m__01 = _this__01 * model__00 + _this__11 * model__01 + _this__21 * model__02 + _this__31 * model__03;
			var m__11 = _this__01 * model__10 + _this__11 * model__11 + _this__21 * model__12 + _this__31 * model__13;
			var m__21 = _this__01 * model__20 + _this__11 * model__21 + _this__21 * model__22 + _this__31 * model__23;
			var m__31 = _this__01 * model__30 + _this__11 * model__31 + _this__21 * model__32 + _this__31 * model__33;
			var m__02 = _this__02 * model__00 + _this__12 * model__01 + _this__22 * model__02 + _this__32 * model__03;
			var m__12 = _this__02 * model__10 + _this__12 * model__11 + _this__22 * model__12 + _this__32 * model__13;
			var m__22 = _this__02 * model__20 + _this__12 * model__21 + _this__22 * model__22 + _this__32 * model__23;
			var m__32 = _this__02 * model__30 + _this__12 * model__31 + _this__22 * model__32 + _this__32 * model__33;
			var m__03 = _this__03 * model__00 + _this__13 * model__01 + _this__23 * model__02 + _this__33 * model__03;
			var m__13 = _this__03 * model__10 + _this__13 * model__11 + _this__23 * model__12 + _this__33 * model__13;
			var m__23 = _this__03 * model__20 + _this__13 * model__21 + _this__23 * model__22 + _this__33 * model__23;
			var m__33 = _this__03 * model__30 + _this__13 * model__31 + _this__23 * model__32 + _this__33 * model__33;
			model__00 = m__00;
			model__10 = m__10;
			model__20 = m__20;
			model__30 = m__30;
			model__01 = m__01;
			model__11 = m__11;
			model__21 = m__21;
			model__31 = m__31;
			model__02 = m__02;
			model__12 = m__12;
			model__22 = m__22;
			model__32 = m__32;
			model__03 = m__03;
			model__13 = m__13;
			model__23 = m__23;
			model__33 = m__33;
			var _this = this.transform;
			var m__00 = transform._00 * model__00 + transform._10 * model__01 + transform._20 * model__02 + transform._30 * model__03;
			var m__10 = transform._00 * model__10 + transform._10 * model__11 + transform._20 * model__12 + transform._30 * model__13;
			var m__20 = transform._00 * model__20 + transform._10 * model__21 + transform._20 * model__22 + transform._30 * model__23;
			var m__30 = transform._00 * model__30 + transform._10 * model__31 + transform._20 * model__32 + transform._30 * model__33;
			var m__01 = transform._01 * model__00 + transform._11 * model__01 + transform._21 * model__02 + transform._31 * model__03;
			var m__11 = transform._01 * model__10 + transform._11 * model__11 + transform._21 * model__12 + transform._31 * model__13;
			var m__21 = transform._01 * model__20 + transform._11 * model__21 + transform._21 * model__22 + transform._31 * model__23;
			var m__31 = transform._01 * model__30 + transform._11 * model__31 + transform._21 * model__32 + transform._31 * model__33;
			var m__02 = transform._02 * model__00 + transform._12 * model__01 + transform._22 * model__02 + transform._32 * model__03;
			var m__12 = transform._02 * model__10 + transform._12 * model__11 + transform._22 * model__12 + transform._32 * model__13;
			var m__22 = transform._02 * model__20 + transform._12 * model__21 + transform._22 * model__22 + transform._32 * model__23;
			var m__32 = transform._02 * model__30 + transform._12 * model__31 + transform._22 * model__32 + transform._32 * model__33;
			var m__03 = transform._03 * model__00 + transform._13 * model__01 + transform._23 * model__02 + transform._33 * model__03;
			var m__13 = transform._03 * model__10 + transform._13 * model__11 + transform._23 * model__12 + transform._33 * model__13;
			var m__23 = transform._03 * model__20 + transform._13 * model__21 + transform._23 * model__22 + transform._33 * model__23;
			var m__33 = transform._03 * model__30 + transform._13 * model__31 + transform._23 * model__32 + transform._33 * model__33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
			this.transform._30 *= this.paralaxX;
			this.transform._31 *= this.paralaxY;
		}
		if(!this.visible) {
			return;
		}
		var oldMulR = paintMode.mulR;
		var oldMulG = paintMode.mulG;
		var oldMulB = paintMode.mulB;
		var oldMulA = paintMode.mulA;
		paintMode.mulR *= this.mulR;
		paintMode.mulG *= this.mulG;
		paintMode.mulB *= this.mulB;
		paintMode.mulA *= this.mulA;
		if(this.drawArea != null) {
			paintMode.render();
			var _this = this.scaleArea;
			var minMax = this.drawArea;
			var _this1 = _this.max;
			var x = minMax.max.x;
			var y = minMax.max.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this1.x = x;
			_this1.y = y;
			var _this1 = _this.min;
			var x = minMax.min.x;
			var y = minMax.min.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this1.x = x;
			_this1.y = y;
			_this.minZ = -869.1168;
			_this.maxZ = -869.1168;
			_this.isEmpty = _this.width() < 0 || _this.height() < 0;
			var _this = this.scaleArea;
			var scaleX = com_gEngine_GEngine.get_i().scaleWidth;
			var scaleY = com_gEngine_GEngine.get_i().scaleHeigth;
			_this.min.x *= scaleX;
			_this.min.y *= scaleY;
			_this.max.x *= scaleX;
			_this.max.y *= scaleY;
			paintMode.adjustRenderArea(this.scaleArea);
		}
		if(this.filter != null) {
			this.filter.filterStart(this,paintMode,transform);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.render(paintMode,this.transform);
		}
		if(this.filter != null) {
			this.filter.filterEnd(paintMode);
		}
		if(this.drawArea != null) {
			paintMode.render();
			paintMode.resetRenderArea();
		}
		paintMode.mulR = oldMulR;
		paintMode.mulG = oldMulG;
		paintMode.mulB = oldMulB;
		paintMode.mulA = oldMulA;
	}
	,drawAreaTemp: null
	,getDrawArea: function(value,transform) {
		if(this.useCustomTransform) {
			var _this = this.transform;
			var m = this.customTransform;
			var m__00 = transform._00 * m._00 + transform._10 * m._01 + transform._20 * m._02 + transform._30 * m._03;
			var m__10 = transform._00 * m._10 + transform._10 * m._11 + transform._20 * m._12 + transform._30 * m._13;
			var m__20 = transform._00 * m._20 + transform._10 * m._21 + transform._20 * m._22 + transform._30 * m._23;
			var m__30 = transform._00 * m._30 + transform._10 * m._31 + transform._20 * m._32 + transform._30 * m._33;
			var m__01 = transform._01 * m._00 + transform._11 * m._01 + transform._21 * m._02 + transform._31 * m._03;
			var m__11 = transform._01 * m._10 + transform._11 * m._11 + transform._21 * m._12 + transform._31 * m._13;
			var m__21 = transform._01 * m._20 + transform._11 * m._21 + transform._21 * m._22 + transform._31 * m._23;
			var m__31 = transform._01 * m._30 + transform._11 * m._31 + transform._21 * m._32 + transform._31 * m._33;
			var m__02 = transform._02 * m._00 + transform._12 * m._01 + transform._22 * m._02 + transform._32 * m._03;
			var m__12 = transform._02 * m._10 + transform._12 * m._11 + transform._22 * m._12 + transform._32 * m._13;
			var m__22 = transform._02 * m._20 + transform._12 * m._21 + transform._22 * m._22 + transform._32 * m._23;
			var m__32 = transform._02 * m._30 + transform._12 * m._31 + transform._22 * m._32 + transform._32 * m._33;
			var m__03 = transform._03 * m._00 + transform._13 * m._01 + transform._23 * m._02 + transform._33 * m._03;
			var m__13 = transform._03 * m._10 + transform._13 * m._11 + transform._23 * m._12 + transform._33 * m._13;
			var m__23 = transform._03 * m._20 + transform._13 * m._21 + transform._23 * m._22 + transform._33 * m._23;
			var m__33 = transform._03 * m._30 + transform._13 * m._31 + transform._23 * m._32 + transform._33 * m._33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		} else {
			var model__00 = 1;
			var model__10 = 0;
			var model__20 = 0;
			var model__30 = -this.pivotX;
			var model__01 = 0;
			var model__11 = 1;
			var model__21 = 0;
			var model__31 = -this.pivotY;
			var model__02 = 0;
			var model__12 = 0;
			var model__22 = 1;
			var model__32 = 0;
			var model__03 = 0;
			var model__13 = 0;
			var model__23 = 0;
			var model__33 = 1;
			var _this__00 = this.scaleX;
			var _this__10 = 0;
			var _this__20 = 0;
			var _this__30 = 0;
			var _this__01 = 0;
			var _this__11 = this.scaleY;
			var _this__21 = 0;
			var _this__31 = 0;
			var _this__02 = 0;
			var _this__12 = 0;
			var _this__22 = 1;
			var _this__32 = 0;
			var _this__03 = 0;
			var _this__13 = 0;
			var _this__23 = 0;
			var _this__33 = 1;
			var m__00 = _this__00 * model__00 + _this__10 * model__01 + _this__20 * model__02 + _this__30 * model__03;
			var m__10 = _this__00 * model__10 + _this__10 * model__11 + _this__20 * model__12 + _this__30 * model__13;
			var m__20 = _this__00 * model__20 + _this__10 * model__21 + _this__20 * model__22 + _this__30 * model__23;
			var m__30 = _this__00 * model__30 + _this__10 * model__31 + _this__20 * model__32 + _this__30 * model__33;
			var m__01 = _this__01 * model__00 + _this__11 * model__01 + _this__21 * model__02 + _this__31 * model__03;
			var m__11 = _this__01 * model__10 + _this__11 * model__11 + _this__21 * model__12 + _this__31 * model__13;
			var m__21 = _this__01 * model__20 + _this__11 * model__21 + _this__21 * model__22 + _this__31 * model__23;
			var m__31 = _this__01 * model__30 + _this__11 * model__31 + _this__21 * model__32 + _this__31 * model__33;
			var m__02 = _this__02 * model__00 + _this__12 * model__01 + _this__22 * model__02 + _this__32 * model__03;
			var m__12 = _this__02 * model__10 + _this__12 * model__11 + _this__22 * model__12 + _this__32 * model__13;
			var m__22 = _this__02 * model__20 + _this__12 * model__21 + _this__22 * model__22 + _this__32 * model__23;
			var m__32 = _this__02 * model__30 + _this__12 * model__31 + _this__22 * model__32 + _this__32 * model__33;
			var m__03 = _this__03 * model__00 + _this__13 * model__01 + _this__23 * model__02 + _this__33 * model__03;
			var m__13 = _this__03 * model__10 + _this__13 * model__11 + _this__23 * model__12 + _this__33 * model__13;
			var m__23 = _this__03 * model__20 + _this__13 * model__21 + _this__23 * model__22 + _this__33 * model__23;
			var m__33 = _this__03 * model__30 + _this__13 * model__31 + _this__23 * model__32 + _this__33 * model__33;
			model__00 = m__00;
			model__10 = m__10;
			model__20 = m__20;
			model__30 = m__30;
			model__01 = m__01;
			model__11 = m__11;
			model__21 = m__21;
			model__31 = m__31;
			model__02 = m__02;
			model__12 = m__12;
			model__22 = m__22;
			model__32 = m__32;
			model__03 = m__03;
			model__13 = m__13;
			model__23 = m__23;
			model__33 = m__33;
			if(this.billboard) {
				var m3 = transform._12;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._13;
				var m7 = transform._23;
				var m8 = transform._33;
				var c00 = transform._11 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
				var m3 = transform._12;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._13;
				var m7 = transform._23;
				var m8 = transform._33;
				var c01 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._11;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._13;
				var m7 = transform._23;
				var m8 = transform._33;
				var c02 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._11;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._12;
				var m7 = transform._22;
				var m8 = transform._32;
				var c03 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var det = transform._00 * c00 - transform._01 * c01 + transform._02 * c02 - transform._03 * c03;
				if(Math.abs(det) < 0.000001) {
					throw haxe_Exception.thrown("determinant is too small");
				}
				var m3 = transform._02;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._23;
				var m8 = transform._33;
				var c10 = transform._01 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._22;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._23;
				var m8 = transform._33;
				var c11 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._03;
				var m7 = transform._23;
				var m8 = transform._33;
				var c12 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._21;
				var m5 = transform._31;
				var m6 = transform._02;
				var m7 = transform._22;
				var m8 = transform._32;
				var c13 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._33;
				var c20 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._32;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._33;
				var c21 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._31;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._33;
				var c22 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._31;
				var m6 = transform._02;
				var m7 = transform._12;
				var m8 = transform._32;
				var c23 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._22;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._23;
				var c30 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._21 * (m3 * m7 - m4 * m6);
				var m3 = transform._02;
				var m4 = transform._12;
				var m5 = transform._22;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._23;
				var c31 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._21;
				var m6 = transform._03;
				var m7 = transform._13;
				var m8 = transform._23;
				var c32 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
				var m3 = transform._01;
				var m4 = transform._11;
				var m5 = transform._21;
				var m6 = transform._02;
				var m7 = transform._12;
				var m8 = transform._22;
				var c33 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
				var invdet = 1.0 / det;
				var rotation__00 = c00 * invdet;
				var rotation__10 = -c01 * invdet;
				var rotation__20 = c02 * invdet;
				var rotation__30 = -c03 * invdet;
				var rotation__01 = -c10 * invdet;
				var rotation__11 = c11 * invdet;
				var rotation__21 = -c12 * invdet;
				var rotation__31 = c13 * invdet;
				var rotation__02 = c20 * invdet;
				var rotation__12 = -c21 * invdet;
				var rotation__22 = c22 * invdet;
				var rotation__32 = -c23 * invdet;
				var rotation__03 = -c30 * invdet;
				var rotation__13 = c31 * invdet;
				var rotation__23 = -c32 * invdet;
				var rotation__33 = c33 * invdet;
				rotation__32 = 0;
				rotation__31 = rotation__32;
				rotation__30 = rotation__31;
				var m__00 = rotation__00 * model__00 + rotation__10 * model__01 + rotation__20 * model__02 + rotation__30 * model__03;
				var m__10 = rotation__00 * model__10 + rotation__10 * model__11 + rotation__20 * model__12 + rotation__30 * model__13;
				var m__20 = rotation__00 * model__20 + rotation__10 * model__21 + rotation__20 * model__22 + rotation__30 * model__23;
				var m__30 = rotation__00 * model__30 + rotation__10 * model__31 + rotation__20 * model__32 + rotation__30 * model__33;
				var m__01 = rotation__01 * model__00 + rotation__11 * model__01 + rotation__21 * model__02 + rotation__31 * model__03;
				var m__11 = rotation__01 * model__10 + rotation__11 * model__11 + rotation__21 * model__12 + rotation__31 * model__13;
				var m__21 = rotation__01 * model__20 + rotation__11 * model__21 + rotation__21 * model__22 + rotation__31 * model__23;
				var m__31 = rotation__01 * model__30 + rotation__11 * model__31 + rotation__21 * model__32 + rotation__31 * model__33;
				var m__02 = rotation__02 * model__00 + rotation__12 * model__01 + rotation__22 * model__02 + rotation__32 * model__03;
				var m__12 = rotation__02 * model__10 + rotation__12 * model__11 + rotation__22 * model__12 + rotation__32 * model__13;
				var m__22 = rotation__02 * model__20 + rotation__12 * model__21 + rotation__22 * model__22 + rotation__32 * model__23;
				var m__32 = rotation__02 * model__30 + rotation__12 * model__31 + rotation__22 * model__32 + rotation__32 * model__33;
				var m__03 = rotation__03 * model__00 + rotation__13 * model__01 + rotation__23 * model__02 + rotation__33 * model__03;
				var m__13 = rotation__03 * model__10 + rotation__13 * model__11 + rotation__23 * model__12 + rotation__33 * model__13;
				var m__23 = rotation__03 * model__20 + rotation__13 * model__21 + rotation__23 * model__22 + rotation__33 * model__23;
				var m__33 = rotation__03 * model__30 + rotation__13 * model__31 + rotation__23 * model__32 + rotation__33 * model__33;
				model__00 = m__00;
				model__10 = m__10;
				model__20 = m__20;
				model__30 = m__30;
				model__01 = m__01;
				model__11 = m__11;
				model__21 = m__21;
				model__31 = m__31;
				model__02 = m__02;
				model__12 = m__12;
				model__22 = m__22;
				model__32 = m__32;
				model__03 = m__03;
				model__13 = m__13;
				model__23 = m__23;
				model__33 = m__33;
			} else {
				var _this__00 = this.cosAng;
				var _this__10 = -this.sinAng;
				var _this__20 = 0;
				var _this__30 = 0;
				var _this__01 = this.sinAng;
				var _this__11 = this.cosAng;
				var _this__21 = 0;
				var _this__31 = 0;
				var _this__02 = 0;
				var _this__12 = 0;
				var _this__22 = 1;
				var _this__32 = 0;
				var _this__03 = 0;
				var _this__13 = 0;
				var _this__23 = 0;
				var _this__33 = 1;
				var m__00 = _this__00 * model__00 + _this__10 * model__01 + _this__20 * model__02 + _this__30 * model__03;
				var m__10 = _this__00 * model__10 + _this__10 * model__11 + _this__20 * model__12 + _this__30 * model__13;
				var m__20 = _this__00 * model__20 + _this__10 * model__21 + _this__20 * model__22 + _this__30 * model__23;
				var m__30 = _this__00 * model__30 + _this__10 * model__31 + _this__20 * model__32 + _this__30 * model__33;
				var m__01 = _this__01 * model__00 + _this__11 * model__01 + _this__21 * model__02 + _this__31 * model__03;
				var m__11 = _this__01 * model__10 + _this__11 * model__11 + _this__21 * model__12 + _this__31 * model__13;
				var m__21 = _this__01 * model__20 + _this__11 * model__21 + _this__21 * model__22 + _this__31 * model__23;
				var m__31 = _this__01 * model__30 + _this__11 * model__31 + _this__21 * model__32 + _this__31 * model__33;
				var m__02 = _this__02 * model__00 + _this__12 * model__01 + _this__22 * model__02 + _this__32 * model__03;
				var m__12 = _this__02 * model__10 + _this__12 * model__11 + _this__22 * model__12 + _this__32 * model__13;
				var m__22 = _this__02 * model__20 + _this__12 * model__21 + _this__22 * model__22 + _this__32 * model__23;
				var m__32 = _this__02 * model__30 + _this__12 * model__31 + _this__22 * model__32 + _this__32 * model__33;
				var m__03 = _this__03 * model__00 + _this__13 * model__01 + _this__23 * model__02 + _this__33 * model__03;
				var m__13 = _this__03 * model__10 + _this__13 * model__11 + _this__23 * model__12 + _this__33 * model__13;
				var m__23 = _this__03 * model__20 + _this__13 * model__21 + _this__23 * model__22 + _this__33 * model__23;
				var m__33 = _this__03 * model__30 + _this__13 * model__31 + _this__23 * model__32 + _this__33 * model__33;
				model__00 = m__00;
				model__10 = m__10;
				model__20 = m__20;
				model__30 = m__30;
				model__01 = m__01;
				model__11 = m__11;
				model__21 = m__21;
				model__31 = m__31;
				model__02 = m__02;
				model__12 = m__12;
				model__22 = m__22;
				model__32 = m__32;
				model__03 = m__03;
				model__13 = m__13;
				model__23 = m__23;
				model__33 = m__33;
			}
			var _this__00 = 1;
			var _this__10 = 0;
			var _this__20 = 0;
			var _this__30 = this.x + this.pivotX + this.offsetX;
			var _this__01 = 0;
			var _this__11 = 1;
			var _this__21 = 0;
			var _this__31 = this.y + this.pivotY + this.offsetY;
			var _this__02 = 0;
			var _this__12 = 0;
			var _this__22 = 1;
			var _this__32 = this.z;
			var _this__03 = 0;
			var _this__13 = 0;
			var _this__23 = 0;
			var _this__33 = 1;
			var m__00 = _this__00 * model__00 + _this__10 * model__01 + _this__20 * model__02 + _this__30 * model__03;
			var m__10 = _this__00 * model__10 + _this__10 * model__11 + _this__20 * model__12 + _this__30 * model__13;
			var m__20 = _this__00 * model__20 + _this__10 * model__21 + _this__20 * model__22 + _this__30 * model__23;
			var m__30 = _this__00 * model__30 + _this__10 * model__31 + _this__20 * model__32 + _this__30 * model__33;
			var m__01 = _this__01 * model__00 + _this__11 * model__01 + _this__21 * model__02 + _this__31 * model__03;
			var m__11 = _this__01 * model__10 + _this__11 * model__11 + _this__21 * model__12 + _this__31 * model__13;
			var m__21 = _this__01 * model__20 + _this__11 * model__21 + _this__21 * model__22 + _this__31 * model__23;
			var m__31 = _this__01 * model__30 + _this__11 * model__31 + _this__21 * model__32 + _this__31 * model__33;
			var m__02 = _this__02 * model__00 + _this__12 * model__01 + _this__22 * model__02 + _this__32 * model__03;
			var m__12 = _this__02 * model__10 + _this__12 * model__11 + _this__22 * model__12 + _this__32 * model__13;
			var m__22 = _this__02 * model__20 + _this__12 * model__21 + _this__22 * model__22 + _this__32 * model__23;
			var m__32 = _this__02 * model__30 + _this__12 * model__31 + _this__22 * model__32 + _this__32 * model__33;
			var m__03 = _this__03 * model__00 + _this__13 * model__01 + _this__23 * model__02 + _this__33 * model__03;
			var m__13 = _this__03 * model__10 + _this__13 * model__11 + _this__23 * model__12 + _this__33 * model__13;
			var m__23 = _this__03 * model__20 + _this__13 * model__21 + _this__23 * model__22 + _this__33 * model__23;
			var m__33 = _this__03 * model__30 + _this__13 * model__31 + _this__23 * model__32 + _this__33 * model__33;
			model__00 = m__00;
			model__10 = m__10;
			model__20 = m__20;
			model__30 = m__30;
			model__01 = m__01;
			model__11 = m__11;
			model__21 = m__21;
			model__31 = m__31;
			model__02 = m__02;
			model__12 = m__12;
			model__22 = m__22;
			model__32 = m__32;
			model__03 = m__03;
			model__13 = m__13;
			model__23 = m__23;
			model__33 = m__33;
			var _this = this.transform;
			var m__00 = transform._00 * model__00 + transform._10 * model__01 + transform._20 * model__02 + transform._30 * model__03;
			var m__10 = transform._00 * model__10 + transform._10 * model__11 + transform._20 * model__12 + transform._30 * model__13;
			var m__20 = transform._00 * model__20 + transform._10 * model__21 + transform._20 * model__22 + transform._30 * model__23;
			var m__30 = transform._00 * model__30 + transform._10 * model__31 + transform._20 * model__32 + transform._30 * model__33;
			var m__01 = transform._01 * model__00 + transform._11 * model__01 + transform._21 * model__02 + transform._31 * model__03;
			var m__11 = transform._01 * model__10 + transform._11 * model__11 + transform._21 * model__12 + transform._31 * model__13;
			var m__21 = transform._01 * model__20 + transform._11 * model__21 + transform._21 * model__22 + transform._31 * model__23;
			var m__31 = transform._01 * model__30 + transform._11 * model__31 + transform._21 * model__32 + transform._31 * model__33;
			var m__02 = transform._02 * model__00 + transform._12 * model__01 + transform._22 * model__02 + transform._32 * model__03;
			var m__12 = transform._02 * model__10 + transform._12 * model__11 + transform._22 * model__12 + transform._32 * model__13;
			var m__22 = transform._02 * model__20 + transform._12 * model__21 + transform._22 * model__22 + transform._32 * model__23;
			var m__32 = transform._02 * model__30 + transform._12 * model__31 + transform._22 * model__32 + transform._32 * model__33;
			var m__03 = transform._03 * model__00 + transform._13 * model__01 + transform._23 * model__02 + transform._33 * model__03;
			var m__13 = transform._03 * model__10 + transform._13 * model__11 + transform._23 * model__12 + transform._33 * model__13;
			var m__23 = transform._03 * model__20 + transform._13 * model__21 + transform._23 * model__22 + transform._33 * model__23;
			var m__33 = transform._03 * model__30 + transform._13 * model__31 + transform._23 * model__32 + transform._33 * model__33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
			this.transform._30 *= this.paralaxX;
			this.transform._31 *= this.paralaxY;
		}
		var _this = this.drawAreaTemp;
		var _this1 = _this.min;
		var x = Infinity;
		var y = Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this1.x = x;
		_this1.y = y;
		var _this1 = _this.max;
		var x = -Infinity;
		var y = -Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this1.x = x;
		_this1.y = y;
		_this.minZ = Infinity;
		_this.maxZ = -Infinity;
		_this.isEmpty = true;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.visible) {
				child.getDrawArea(this.drawAreaTemp,this.transform);
			}
		}
		value.merge(this.drawAreaTemp);
		if(this.drawArea != null) {
			var _this = this.scaleArea;
			var minMax = this.drawArea;
			var _this1 = _this.max;
			var x = minMax.max.x;
			var y = minMax.max.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this1.x = x;
			_this1.y = y;
			var _this1 = _this.min;
			var x = minMax.min.x;
			var y = minMax.min.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this1.x = x;
			_this1.y = y;
			_this.minZ = -869.1168;
			_this.maxZ = -869.1168;
			_this.isEmpty = _this.width() < 0 || _this.height() < 0;
			var _this = this.scaleArea;
			var scaleX = com_gEngine_GEngine.get_i().scaleWidth;
			var scaleY = com_gEngine_GEngine.get_i().scaleHeigth;
			_this.min.x *= scaleX;
			_this.min.y *= scaleY;
			_this.max.x *= scaleX;
			_this.max.y *= scaleY;
			value.intersection(this.scaleArea);
		}
	}
	,playing: null
	,stop: function() {
		this.playing = false;
	}
	,play: function() {
		this.playing = true;
	}
	,setCustomTransform: function(transform) {
		this.useCustomTransform = true;
		var _this = this.customTransform;
		_this._00 = transform._00;
		_this._10 = transform._10;
		_this._20 = transform._20;
		_this._30 = transform._30;
		_this._01 = transform._01;
		_this._11 = transform._11;
		_this._21 = transform._21;
		_this._31 = transform._31;
		_this._02 = transform._02;
		_this._12 = transform._12;
		_this._22 = transform._22;
		_this._32 = transform._32;
		_this._03 = transform._03;
		_this._13 = transform._13;
		_this._23 = transform._23;
		_this._33 = transform._33;
	}
	,update: function(passedTime) {
		if(this.playing) {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.update(passedTime);
			}
		}
	}
	,addChild: function(child) {
		if(child.parent == this) {
			return;
		}
		child.parent = this;
		this.children.push(child);
	}
	,addChildOrder: function(child,functionOrder) {
		child.parent = this;
		var counter = 0;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var childIter = _g1[_g];
			++_g;
			if(functionOrder(childIter,child) >= 0) {
				this.children.splice(counter,0,child);
				return;
			}
			++counter;
		}
		this.children.push(child);
	}
	,remove: function(child) {
		var counter = 0;
		child.parent = null;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var childIter = _g1[_g];
			++_g;
			if(childIter == child) {
				this.children.splice(counter,1);
				return;
			}
			++counter;
		}
	}
	,destroy: function() {
		this.children.splice(0,this.children.length);
	}
	,removeFromParent: function() {
		if(this.parent != null) {
			this.parent.remove(this);
		}
	}
	,sort: function(functionSort) {
		haxe_ds_ArraySort.sort(this.children,functionSort);
	}
	,getTransformation: function() {
		var transform = new kha_math_FastMatrix3(1,0,-this.pivotX,0,1,-this.pivotY,0,0,1);
		var m__00 = this.scaleX;
		var m__10 = 0;
		var m__20 = 0;
		var m__01 = 0;
		var m__11 = this.scaleY;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		transform = new kha_math_FastMatrix3(transform._00 * m__00 + transform._10 * m__01 + transform._20 * m__02,transform._00 * m__10 + transform._10 * m__11 + transform._20 * m__12,transform._00 * m__20 + transform._10 * m__21 + transform._20 * m__22,transform._01 * m__00 + transform._11 * m__01 + transform._21 * m__02,transform._01 * m__10 + transform._11 * m__11 + transform._21 * m__12,transform._01 * m__20 + transform._11 * m__21 + transform._21 * m__22,transform._02 * m__00 + transform._12 * m__01 + transform._22 * m__02,transform._02 * m__10 + transform._12 * m__11 + transform._22 * m__12,transform._02 * m__20 + transform._12 * m__21 + transform._22 * m__22);
		var m__00 = this.cosAng;
		var m__10 = -this.sinAng;
		var m__20 = 0;
		var m__01 = this.sinAng;
		var m__11 = this.cosAng;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		transform = new kha_math_FastMatrix3(transform._00 * m__00 + transform._10 * m__01 + transform._20 * m__02,transform._00 * m__10 + transform._10 * m__11 + transform._20 * m__12,transform._00 * m__20 + transform._10 * m__21 + transform._20 * m__22,transform._01 * m__00 + transform._11 * m__01 + transform._21 * m__02,transform._01 * m__10 + transform._11 * m__11 + transform._21 * m__12,transform._01 * m__20 + transform._11 * m__21 + transform._21 * m__22,transform._02 * m__00 + transform._12 * m__01 + transform._22 * m__02,transform._02 * m__10 + transform._12 * m__11 + transform._22 * m__12,transform._02 * m__20 + transform._12 * m__21 + transform._22 * m__22);
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = this.x;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = this.y;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		transform = new kha_math_FastMatrix3(transform._00 * m__00 + transform._10 * m__01 + transform._20 * m__02,transform._00 * m__10 + transform._10 * m__11 + transform._20 * m__12,transform._00 * m__20 + transform._10 * m__21 + transform._20 * m__22,transform._01 * m__00 + transform._11 * m__01 + transform._21 * m__02,transform._01 * m__10 + transform._11 * m__11 + transform._21 * m__12,transform._01 * m__20 + transform._11 * m__21 + transform._21 * m__22,transform._02 * m__00 + transform._12 * m__01 + transform._22 * m__02,transform._02 * m__10 + transform._12 * m__11 + transform._22 * m__12,transform._02 * m__20 + transform._12 * m__21 + transform._22 * m__22);
		return transform;
	}
	,getFinalTransformation: function() {
		if(this.parent != null) {
			var _this = this.parent.getFinalTransformation();
			var transform = new kha_math_FastMatrix3(1,0,-this.pivotX,0,1,-this.pivotY,0,0,1);
			var m__00 = this.scaleX;
			var m__10 = 0;
			var m__20 = 0;
			var m__01 = 0;
			var m__11 = this.scaleY;
			var m__21 = 0;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = 1;
			transform = new kha_math_FastMatrix3(transform._00 * m__00 + transform._10 * m__01 + transform._20 * m__02,transform._00 * m__10 + transform._10 * m__11 + transform._20 * m__12,transform._00 * m__20 + transform._10 * m__21 + transform._20 * m__22,transform._01 * m__00 + transform._11 * m__01 + transform._21 * m__02,transform._01 * m__10 + transform._11 * m__11 + transform._21 * m__12,transform._01 * m__20 + transform._11 * m__21 + transform._21 * m__22,transform._02 * m__00 + transform._12 * m__01 + transform._22 * m__02,transform._02 * m__10 + transform._12 * m__11 + transform._22 * m__12,transform._02 * m__20 + transform._12 * m__21 + transform._22 * m__22);
			var m__00 = this.cosAng;
			var m__10 = -this.sinAng;
			var m__20 = 0;
			var m__01 = this.sinAng;
			var m__11 = this.cosAng;
			var m__21 = 0;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = 1;
			transform = new kha_math_FastMatrix3(transform._00 * m__00 + transform._10 * m__01 + transform._20 * m__02,transform._00 * m__10 + transform._10 * m__11 + transform._20 * m__12,transform._00 * m__20 + transform._10 * m__21 + transform._20 * m__22,transform._01 * m__00 + transform._11 * m__01 + transform._21 * m__02,transform._01 * m__10 + transform._11 * m__11 + transform._21 * m__12,transform._01 * m__20 + transform._11 * m__21 + transform._21 * m__22,transform._02 * m__00 + transform._12 * m__01 + transform._22 * m__02,transform._02 * m__10 + transform._12 * m__11 + transform._22 * m__12,transform._02 * m__20 + transform._12 * m__21 + transform._22 * m__22);
			var m__00 = 1;
			var m__10 = 0;
			var m__20 = this.x;
			var m__01 = 0;
			var m__11 = 1;
			var m__21 = this.y;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = 1;
			transform = new kha_math_FastMatrix3(transform._00 * m__00 + transform._10 * m__01 + transform._20 * m__02,transform._00 * m__10 + transform._10 * m__11 + transform._20 * m__12,transform._00 * m__20 + transform._10 * m__21 + transform._20 * m__22,transform._01 * m__00 + transform._11 * m__01 + transform._21 * m__02,transform._01 * m__10 + transform._11 * m__11 + transform._21 * m__12,transform._01 * m__20 + transform._11 * m__21 + transform._21 * m__22,transform._02 * m__00 + transform._12 * m__01 + transform._22 * m__02,transform._02 * m__10 + transform._12 * m__11 + transform._22 * m__12,transform._02 * m__20 + transform._12 * m__21 + transform._22 * m__22);
			var m = transform;
			return new kha_math_FastMatrix3(_this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02,_this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12,_this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22,_this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02,_this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12,_this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22,_this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02,_this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12,_this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22);
		} else {
			var transform = new kha_math_FastMatrix3(1,0,-this.pivotX,0,1,-this.pivotY,0,0,1);
			var m__00 = this.scaleX;
			var m__10 = 0;
			var m__20 = 0;
			var m__01 = 0;
			var m__11 = this.scaleY;
			var m__21 = 0;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = 1;
			transform = new kha_math_FastMatrix3(transform._00 * m__00 + transform._10 * m__01 + transform._20 * m__02,transform._00 * m__10 + transform._10 * m__11 + transform._20 * m__12,transform._00 * m__20 + transform._10 * m__21 + transform._20 * m__22,transform._01 * m__00 + transform._11 * m__01 + transform._21 * m__02,transform._01 * m__10 + transform._11 * m__11 + transform._21 * m__12,transform._01 * m__20 + transform._11 * m__21 + transform._21 * m__22,transform._02 * m__00 + transform._12 * m__01 + transform._22 * m__02,transform._02 * m__10 + transform._12 * m__11 + transform._22 * m__12,transform._02 * m__20 + transform._12 * m__21 + transform._22 * m__22);
			var m__00 = this.cosAng;
			var m__10 = -this.sinAng;
			var m__20 = 0;
			var m__01 = this.sinAng;
			var m__11 = this.cosAng;
			var m__21 = 0;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = 1;
			transform = new kha_math_FastMatrix3(transform._00 * m__00 + transform._10 * m__01 + transform._20 * m__02,transform._00 * m__10 + transform._10 * m__11 + transform._20 * m__12,transform._00 * m__20 + transform._10 * m__21 + transform._20 * m__22,transform._01 * m__00 + transform._11 * m__01 + transform._21 * m__02,transform._01 * m__10 + transform._11 * m__11 + transform._21 * m__12,transform._01 * m__20 + transform._11 * m__21 + transform._21 * m__22,transform._02 * m__00 + transform._12 * m__01 + transform._22 * m__02,transform._02 * m__10 + transform._12 * m__11 + transform._22 * m__12,transform._02 * m__20 + transform._12 * m__21 + transform._22 * m__22);
			var m__00 = 1;
			var m__10 = 0;
			var m__20 = this.x;
			var m__01 = 0;
			var m__11 = 1;
			var m__21 = this.y;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = 1;
			transform = new kha_math_FastMatrix3(transform._00 * m__00 + transform._10 * m__01 + transform._20 * m__02,transform._00 * m__10 + transform._10 * m__11 + transform._20 * m__12,transform._00 * m__20 + transform._10 * m__21 + transform._20 * m__22,transform._01 * m__00 + transform._11 * m__01 + transform._21 * m__02,transform._01 * m__10 + transform._11 * m__11 + transform._21 * m__12,transform._01 * m__20 + transform._11 * m__21 + transform._21 * m__22,transform._02 * m__00 + transform._12 * m__01 + transform._22 * m__02,transform._02 * m__10 + transform._12 * m__11 + transform._22 * m__12,transform._02 * m__20 + transform._12 * m__21 + transform._22 * m__22);
			return transform;
		}
	}
	,offsetX: null
	,offsetY: null
	,rotation: null
	,set_rotation: function(value) {
		if(value != this.rotation) {
			this.rotation = value;
			this.sinAng = Math.sin(value);
			this.cosAng = Math.cos(value);
		}
		return this.rotation;
	}
	,set_drawArea: function(value) {
		value.min.x = value.min.x;
		value.min.y = value.min.y;
		value.max.x = value.max.x;
		value.max.y = value.max.y;
		return this.drawArea = value;
	}
	,get_length: function() {
		return this.children.length;
	}
	,__class__: com_gEngine_display_Layer
	,__properties__: {set_rotation:"set_rotation",get_length:"get_length",set_drawArea:"set_drawArea"}
};
var com_gEngine_display_Sprite = function(name) {
	this.mipMapFilter = 2;
	this.textureFilter = 1;
	this.dataUnique = false;
	this.textureId = -1;
	this.mulBlue = 1;
	this.mulGreen = 1;
	this.mulRed = 1;
	this.addAlpha = 0;
	this.addBlue = 0;
	this.addGreen = 0;
	this.addRed = 0;
	this.colorTransform = false;
	this.tanSkewY = 0;
	this.tanSkewX = 0;
	this.skewY = 0;
	this.skewX = 0;
	this.alpha = 1;
	this.visible = true;
	this.offsetZ = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.pivotY = 0;
	this.pivotX = 0;
	this.blend = 0;
	this.scaleZ = 1;
	this.scaleY = 1;
	this.scaleX = 1;
	this.z = 0;
	this.y = 0;
	this.x = 0;
	if(name != null) {
		this.animationData = com_basicDisplay_SpriteSheetDB.get_i().getData(name);
	}
	this.transform = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.paintInfo = new com_gEngine_painters_PaintInfo();
	this.timeline = new com_gEngine_helpers_Timeline(0.033333333333333333,this.animationData.frames.length,this.animationData.labels);
	this.scaleX = 1;
	this.scaleY = 1;
	this.set_rotation(0);
	this.cosAng = Math.cos(this.rotation);
	this.sinAng = Math.sin(this.rotation);
	this.textureId = this.animationData.texturesID;
	this.alphaPainters = com_gEngine_GEngine.get_i().alphaPainters;
	this.colorPainters = com_gEngine_GEngine.get_i().colorPainters;
};
$hxClasses["com.gEngine.display.Sprite"] = com_gEngine_display_Sprite;
com_gEngine_display_Sprite.__name__ = "com.gEngine.display.Sprite";
com_gEngine_display_Sprite.__interfaces__ = [com_gEngine_display_IRotation,com_gEngine_display_IAnimation];
com_gEngine_display_Sprite.checkBatchAlpha = function(paintMode,paintInfo,count,painter) {
	if(!(paintMode.canBatch(paintInfo,count,painter) && (paintInfo.texture == painter.textureID && paintInfo.mipMapFilter == painter.mipMapFilter && paintInfo.textureFilter == painter.filter && painter.counter + count * painter.dataPerVertex <= painter.MAX_VERTEX_PER_BUFFER * painter.dataPerVertex))) {
		paintMode.render();
		paintMode.changePainter(painter,paintInfo);
	}
};
com_gEngine_display_Sprite.checkBatchColor = function(paintMode,paintInfo,count,painter) {
	if(!(paintMode.canBatch(paintInfo,count,painter) && (paintInfo.texture == painter.textureID && paintInfo.mipMapFilter == painter.mipMapFilter && paintInfo.textureFilter == painter.filter && painter.counter + count * painter.dataPerVertex <= painter.MAX_VERTEX_PER_BUFFER * painter.dataPerVertex))) {
		paintMode.render();
		paintMode.changePainter(painter,paintInfo);
	}
};
com_gEngine_display_Sprite.writeColorVertex = function(x,y,z,u,v,redMul,greenMul,blueMul,alphaMul,redAdd,greenAdd,blueAdd,alphaAdd,buffer,offsetPos) {
	buffer.setFloat32(offsetPos * 4,x,true);
	buffer.setFloat32((offsetPos + 1) * 4,y,true);
	buffer.setFloat32((offsetPos + 2) * 4,z,true);
	buffer.setFloat32((offsetPos + 3) * 4,u,true);
	buffer.setFloat32((offsetPos + 4) * 4,v,true);
	buffer.setFloat32((offsetPos + 5) * 4,redMul,true);
	buffer.setFloat32((offsetPos + 6) * 4,greenMul,true);
	buffer.setFloat32((offsetPos + 7) * 4,blueMul,true);
	buffer.setFloat32((offsetPos + 8) * 4,alphaMul,true);
	buffer.setFloat32((offsetPos + 9) * 4,redAdd,true);
	buffer.setFloat32((offsetPos + 10) * 4,greenAdd,true);
	buffer.setFloat32((offsetPos + 11) * 4,blueAdd,true);
	buffer.setFloat32((offsetPos + 12) * 4,alphaAdd,true);
};
com_gEngine_display_Sprite.prototype = {
	x: null
	,y: null
	,z: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,rotation: null
	,blend: null
	,cosAng: null
	,sinAng: null
	,pivotX: null
	,pivotY: null
	,offsetX: null
	,offsetY: null
	,offsetZ: null
	,animationData: null
	,mTileSheetId: null
	,parent: null
	,visible: null
	,alpha: null
	,skewX: null
	,skewY: null
	,tanSkewX: null
	,tanSkewY: null
	,colorTransform: null
	,addRed: null
	,addGreen: null
	,addBlue: null
	,addAlpha: null
	,mulRed: null
	,mulGreen: null
	,mulBlue: null
	,textureId: null
	,dataUnique: null
	,textureFilter: null
	,mipMapFilter: null
	,transform: null
	,rotation3d: null
	,billboard: null
	,customPainter: null
	,filter: null
	,timeline: null
	,alphaPainters: null
	,colorPainters: null
	,paintInfo: null
	,clone: function() {
		var cl = new com_gEngine_display_Sprite();
		cl.animationData = this.animationData;
		return cl;
	}
	,recenter: function() {
		var rec = this.localDrawArea();
		this.pivotX = rec.get_x() + rec.get_width() / 2;
		this.pivotY = rec.get_y() + rec.get_height() / 2;
	}
	,rotation3D: function(yaw,pitch,roll) {
		var sy = Math.sin(yaw);
		var cy = Math.cos(yaw);
		var sx = Math.sin(pitch);
		var cx = Math.cos(pitch);
		var sz = Math.sin(roll);
		var cz = Math.cos(roll);
		var rotation = new kha_math_FastMatrix4(cx * cy,cx * sy * sz - sx * cz,cx * sy * cz + sx * sz,0,sx * cy,sx * sy * sz + cx * cz,sx * sy * cz - cx * sz,0,-sy,cy * sz,cy * cz,0,0,0,0,1);
		if(this.rotation3d == null) {
			this.rotation3d = rotation;
		} else {
			var _this = this.rotation3d;
			_this._00 = rotation._00;
			_this._10 = rotation._10;
			_this._20 = rotation._20;
			_this._30 = rotation._30;
			_this._01 = rotation._01;
			_this._11 = rotation._11;
			_this._21 = rotation._21;
			_this._31 = rotation._31;
			_this._02 = rotation._02;
			_this._12 = rotation._12;
			_this._22 = rotation._22;
			_this._32 = rotation._32;
			_this._03 = rotation._03;
			_this._13 = rotation._13;
			_this._23 = rotation._23;
			_this._33 = rotation._33;
		}
	}
	,set_rotation: function(value) {
		if(value != this.rotation) {
			this.rotation = value;
			this.sinAng = Math.sin(value);
			this.cosAng = Math.cos(value);
		}
		return this.rotation;
	}
	,update: function(dt) {
		this.timeline.update(dt);
	}
	,makeAnimationDataUnique: function() {
		this.animationData = this.animationData.clone();
		this.dataUnique = true;
	}
	,getAnimationData: function() {
		if(!this.dataUnique) {
			this.makeAnimationDataUnique();
		}
		return this.animationData;
	}
	,calculateTransform: function(transform) {
		var _this = this.transform;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = 0;
		var m__30 = 0;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = 0;
		var m__31 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var m__32 = 0;
		var m__03 = 0;
		var m__13 = 0;
		var m__23 = 0;
		var m__33 = 1;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._30 = m__30;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._31 = m__31;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
		_this._32 = m__32;
		_this._03 = m__03;
		_this._13 = m__13;
		_this._23 = m__23;
		_this._33 = m__33;
		this.transform._00 = this.cosAng * this.scaleX;
		this.transform._10 = -this.sinAng * this.scaleY;
		this.transform._30 = this.x + this.pivotX;
		this.transform._01 = this.sinAng * this.scaleX;
		this.transform._11 = this.cosAng * this.scaleY;
		this.transform._31 = this.y + this.pivotY;
		this.transform._22 = this.scaleZ;
		this.transform._32 = this.z;
		if(this.billboard) {
			var m3 = transform._12;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._13;
			var m7 = transform._23;
			var m8 = transform._33;
			var c00 = transform._11 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
			var m3 = transform._12;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._13;
			var m7 = transform._23;
			var m8 = transform._33;
			var c01 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._11;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._13;
			var m7 = transform._23;
			var m8 = transform._33;
			var c02 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._11;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._12;
			var m7 = transform._22;
			var m8 = transform._32;
			var c03 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var det = transform._00 * c00 - transform._01 * c01 + transform._02 * c02 - transform._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = transform._02;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._23;
			var m8 = transform._33;
			var c10 = transform._01 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._23;
			var m8 = transform._33;
			var c11 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._03;
			var m7 = transform._23;
			var m8 = transform._33;
			var c12 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._02;
			var m7 = transform._22;
			var m8 = transform._32;
			var c13 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._33;
			var c20 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._33;
			var c21 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._31;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._33;
			var c22 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._31;
			var m6 = transform._02;
			var m7 = transform._12;
			var m8 = transform._32;
			var c23 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._22;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._23;
			var c30 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._21 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._22;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._23;
			var c31 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._21;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._23;
			var c32 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._21;
			var m6 = transform._02;
			var m7 = transform._12;
			var m8 = transform._22;
			var c33 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var rotation__00 = c00 * invdet;
			var rotation__10 = -c01 * invdet;
			var rotation__20 = c02 * invdet;
			var rotation__30 = -c03 * invdet;
			var rotation__01 = -c10 * invdet;
			var rotation__11 = c11 * invdet;
			var rotation__21 = -c12 * invdet;
			var rotation__31 = c13 * invdet;
			var rotation__02 = c20 * invdet;
			var rotation__12 = -c21 * invdet;
			var rotation__22 = c22 * invdet;
			var rotation__32 = -c23 * invdet;
			var rotation__03 = -c30 * invdet;
			var rotation__13 = c31 * invdet;
			var rotation__23 = -c32 * invdet;
			var rotation__33 = c33 * invdet;
			rotation__32 = 0;
			rotation__31 = rotation__32;
			rotation__30 = rotation__31;
			var _this = this.transform;
			var _this1 = this.transform;
			var m__00 = _this1._00 * rotation__00 + _this1._10 * rotation__01 + _this1._20 * rotation__02 + _this1._30 * rotation__03;
			var m__10 = _this1._00 * rotation__10 + _this1._10 * rotation__11 + _this1._20 * rotation__12 + _this1._30 * rotation__13;
			var m__20 = _this1._00 * rotation__20 + _this1._10 * rotation__21 + _this1._20 * rotation__22 + _this1._30 * rotation__23;
			var m__30 = _this1._00 * rotation__30 + _this1._10 * rotation__31 + _this1._20 * rotation__32 + _this1._30 * rotation__33;
			var m__01 = _this1._01 * rotation__00 + _this1._11 * rotation__01 + _this1._21 * rotation__02 + _this1._31 * rotation__03;
			var m__11 = _this1._01 * rotation__10 + _this1._11 * rotation__11 + _this1._21 * rotation__12 + _this1._31 * rotation__13;
			var m__21 = _this1._01 * rotation__20 + _this1._11 * rotation__21 + _this1._21 * rotation__22 + _this1._31 * rotation__23;
			var m__31 = _this1._01 * rotation__30 + _this1._11 * rotation__31 + _this1._21 * rotation__32 + _this1._31 * rotation__33;
			var m__02 = _this1._02 * rotation__00 + _this1._12 * rotation__01 + _this1._22 * rotation__02 + _this1._32 * rotation__03;
			var m__12 = _this1._02 * rotation__10 + _this1._12 * rotation__11 + _this1._22 * rotation__12 + _this1._32 * rotation__13;
			var m__22 = _this1._02 * rotation__20 + _this1._12 * rotation__21 + _this1._22 * rotation__22 + _this1._32 * rotation__23;
			var m__32 = _this1._02 * rotation__30 + _this1._12 * rotation__31 + _this1._22 * rotation__32 + _this1._32 * rotation__33;
			var m__03 = _this1._03 * rotation__00 + _this1._13 * rotation__01 + _this1._23 * rotation__02 + _this1._33 * rotation__03;
			var m__13 = _this1._03 * rotation__10 + _this1._13 * rotation__11 + _this1._23 * rotation__12 + _this1._33 * rotation__13;
			var m__23 = _this1._03 * rotation__20 + _this1._13 * rotation__21 + _this1._23 * rotation__22 + _this1._33 * rotation__23;
			var m__33 = _this1._03 * rotation__30 + _this1._13 * rotation__31 + _this1._23 * rotation__32 + _this1._33 * rotation__33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		}
		if(this.rotation3d != null) {
			var _this = this.transform;
			var _this1 = this.transform;
			var m = this.rotation3d;
			var m__00 = _this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03;
			var m__10 = _this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13;
			var m__20 = _this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23;
			var m__30 = _this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33;
			var m__01 = _this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03;
			var m__11 = _this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13;
			var m__21 = _this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23;
			var m__31 = _this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33;
			var m__02 = _this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03;
			var m__12 = _this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13;
			var m__22 = _this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23;
			var m__32 = _this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33;
			var m__03 = _this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03;
			var m__13 = _this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13;
			var m__23 = _this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23;
			var m__33 = _this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		}
	}
	,render: function(paintMode,transform) {
		if(!this.visible) {
			return;
		}
		if(this.filter != null) {
			this.filter.filterStart(this,paintMode,transform);
		}
		var _this = this.transform;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = 0;
		var m__30 = 0;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = 0;
		var m__31 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var m__32 = 0;
		var m__03 = 0;
		var m__13 = 0;
		var m__23 = 0;
		var m__33 = 1;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._30 = m__30;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._31 = m__31;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
		_this._32 = m__32;
		_this._03 = m__03;
		_this._13 = m__13;
		_this._23 = m__23;
		_this._33 = m__33;
		this.transform._00 = this.cosAng * this.scaleX;
		this.transform._10 = -this.sinAng * this.scaleY;
		this.transform._30 = this.x + this.pivotX;
		this.transform._01 = this.sinAng * this.scaleX;
		this.transform._11 = this.cosAng * this.scaleY;
		this.transform._31 = this.y + this.pivotY;
		this.transform._22 = this.scaleZ;
		this.transform._32 = this.z;
		if(this.billboard) {
			var m3 = transform._12;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._13;
			var m7 = transform._23;
			var m8 = transform._33;
			var c00 = transform._11 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
			var m3 = transform._12;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._13;
			var m7 = transform._23;
			var m8 = transform._33;
			var c01 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._11;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._13;
			var m7 = transform._23;
			var m8 = transform._33;
			var c02 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._11;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._12;
			var m7 = transform._22;
			var m8 = transform._32;
			var c03 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var det = transform._00 * c00 - transform._01 * c01 + transform._02 * c02 - transform._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = transform._02;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._23;
			var m8 = transform._33;
			var c10 = transform._01 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._23;
			var m8 = transform._33;
			var c11 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._03;
			var m7 = transform._23;
			var m8 = transform._33;
			var c12 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._02;
			var m7 = transform._22;
			var m8 = transform._32;
			var c13 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._33;
			var c20 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._33;
			var c21 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._31;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._33;
			var c22 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._31;
			var m6 = transform._02;
			var m7 = transform._12;
			var m8 = transform._32;
			var c23 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._22;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._23;
			var c30 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._21 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._22;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._23;
			var c31 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._21;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._23;
			var c32 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._21;
			var m6 = transform._02;
			var m7 = transform._12;
			var m8 = transform._22;
			var c33 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var rotation__00 = c00 * invdet;
			var rotation__10 = -c01 * invdet;
			var rotation__20 = c02 * invdet;
			var rotation__30 = -c03 * invdet;
			var rotation__01 = -c10 * invdet;
			var rotation__11 = c11 * invdet;
			var rotation__21 = -c12 * invdet;
			var rotation__31 = c13 * invdet;
			var rotation__02 = c20 * invdet;
			var rotation__12 = -c21 * invdet;
			var rotation__22 = c22 * invdet;
			var rotation__32 = -c23 * invdet;
			var rotation__03 = -c30 * invdet;
			var rotation__13 = c31 * invdet;
			var rotation__23 = -c32 * invdet;
			var rotation__33 = c33 * invdet;
			rotation__32 = 0;
			rotation__31 = rotation__32;
			rotation__30 = rotation__31;
			var _this = this.transform;
			var _this1 = this.transform;
			var m__00 = _this1._00 * rotation__00 + _this1._10 * rotation__01 + _this1._20 * rotation__02 + _this1._30 * rotation__03;
			var m__10 = _this1._00 * rotation__10 + _this1._10 * rotation__11 + _this1._20 * rotation__12 + _this1._30 * rotation__13;
			var m__20 = _this1._00 * rotation__20 + _this1._10 * rotation__21 + _this1._20 * rotation__22 + _this1._30 * rotation__23;
			var m__30 = _this1._00 * rotation__30 + _this1._10 * rotation__31 + _this1._20 * rotation__32 + _this1._30 * rotation__33;
			var m__01 = _this1._01 * rotation__00 + _this1._11 * rotation__01 + _this1._21 * rotation__02 + _this1._31 * rotation__03;
			var m__11 = _this1._01 * rotation__10 + _this1._11 * rotation__11 + _this1._21 * rotation__12 + _this1._31 * rotation__13;
			var m__21 = _this1._01 * rotation__20 + _this1._11 * rotation__21 + _this1._21 * rotation__22 + _this1._31 * rotation__23;
			var m__31 = _this1._01 * rotation__30 + _this1._11 * rotation__31 + _this1._21 * rotation__32 + _this1._31 * rotation__33;
			var m__02 = _this1._02 * rotation__00 + _this1._12 * rotation__01 + _this1._22 * rotation__02 + _this1._32 * rotation__03;
			var m__12 = _this1._02 * rotation__10 + _this1._12 * rotation__11 + _this1._22 * rotation__12 + _this1._32 * rotation__13;
			var m__22 = _this1._02 * rotation__20 + _this1._12 * rotation__21 + _this1._22 * rotation__22 + _this1._32 * rotation__23;
			var m__32 = _this1._02 * rotation__30 + _this1._12 * rotation__31 + _this1._22 * rotation__32 + _this1._32 * rotation__33;
			var m__03 = _this1._03 * rotation__00 + _this1._13 * rotation__01 + _this1._23 * rotation__02 + _this1._33 * rotation__03;
			var m__13 = _this1._03 * rotation__10 + _this1._13 * rotation__11 + _this1._23 * rotation__12 + _this1._33 * rotation__13;
			var m__23 = _this1._03 * rotation__20 + _this1._13 * rotation__21 + _this1._23 * rotation__22 + _this1._33 * rotation__23;
			var m__33 = _this1._03 * rotation__30 + _this1._13 * rotation__31 + _this1._23 * rotation__32 + _this1._33 * rotation__33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		}
		if(this.rotation3d != null) {
			var _this = this.transform;
			var _this1 = this.transform;
			var m = this.rotation3d;
			var m__00 = _this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03;
			var m__10 = _this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13;
			var m__20 = _this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23;
			var m__30 = _this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33;
			var m__01 = _this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03;
			var m__11 = _this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13;
			var m__21 = _this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23;
			var m__31 = _this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33;
			var m__02 = _this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03;
			var m__12 = _this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13;
			var m__22 = _this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23;
			var m__32 = _this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33;
			var m__03 = _this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03;
			var m__13 = _this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13;
			var m__23 = _this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23;
			var m__33 = _this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		}
		var m = this.transform;
		var model = new kha_math_FastMatrix4(transform._00 * m._00 + transform._10 * m._01 + transform._20 * m._02 + transform._30 * m._03,transform._00 * m._10 + transform._10 * m._11 + transform._20 * m._12 + transform._30 * m._13,transform._00 * m._20 + transform._10 * m._21 + transform._20 * m._22 + transform._30 * m._23,transform._00 * m._30 + transform._10 * m._31 + transform._20 * m._32 + transform._30 * m._33,transform._01 * m._00 + transform._11 * m._01 + transform._21 * m._02 + transform._31 * m._03,transform._01 * m._10 + transform._11 * m._11 + transform._21 * m._12 + transform._31 * m._13,transform._01 * m._20 + transform._11 * m._21 + transform._21 * m._22 + transform._31 * m._23,transform._01 * m._30 + transform._11 * m._31 + transform._21 * m._32 + transform._31 * m._33,transform._02 * m._00 + transform._12 * m._01 + transform._22 * m._02 + transform._32 * m._03,transform._02 * m._10 + transform._12 * m._11 + transform._22 * m._12 + transform._32 * m._13,transform._02 * m._20 + transform._12 * m._21 + transform._22 * m._22 + transform._32 * m._23,transform._02 * m._30 + transform._12 * m._31 + transform._22 * m._32 + transform._32 * m._33,transform._03 * m._00 + transform._13 * m._01 + transform._23 * m._02 + transform._33 * m._03,transform._03 * m._10 + transform._13 * m._11 + transform._23 * m._12 + transform._33 * m._13,transform._03 * m._20 + transform._13 * m._21 + transform._23 * m._22 + transform._33 * m._23,transform._03 * m._30 + transform._13 * m._31 + transform._23 * m._32 + transform._33 * m._33);
		this.paintInfo.blend = this.blend;
		if(this.animationData.hasMipMap) {
			this.paintInfo.mipMapFilter = this.mipMapFilter;
		} else {
			this.paintInfo.mipMapFilter = 0;
		}
		this.paintInfo.textureFilter = this.textureFilter;
		this.paintInfo.texture = this.textureId;
		if(this.colorTransform || paintMode.colorTransform || this.customPainter != null) {
			var frame = this.animationData.frames[this.timeline.currentFrame];
			var vertexs = frame.vertexs;
			var cameraScale = paintMode.camera.scale;
			var uvs = frame.UVs;
			var painter = this.colorPainters[this.blend];
			var paintInfo = this.paintInfo;
			var count = frame.vertexs.length * 0.5 | 0;
			if(!(paintMode.canBatch(paintInfo,count,painter) && (paintInfo.texture == painter.textureID && paintInfo.mipMapFilter == painter.mipMapFilter && paintInfo.textureFilter == painter.filter && painter.counter + count * painter.dataPerVertex <= painter.MAX_VERTEX_PER_BUFFER * painter.dataPerVertex))) {
				paintMode.render();
				paintMode.changePainter(painter,paintInfo);
			}
			var buffer = painter.buffer;
			var vertexBufferCounter = painter.counter;
			var redMul = this.mulRed * paintMode.mulR;
			var greenMul = this.mulGreen * paintMode.mulG;
			var blueMul = this.mulBlue * paintMode.mulB;
			var alphaMul = this.alpha * paintMode.mulA;
			var redAdd = this.addRed;
			var greenAdd = this.addGreen;
			var blueAdd = this.addBlue;
			var alphaAdd = this.addAlpha;
			var vertexIndex = 0;
			var uvIndex = 0;
			var _g = 0;
			while(_g < 4) {
				var k = _g++;
				var vertexX = vertexs[vertexIndex] - this.pivotX;
				var vertexY = vertexs[vertexIndex + 1] - this.pivotY;
				var x = model._00 * vertexX + model._10 * vertexY + model._30;
				var y = model._01 * vertexX + model._11 * vertexY + model._31;
				var z = model._02 * vertexX + model._12 * vertexY + model._32;
				if(z == null) {
					z = 0;
				}
				if(y == null) {
					y = 0;
				}
				if(x == null) {
					x = 0;
				}
				var pos_x = x;
				var pos_y = y;
				var pos_z = z;
				var x1 = pos_x + this.offsetX * cameraScale;
				var y1 = pos_y + this.offsetY * cameraScale;
				var z1 = pos_z + this.offsetZ;
				var u = uvs[uvIndex++];
				var v = uvs[uvIndex++];
				buffer.setFloat32(vertexBufferCounter * 4,x1,true);
				buffer.setFloat32((vertexBufferCounter + 1) * 4,y1,true);
				buffer.setFloat32((vertexBufferCounter + 2) * 4,z1,true);
				buffer.setFloat32((vertexBufferCounter + 3) * 4,u,true);
				buffer.setFloat32((vertexBufferCounter + 4) * 4,v,true);
				buffer.setFloat32((vertexBufferCounter + 5) * 4,redMul,true);
				buffer.setFloat32((vertexBufferCounter + 6) * 4,greenMul,true);
				buffer.setFloat32((vertexBufferCounter + 7) * 4,blueMul,true);
				buffer.setFloat32((vertexBufferCounter + 8) * 4,alphaMul,true);
				buffer.setFloat32((vertexBufferCounter + 9) * 4,redAdd,true);
				buffer.setFloat32((vertexBufferCounter + 10) * 4,greenAdd,true);
				buffer.setFloat32((vertexBufferCounter + 11) * 4,blueAdd,true);
				buffer.setFloat32((vertexBufferCounter + 12) * 4,alphaAdd,true);
				vertexBufferCounter += 13;
				vertexIndex += 2;
			}
			painter.setVertexDataCounter(vertexBufferCounter);
		} else {
			this.renderWithAlpha(paintMode,model);
		}
		if(this.filter != null) {
			this.filter.filterEnd(paintMode);
		}
	}
	,renderFastColor: function(paintMode,transform,frame) {
		this.paintInfo.blend = this.blend;
		this.paintInfo.mipMapFilter = this.mipMapFilter;
		this.paintInfo.textureFilter = this.textureFilter;
		this.paintInfo.texture = this.textureId;
		this.timeline.currentFrame = frame;
		var frame = this.animationData.frames[this.timeline.currentFrame];
		var vertexs = frame.vertexs;
		var cameraScale = paintMode.camera.scale;
		var uvs = frame.UVs;
		var painter = this.colorPainters[this.blend];
		var paintInfo = this.paintInfo;
		var count = frame.vertexs.length * 0.5 | 0;
		if(!(paintMode.canBatch(paintInfo,count,painter) && (paintInfo.texture == painter.textureID && paintInfo.mipMapFilter == painter.mipMapFilter && paintInfo.textureFilter == painter.filter && painter.counter + count * painter.dataPerVertex <= painter.MAX_VERTEX_PER_BUFFER * painter.dataPerVertex))) {
			paintMode.render();
			paintMode.changePainter(painter,paintInfo);
		}
		var buffer = painter.buffer;
		var vertexBufferCounter = painter.counter;
		var redMul = this.mulRed * paintMode.mulR;
		var greenMul = this.mulGreen * paintMode.mulG;
		var blueMul = this.mulBlue * paintMode.mulB;
		var alphaMul = this.alpha * paintMode.mulA;
		var redAdd = this.addRed;
		var greenAdd = this.addGreen;
		var blueAdd = this.addBlue;
		var alphaAdd = this.addAlpha;
		var vertexIndex = 0;
		var uvIndex = 0;
		var _g = 0;
		while(_g < 4) {
			var k = _g++;
			var vertexX = vertexs[vertexIndex] - this.pivotX;
			var vertexY = vertexs[vertexIndex + 1] - this.pivotY;
			var x = transform._00 * vertexX + transform._10 * vertexY + transform._30;
			var y = transform._01 * vertexX + transform._11 * vertexY + transform._31;
			var z = transform._02 * vertexX + transform._12 * vertexY + transform._32;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var pos_x = x;
			var pos_y = y;
			var pos_z = z;
			var x1 = pos_x + this.offsetX * cameraScale;
			var y1 = pos_y + this.offsetY * cameraScale;
			var z1 = pos_z + this.offsetZ;
			var u = uvs[uvIndex++];
			var v = uvs[uvIndex++];
			buffer.setFloat32(vertexBufferCounter * 4,x1,true);
			buffer.setFloat32((vertexBufferCounter + 1) * 4,y1,true);
			buffer.setFloat32((vertexBufferCounter + 2) * 4,z1,true);
			buffer.setFloat32((vertexBufferCounter + 3) * 4,u,true);
			buffer.setFloat32((vertexBufferCounter + 4) * 4,v,true);
			buffer.setFloat32((vertexBufferCounter + 5) * 4,redMul,true);
			buffer.setFloat32((vertexBufferCounter + 6) * 4,greenMul,true);
			buffer.setFloat32((vertexBufferCounter + 7) * 4,blueMul,true);
			buffer.setFloat32((vertexBufferCounter + 8) * 4,alphaMul,true);
			buffer.setFloat32((vertexBufferCounter + 9) * 4,redAdd,true);
			buffer.setFloat32((vertexBufferCounter + 10) * 4,greenAdd,true);
			buffer.setFloat32((vertexBufferCounter + 11) * 4,blueAdd,true);
			buffer.setFloat32((vertexBufferCounter + 12) * 4,alphaAdd,true);
			vertexBufferCounter += 13;
			vertexIndex += 2;
		}
		painter.setVertexDataCounter(vertexBufferCounter);
	}
	,renderFastAlpha: function(paintMode,transform,frame) {
		this.paintInfo.blend = this.blend;
		this.paintInfo.mipMapFilter = this.mipMapFilter;
		this.paintInfo.textureFilter = this.textureFilter;
		this.paintInfo.texture = this.textureId;
		this.timeline.currentFrame = frame;
		this.renderWithAlpha(paintMode,transform);
	}
	,renderWithAlpha: function(paintMode,model) {
		var frame = this.animationData.frames[this.timeline.currentFrame];
		var vertexs = frame.vertexs;
		var cameraScale = paintMode.camera.scale;
		var uvs = frame.UVs;
		var painter = this.alphaPainters[this.blend];
		var paintInfo = this.paintInfo;
		var count = frame.vertexs.length * 0.5 | 0;
		if(!(paintMode.canBatch(paintInfo,count,painter) && (paintInfo.texture == painter.textureID && paintInfo.mipMapFilter == painter.mipMapFilter && paintInfo.textureFilter == painter.filter && painter.counter + count * painter.dataPerVertex <= painter.MAX_VERTEX_PER_BUFFER * painter.dataPerVertex))) {
			paintMode.render();
			paintMode.changePainter(painter,paintInfo);
		}
		var buffer = painter.buffer;
		var vertexBufferCounter = painter.counter;
		var vertexIndex = 0;
		var uvIndex = 0;
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			var vertexX = vertexs[vertexIndex] - this.pivotX;
			var vertexY = vertexs[vertexIndex + 1] - this.pivotY;
			var x = model._00 * vertexX + model._10 * vertexY + model._30;
			var y = model._01 * vertexX + model._11 * vertexY + model._31;
			var z = model._02 * vertexX + model._12 * vertexY + model._32;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var pos_x = x;
			var pos_y = y;
			var pos_z = z;
			var v = pos_x + this.offsetX * cameraScale;
			buffer.setFloat32(vertexBufferCounter * 4,v,true);
			var v1 = pos_y + this.offsetY * cameraScale;
			buffer.setFloat32((vertexBufferCounter + 1) * 4,v1,true);
			var v2 = pos_z;
			buffer.setFloat32((vertexBufferCounter + 2) * 4,v2,true);
			var v3 = uvs[uvIndex];
			buffer.setFloat32((vertexBufferCounter + 3) * 4,v3,true);
			var v4 = uvs[uvIndex + 1];
			buffer.setFloat32((vertexBufferCounter + 4) * 4,v4,true);
			var v5 = this.alpha;
			buffer.setFloat32((vertexBufferCounter + 5) * 4,v5,true);
			vertexIndex += 2;
			vertexBufferCounter += 6;
			uvIndex += 2;
		}
		painter.setVertexDataCounter(vertexBufferCounter);
	}
	,fastMult: function(model,x,y) {
		return new kha_math_FastVector3(model._00 * x + model._10 * y + model._30,model._01 * x + model._11 * y + model._31,model._02 * x + model._12 * y + model._32);
	}
	,renderWithColorTransform: function(paintMode,model) {
		var frame = this.animationData.frames[this.timeline.currentFrame];
		var vertexs = frame.vertexs;
		var cameraScale = paintMode.camera.scale;
		var uvs = frame.UVs;
		var painter = this.colorPainters[this.blend];
		var paintInfo = this.paintInfo;
		var count = frame.vertexs.length * 0.5 | 0;
		if(!(paintMode.canBatch(paintInfo,count,painter) && (paintInfo.texture == painter.textureID && paintInfo.mipMapFilter == painter.mipMapFilter && paintInfo.textureFilter == painter.filter && painter.counter + count * painter.dataPerVertex <= painter.MAX_VERTEX_PER_BUFFER * painter.dataPerVertex))) {
			paintMode.render();
			paintMode.changePainter(painter,paintInfo);
		}
		var buffer = painter.buffer;
		var vertexBufferCounter = painter.counter;
		var redMul = this.mulRed * paintMode.mulR;
		var greenMul = this.mulGreen * paintMode.mulG;
		var blueMul = this.mulBlue * paintMode.mulB;
		var alphaMul = this.alpha * paintMode.mulA;
		var redAdd = this.addRed;
		var greenAdd = this.addGreen;
		var blueAdd = this.addBlue;
		var alphaAdd = this.addAlpha;
		var vertexIndex = 0;
		var uvIndex = 0;
		var _g = 0;
		while(_g < 4) {
			var k = _g++;
			var vertexX = vertexs[vertexIndex] - this.pivotX;
			var vertexY = vertexs[vertexIndex + 1] - this.pivotY;
			var x = model._00 * vertexX + model._10 * vertexY + model._30;
			var y = model._01 * vertexX + model._11 * vertexY + model._31;
			var z = model._02 * vertexX + model._12 * vertexY + model._32;
			if(z == null) {
				z = 0;
			}
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var pos_x = x;
			var pos_y = y;
			var pos_z = z;
			var x1 = pos_x + this.offsetX * cameraScale;
			var y1 = pos_y + this.offsetY * cameraScale;
			var z1 = pos_z + this.offsetZ;
			var u = uvs[uvIndex++];
			var v = uvs[uvIndex++];
			buffer.setFloat32(vertexBufferCounter * 4,x1,true);
			buffer.setFloat32((vertexBufferCounter + 1) * 4,y1,true);
			buffer.setFloat32((vertexBufferCounter + 2) * 4,z1,true);
			buffer.setFloat32((vertexBufferCounter + 3) * 4,u,true);
			buffer.setFloat32((vertexBufferCounter + 4) * 4,v,true);
			buffer.setFloat32((vertexBufferCounter + 5) * 4,redMul,true);
			buffer.setFloat32((vertexBufferCounter + 6) * 4,greenMul,true);
			buffer.setFloat32((vertexBufferCounter + 7) * 4,blueMul,true);
			buffer.setFloat32((vertexBufferCounter + 8) * 4,alphaMul,true);
			buffer.setFloat32((vertexBufferCounter + 9) * 4,redAdd,true);
			buffer.setFloat32((vertexBufferCounter + 10) * 4,greenAdd,true);
			buffer.setFloat32((vertexBufferCounter + 11) * 4,blueAdd,true);
			buffer.setFloat32((vertexBufferCounter + 12) * 4,alphaAdd,true);
			vertexBufferCounter += 13;
			vertexIndex += 2;
		}
		painter.setVertexDataCounter(vertexBufferCounter);
	}
	,set_skewX: function(value) {
		this.tanSkewX = Math.tan(value);
		return this.skewX = value;
	}
	,set_skewY: function(value) {
		this.tanSkewY = Math.tan(value);
		return this.skewY = value;
	}
	,removeFromParent: function() {
		if(this.parent != null) {
			this.parent.remove(this);
			this.parent = null;
		}
	}
	,colorAdd: function(r,g,b,a) {
		if(a == null) {
			a = 0;
		}
		if(b == null) {
			b = 0;
		}
		if(g == null) {
			g = 0;
		}
		if(r == null) {
			r = 0;
		}
		this.addRed = r;
		this.addGreen = g;
		this.addBlue = b;
		this.addAlpha = a;
		this.colorTransform = !(this.mulRed == 1 && this.mulGreen == 1 && this.mulBlue == 1 && this.alpha == 1 && this.addRed == 0 && this.addGreen == 0 && this.addBlue == 0 && this.addAlpha == 0);
	}
	,colorMultiplication: function(r,g,b,a) {
		if(a == null) {
			a = 1;
		}
		if(b == null) {
			b = 1;
		}
		if(g == null) {
			g = 1;
		}
		if(r == null) {
			r = 1;
		}
		this.mulRed = r;
		this.mulGreen = g;
		this.mulBlue = b;
		this.alpha = a;
		this.colorTransform = !(this.mulRed == 1 && this.mulGreen == 1 && this.mulBlue == 1 && this.alpha == 1 && this.addRed == 0 && this.addGreen == 0 && this.addBlue == 0 && this.addAlpha == 0);
	}
	,resetColorTransform: function() {
		this.colorAdd();
		this.colorMultiplication();
	}
	,overrideColorTransform: function() {
		if(this.mulRed == 1 && this.mulGreen == 1 && this.mulBlue == 1 && this.alpha == 1 && this.addRed == 0 && this.addGreen == 0 && this.addBlue == 0) {
			return this.addAlpha == 0;
		} else {
			return false;
		}
	}
	,getTransformation: function() {
		return null;
	}
	,getFinalTransformation: function() {
		return null;
	}
	,getDrawArea: function(area,transform) {
		var _this = this.transform;
		var m__00 = 1;
		var m__10 = 0;
		var m__20 = 0;
		var m__30 = 0;
		var m__01 = 0;
		var m__11 = 1;
		var m__21 = 0;
		var m__31 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var m__32 = 0;
		var m__03 = 0;
		var m__13 = 0;
		var m__23 = 0;
		var m__33 = 1;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._30 = m__30;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._31 = m__31;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
		_this._32 = m__32;
		_this._03 = m__03;
		_this._13 = m__13;
		_this._23 = m__23;
		_this._33 = m__33;
		this.transform._00 = this.cosAng * this.scaleX;
		this.transform._10 = -this.sinAng * this.scaleY;
		this.transform._30 = this.x + this.pivotX;
		this.transform._01 = this.sinAng * this.scaleX;
		this.transform._11 = this.cosAng * this.scaleY;
		this.transform._31 = this.y + this.pivotY;
		this.transform._22 = this.scaleZ;
		this.transform._32 = this.z;
		if(this.billboard) {
			var m3 = transform._12;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._13;
			var m7 = transform._23;
			var m8 = transform._33;
			var c00 = transform._11 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
			var m3 = transform._12;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._13;
			var m7 = transform._23;
			var m8 = transform._33;
			var c01 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._11;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._13;
			var m7 = transform._23;
			var m8 = transform._33;
			var c02 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._11;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._12;
			var m7 = transform._22;
			var m8 = transform._32;
			var c03 = transform._10 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var det = transform._00 * c00 - transform._01 * c01 + transform._02 * c02 - transform._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = transform._02;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._23;
			var m8 = transform._33;
			var c10 = transform._01 * (m4 * m8 - m5 * m7) - transform._21 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._22;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._23;
			var m8 = transform._33;
			var c11 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._03;
			var m7 = transform._23;
			var m8 = transform._33;
			var c12 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._21;
			var m5 = transform._31;
			var m6 = transform._02;
			var m7 = transform._22;
			var m8 = transform._32;
			var c13 = transform._00 * (m4 * m8 - m5 * m7) - transform._20 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._33;
			var c20 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._31 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._32;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._33;
			var c21 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._31;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._33;
			var c22 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._31;
			var m6 = transform._02;
			var m7 = transform._12;
			var m8 = transform._32;
			var c23 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._30 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._22;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._23;
			var c30 = transform._01 * (m4 * m8 - m5 * m7) - transform._11 * (m3 * m8 - m5 * m6) + transform._21 * (m3 * m7 - m4 * m6);
			var m3 = transform._02;
			var m4 = transform._12;
			var m5 = transform._22;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._23;
			var c31 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._21;
			var m6 = transform._03;
			var m7 = transform._13;
			var m8 = transform._23;
			var c32 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
			var m3 = transform._01;
			var m4 = transform._11;
			var m5 = transform._21;
			var m6 = transform._02;
			var m7 = transform._12;
			var m8 = transform._22;
			var c33 = transform._00 * (m4 * m8 - m5 * m7) - transform._10 * (m3 * m8 - m5 * m6) + transform._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var rotation__00 = c00 * invdet;
			var rotation__10 = -c01 * invdet;
			var rotation__20 = c02 * invdet;
			var rotation__30 = -c03 * invdet;
			var rotation__01 = -c10 * invdet;
			var rotation__11 = c11 * invdet;
			var rotation__21 = -c12 * invdet;
			var rotation__31 = c13 * invdet;
			var rotation__02 = c20 * invdet;
			var rotation__12 = -c21 * invdet;
			var rotation__22 = c22 * invdet;
			var rotation__32 = -c23 * invdet;
			var rotation__03 = -c30 * invdet;
			var rotation__13 = c31 * invdet;
			var rotation__23 = -c32 * invdet;
			var rotation__33 = c33 * invdet;
			rotation__32 = 0;
			rotation__31 = rotation__32;
			rotation__30 = rotation__31;
			var _this = this.transform;
			var _this1 = this.transform;
			var m__00 = _this1._00 * rotation__00 + _this1._10 * rotation__01 + _this1._20 * rotation__02 + _this1._30 * rotation__03;
			var m__10 = _this1._00 * rotation__10 + _this1._10 * rotation__11 + _this1._20 * rotation__12 + _this1._30 * rotation__13;
			var m__20 = _this1._00 * rotation__20 + _this1._10 * rotation__21 + _this1._20 * rotation__22 + _this1._30 * rotation__23;
			var m__30 = _this1._00 * rotation__30 + _this1._10 * rotation__31 + _this1._20 * rotation__32 + _this1._30 * rotation__33;
			var m__01 = _this1._01 * rotation__00 + _this1._11 * rotation__01 + _this1._21 * rotation__02 + _this1._31 * rotation__03;
			var m__11 = _this1._01 * rotation__10 + _this1._11 * rotation__11 + _this1._21 * rotation__12 + _this1._31 * rotation__13;
			var m__21 = _this1._01 * rotation__20 + _this1._11 * rotation__21 + _this1._21 * rotation__22 + _this1._31 * rotation__23;
			var m__31 = _this1._01 * rotation__30 + _this1._11 * rotation__31 + _this1._21 * rotation__32 + _this1._31 * rotation__33;
			var m__02 = _this1._02 * rotation__00 + _this1._12 * rotation__01 + _this1._22 * rotation__02 + _this1._32 * rotation__03;
			var m__12 = _this1._02 * rotation__10 + _this1._12 * rotation__11 + _this1._22 * rotation__12 + _this1._32 * rotation__13;
			var m__22 = _this1._02 * rotation__20 + _this1._12 * rotation__21 + _this1._22 * rotation__22 + _this1._32 * rotation__23;
			var m__32 = _this1._02 * rotation__30 + _this1._12 * rotation__31 + _this1._22 * rotation__32 + _this1._32 * rotation__33;
			var m__03 = _this1._03 * rotation__00 + _this1._13 * rotation__01 + _this1._23 * rotation__02 + _this1._33 * rotation__03;
			var m__13 = _this1._03 * rotation__10 + _this1._13 * rotation__11 + _this1._23 * rotation__12 + _this1._33 * rotation__13;
			var m__23 = _this1._03 * rotation__20 + _this1._13 * rotation__21 + _this1._23 * rotation__22 + _this1._33 * rotation__23;
			var m__33 = _this1._03 * rotation__30 + _this1._13 * rotation__31 + _this1._23 * rotation__32 + _this1._33 * rotation__33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		}
		if(this.rotation3d != null) {
			var _this = this.transform;
			var _this1 = this.transform;
			var m = this.rotation3d;
			var m__00 = _this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03;
			var m__10 = _this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13;
			var m__20 = _this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23;
			var m__30 = _this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33;
			var m__01 = _this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03;
			var m__11 = _this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13;
			var m__21 = _this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23;
			var m__31 = _this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33;
			var m__02 = _this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03;
			var m__12 = _this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13;
			var m__22 = _this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23;
			var m__32 = _this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33;
			var m__03 = _this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03;
			var m__13 = _this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13;
			var m__23 = _this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23;
			var m__33 = _this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		}
		var m = this.transform;
		var model__00 = transform._00 * m._00 + transform._10 * m._01 + transform._20 * m._02 + transform._30 * m._03;
		var model__10 = transform._00 * m._10 + transform._10 * m._11 + transform._20 * m._12 + transform._30 * m._13;
		var model__20 = transform._00 * m._20 + transform._10 * m._21 + transform._20 * m._22 + transform._30 * m._23;
		var model__30 = transform._00 * m._30 + transform._10 * m._31 + transform._20 * m._32 + transform._30 * m._33;
		var model__01 = transform._01 * m._00 + transform._11 * m._01 + transform._21 * m._02 + transform._31 * m._03;
		var model__11 = transform._01 * m._10 + transform._11 * m._11 + transform._21 * m._12 + transform._31 * m._13;
		var model__21 = transform._01 * m._20 + transform._11 * m._21 + transform._21 * m._22 + transform._31 * m._23;
		var model__31 = transform._01 * m._30 + transform._11 * m._31 + transform._21 * m._32 + transform._31 * m._33;
		var model__02 = transform._02 * m._00 + transform._12 * m._01 + transform._22 * m._02 + transform._32 * m._03;
		var model__12 = transform._02 * m._10 + transform._12 * m._11 + transform._22 * m._12 + transform._32 * m._13;
		var model__22 = transform._02 * m._20 + transform._12 * m._21 + transform._22 * m._22 + transform._32 * m._23;
		var model__32 = transform._02 * m._30 + transform._12 * m._31 + transform._22 * m._32 + transform._32 * m._33;
		var model__03 = transform._03 * m._00 + transform._13 * m._01 + transform._23 * m._02 + transform._33 * m._03;
		var model__13 = transform._03 * m._10 + transform._13 * m._11 + transform._23 * m._12 + transform._33 * m._13;
		var model__23 = transform._03 * m._20 + transform._13 * m._21 + transform._23 * m._22 + transform._33 * m._23;
		var model__33 = transform._03 * m._30 + transform._13 * m._31 + transform._23 * m._32 + transform._33 * m._33;
		var drawArea = this.animationData.frames[this.timeline.currentFrame].drawArea;
		if(drawArea.maxX != 16) {
			drawArea.minX = drawArea.minX;
		}
		var x = drawArea.minX - this.pivotX;
		var y = drawArea.minY - this.pivotY;
		var z = 0;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = 1;
		var _this_x = 0;
		var _this_y = 0;
		var _this_z = 0;
		var _this_w = 1;
		_this_x = model__00 * value_x + model__10 * value_y + model__20 * value_z + model__30 * value_w;
		_this_y = model__01 * value_x + model__11 * value_y + model__21 * value_z + model__31 * value_w;
		_this_z = model__02 * value_x + model__12 * value_y + model__22 * value_z + model__32 * value_w;
		_this_w = model__03 * value_x + model__13 * value_y + model__23 * value_z + model__33 * value_w;
		var x = this.offsetX;
		var y = this.offsetY;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vec_x = x;
		var vec_y = y;
		var vec_z = 0;
		var vec_w = 1;
		var x = _this_x + vec_x;
		var y = _this_y + vec_y;
		var z = _this_z + vec_z;
		var w = _this_w + vec_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var multvec_x = x;
		var multvec_y = y;
		var multvec_z = z;
		var multvec_w = w;
		if(area.min.x > multvec_x) {
			area.min.x = multvec_x;
		}
		if(area.min.y > multvec_y) {
			area.min.y = multvec_y;
		}
		if(area.max.x < multvec_x) {
			area.max.x = multvec_x;
		}
		if(area.max.y < multvec_y) {
			area.max.y = multvec_y;
		}
		if(area.minZ > multvec_z) {
			area.minZ = multvec_z;
		}
		if(area.maxZ < multvec_z) {
			area.maxZ = multvec_z;
		}
		area.isEmpty = false;
		var x = drawArea.maxX - this.pivotX;
		var y = drawArea.minY - this.pivotY;
		var z = 0;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = 1;
		var _this_x = 0;
		var _this_y = 0;
		var _this_z = 0;
		var _this_w = 1;
		_this_x = model__00 * value_x + model__10 * value_y + model__20 * value_z + model__30 * value_w;
		_this_y = model__01 * value_x + model__11 * value_y + model__21 * value_z + model__31 * value_w;
		_this_z = model__02 * value_x + model__12 * value_y + model__22 * value_z + model__32 * value_w;
		_this_w = model__03 * value_x + model__13 * value_y + model__23 * value_z + model__33 * value_w;
		var x = this.offsetX;
		var y = this.offsetY;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vec_x = x;
		var vec_y = y;
		var vec_z = 0;
		var vec_w = 1;
		var x = _this_x + vec_x;
		var y = _this_y + vec_y;
		var z = _this_z + vec_z;
		var w = _this_w + vec_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var multvec_x = x;
		var multvec_y = y;
		var multvec_z = z;
		var multvec_w = w;
		if(area.min.x > multvec_x) {
			area.min.x = multvec_x;
		}
		if(area.min.y > multvec_y) {
			area.min.y = multvec_y;
		}
		if(area.max.x < multvec_x) {
			area.max.x = multvec_x;
		}
		if(area.max.y < multvec_y) {
			area.max.y = multvec_y;
		}
		if(area.minZ > multvec_z) {
			area.minZ = multvec_z;
		}
		if(area.maxZ < multvec_z) {
			area.maxZ = multvec_z;
		}
		area.isEmpty = false;
		var x = drawArea.minX - this.pivotX;
		var y = drawArea.maxY - this.pivotY;
		var z = 0;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = 1;
		var _this_x = 0;
		var _this_y = 0;
		var _this_z = 0;
		var _this_w = 1;
		_this_x = model__00 * value_x + model__10 * value_y + model__20 * value_z + model__30 * value_w;
		_this_y = model__01 * value_x + model__11 * value_y + model__21 * value_z + model__31 * value_w;
		_this_z = model__02 * value_x + model__12 * value_y + model__22 * value_z + model__32 * value_w;
		_this_w = model__03 * value_x + model__13 * value_y + model__23 * value_z + model__33 * value_w;
		var x = this.offsetX;
		var y = this.offsetY;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vec_x = x;
		var vec_y = y;
		var vec_z = 0;
		var vec_w = 1;
		var x = _this_x + vec_x;
		var y = _this_y + vec_y;
		var z = _this_z + vec_z;
		var w = _this_w + vec_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var multvec_x = x;
		var multvec_y = y;
		var multvec_z = z;
		var multvec_w = w;
		if(area.min.x > multvec_x) {
			area.min.x = multvec_x;
		}
		if(area.min.y > multvec_y) {
			area.min.y = multvec_y;
		}
		if(area.max.x < multvec_x) {
			area.max.x = multvec_x;
		}
		if(area.max.y < multvec_y) {
			area.max.y = multvec_y;
		}
		if(area.minZ > multvec_z) {
			area.minZ = multvec_z;
		}
		if(area.maxZ < multvec_z) {
			area.maxZ = multvec_z;
		}
		area.isEmpty = false;
		var x = drawArea.maxX - this.pivotX;
		var y = drawArea.maxY - this.pivotY;
		var z = 0;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = 1;
		var _this_x = 0;
		var _this_y = 0;
		var _this_z = 0;
		var _this_w = 1;
		_this_x = model__00 * value_x + model__10 * value_y + model__20 * value_z + model__30 * value_w;
		_this_y = model__01 * value_x + model__11 * value_y + model__21 * value_z + model__31 * value_w;
		_this_z = model__02 * value_x + model__12 * value_y + model__22 * value_z + model__32 * value_w;
		_this_w = model__03 * value_x + model__13 * value_y + model__23 * value_z + model__33 * value_w;
		var x = this.offsetX;
		var y = this.offsetY;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vec_x = x;
		var vec_y = y;
		var vec_z = 0;
		var vec_w = 1;
		var x = _this_x + vec_x;
		var y = _this_y + vec_y;
		var z = _this_z + vec_z;
		var w = _this_w + vec_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var multvec_x = x;
		var multvec_y = y;
		var multvec_z = z;
		var multvec_w = w;
		if(area.min.x > multvec_x) {
			area.min.x = multvec_x;
		}
		if(area.min.y > multvec_y) {
			area.min.y = multvec_y;
		}
		if(area.max.x < multvec_x) {
			area.max.x = multvec_x;
		}
		if(area.max.y < multvec_y) {
			area.max.y = multvec_y;
		}
		if(area.minZ > multvec_z) {
			area.minZ = multvec_z;
		}
		if(area.maxZ < multvec_z) {
			area.maxZ = multvec_z;
		}
		area.isEmpty = false;
	}
	,localDrawArea: function() {
		return this.animationData.frames[this.timeline.currentFrame].drawArea;
	}
	,width: function() {
		return this.animationData.frames[this.timeline.currentFrame].drawArea.get_width();
	}
	,height: function() {
		return this.animationData.frames[this.timeline.currentFrame].drawArea.get_height();
	}
	,get_smooth: function() {
		return this.textureFilter == 1;
	}
	,set_smooth: function(value) {
		if(!value) {
			this.textureFilter = 0;
			this.mipMapFilter = 1;
		} else {
			this.textureFilter = 1;
			this.mipMapFilter = 2;
		}
		return value;
	}
	,__class__: com_gEngine_display_Sprite
	,__properties__: {set_smooth:"set_smooth",get_smooth:"get_smooth",set_skewY:"set_skewY",set_skewX:"set_skewX",set_rotation:"set_rotation"}
};
var com_gEngine_display_Stage = function() {
	this.timeScale = 1;
	this.world = new com_gEngine_display_Layer();
	this.cameras = [new com_gEngine_display_Camera()];
	this.cameras[0].world = this.world;
	this.matrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.painterMode = new com_gEngine_painters_PaintMode();
	this.subStages = [];
};
$hxClasses["com.gEngine.display.Stage"] = com_gEngine_display_Stage;
com_gEngine_display_Stage.__name__ = "com.gEngine.display.Stage";
com_gEngine_display_Stage.prototype = {
	world: null
	,cameras: null
	,matrix: null
	,painterMode: null
	,subStages: null
	,timeScale: null
	,color: null
	,update: function() {
		var dt = com_TimeManager.delta * this.timeScale;
		this.world.update(dt);
		var _g = 0;
		var _g1 = this.cameras;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.update(dt);
		}
		var _g = 0;
		var _g1 = this.subStages;
		while(_g < _g1.length) {
			var stage = _g1[_g];
			++_g;
			stage.update();
		}
	}
	,render: function(needRefresh) {
		var _g = 0;
		var _g1 = this.cameras;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.render(this.painterMode,this.matrix,needRefresh);
			if(this.painterMode.vertexCount() > 0) {
				this.painterMode.render();
			}
		}
		var _g = 0;
		var _g1 = this.subStages;
		while(_g < _g1.length) {
			var stage = _g1[_g];
			++_g;
			stage.render(needRefresh);
		}
	}
	,addSubStage: function(stage) {
		this.subStages.push(stage);
	}
	,removeSubStage: function(stage) {
		HxOverrides.remove(this.subStages,stage);
	}
	,addChild: function(child) {
		this.world.addChild(child);
	}
	,defaultCamera: function() {
		return this.cameras[0];
	}
	,cameraAt: function(index) {
		return this.cameras[index];
	}
	,addCamera: function(camera) {
		camera.world = this.world;
		camera.clearColor = this.color;
		return this.cameras.push(camera);
	}
	,destroy: function() {
		var _g = 0;
		var _g1 = this.cameras;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.destroy();
		}
	}
	,get_y: function() {
		return this.matrix._31;
	}
	,set_y: function(value) {
		return this.matrix._31 = value;
	}
	,get_x: function() {
		return this.matrix._30;
	}
	,set_x: function(value) {
		return this.matrix._30 = value;
	}
	,set_color: function(val) {
		this.color = val;
		var _g = 0;
		var _g1 = this.cameras;
		while(_g < _g1.length) {
			var camera = _g1[_g];
			++_g;
			camera.clearColor = val;
		}
		return val;
	}
	,__class__: com_gEngine_display_Stage
	,__properties__: {set_color:"set_color",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var com_gEngine_display_Text = function(type) {
	this.alpha = 1;
	this.bakedQuadCache = new kha_AlignedQuad();
	this.sourceFontSize = 0;
	this.fontSize = 0;
	this.text = "";
	com_gEngine_display_Layer.call(this);
	this.mLetters = [];
	this.mType = type;
	this.sourceFontSize = this.fontSize = com_basicDisplay_SpriteSheetDB.get_i().getData(type).fontSize;
	this.set_color(-1);
};
$hxClasses["com.gEngine.display.Text"] = com_gEngine_display_Text;
com_gEngine_display_Text.__name__ = "com.gEngine.display.Text";
com_gEngine_display_Text.findIndex = function(charCode) {
	var blocks = kha_KravurImage.charBlocks;
	var offset = 0;
	var _g = 0;
	var _g1 = blocks.length / 2 | 0;
	while(_g < _g1) {
		var i = _g++;
		var start = blocks[i * 2];
		var end = blocks[i * 2 + 1];
		if(charCode >= start && charCode <= end) {
			return offset + charCode - start;
		}
		offset += end - start + 1;
	}
	return 0;
};
com_gEngine_display_Text.__super__ = com_gEngine_display_Layer;
com_gEngine_display_Text.prototype = $extend(com_gEngine_display_Layer.prototype,{
	mLetters: null
	,mType: null
	,text: null
	,fontSize: null
	,smooth: null
	,sourceFontSize: null
	,color: null
	,bakedQuadCache: null
	,alpha: null
	,set_text: function(aText) {
		if(this.text == aText) {
			return this.text;
		}
		this.text = aText;
		var counter = 0;
		var displayLetter;
		var currentWordLetters = [];
		var font = kha_Assets.fonts.get(this.mType)._get(this.fontSize);
		var xpos = 0.;
		var ypos = 0.;
		var i = 0;
		var scaleFont = this.fontSize / this.sourceFontSize;
		var fontSize = Math.round(this.fontSize / this.sourceFontSize * this.sourceFontSize);
		while(i < this.text.length) {
			if(this.text.charAt(i) == "\n") {
				++i;
				ypos += fontSize;
				xpos = 0;
				this.bakedQuadCache.xadvance = 0;
				continue;
			}
			var charCodeIndex = com_gEngine_display_Text.findIndex(this.text.charCodeAt(i));
			var q = font.getBakedQuad(this.bakedQuadCache,charCodeIndex,xpos,ypos);
			if(q != null) {
				if(this.mLetters.length <= counter) {
					displayLetter = new com_gEngine_display_Sprite(this.mType);
					displayLetter.set_smooth(this.smooth);
					displayLetter.colorMultiplication(((this.color & 16711680) >>> 16) * 0.00392156862745098,((this.color & 65280) >>> 8) * 0.00392156862745098,(this.color & 255) * 0.00392156862745098,(this.color >>> 24) * 0.00392156862745098);
					this.addChild(displayLetter);
					this.mLetters.push(displayLetter);
				} else {
					displayLetter = this.mLetters[counter];
					if(displayLetter.parent == null) {
						this.addChild(displayLetter);
					}
				}
				++counter;
				displayLetter.timeline.gotoAndStop(charCodeIndex);
				currentWordLetters.push(displayLetter);
				displayLetter.x = xpos;
				displayLetter.y = ypos;
				displayLetter.scaleX = displayLetter.scaleY = scaleFont;
				xpos += q.xadvance;
			}
			++i;
		}
		var _g = counter;
		var _g1 = this.mLetters.length;
		while(_g < _g1) {
			var k = _g++;
			this.mLetters[k].removeFromParent();
		}
		return aText;
	}
	,set_smooth: function(value) {
		var _g = 0;
		var _g1 = this.mLetters;
		while(_g < _g1.length) {
			var sprite = _g1[_g];
			++_g;
			sprite.set_smooth(value);
		}
		this.smooth = value;
		return this.smooth;
	}
	,getLetter: function(aId) {
		return this.mLetters[aId];
	}
	,letterCount: function() {
		return this.mLetters.length;
	}
	,width: function() {
		var min = Infinity;
		var max = -Infinity;
		var _g = 0;
		var _g1 = this.mLetters;
		while(_g < _g1.length) {
			var letter = _g1[_g];
			++_g;
			if(letter.x < min) {
				min = letter.x;
			} else if(letter.x + letter.width() > max) {
				max = letter.x + letter.width();
			}
		}
		return max - min;
	}
	,set_color: function(color) {
		var _g = 0;
		var _g1 = this.mLetters;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.colorMultiplication(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,(color >>> 24) * 0.00392156862745098);
		}
		this.color = color;
		return color;
	}
	,set_alpha: function(value) {
		this.alpha = value;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.alpha = value;
		}
		return value;
	}
	,__class__: com_gEngine_display_Text
	,__properties__: $extend(com_gEngine_display_Layer.prototype.__properties__,{set_alpha:"set_alpha",set_color:"set_color",set_smooth:"set_smooth",set_text:"set_text"})
});
var com_gEngine_display_extra_TileMapAdvanceDisplay = function(displayConstructor,widthInTiles,heightInTiles,tileWidth,tileHeight) {
	com_gEngine_display_Layer.call(this);
	this.displayConstructor = displayConstructor;
	this.widthInTiles = widthInTiles;
	this.heightInTiles = heightInTiles;
	this.tileWidth = tileWidth;
	this.tileHeight = tileHeight;
	this.tiles = [];
	var _g = 0;
	var _g1 = widthInTiles * heightInTiles;
	while(_g < _g1) {
		var i = _g++;
		this.tiles.push(new com_gEngine_display_extra_Tile());
	}
};
$hxClasses["com.gEngine.display.extra.TileMapAdvanceDisplay"] = com_gEngine_display_extra_TileMapAdvanceDisplay;
com_gEngine_display_extra_TileMapAdvanceDisplay.__name__ = "com.gEngine.display.extra.TileMapAdvanceDisplay";
com_gEngine_display_extra_TileMapAdvanceDisplay.mergeMinMax = function(point,min,max) {
	if(point.x < min.x) {
		min.x = point.x;
	}
	if(point.y < min.y) {
		min.y = point.y;
	}
	if(point.x > max.x) {
		max.x = point.x;
	}
	if(point.y > max.y) {
		max.y = point.y;
	}
};
com_gEngine_display_extra_TileMapAdvanceDisplay.__super__ = com_gEngine_display_Layer;
com_gEngine_display_extra_TileMapAdvanceDisplay.prototype = $extend(com_gEngine_display_Layer.prototype,{
	widthInTiles: null
	,heightInTiles: null
	,tileWidth: null
	,tileHeight: null
	,tiles: null
	,displayConstructor: null
	,getTile: function(indexX,indexY) {
		return this.tiles[indexX + this.widthInTiles * indexY];
	}
	,setTile: function(indexX,indexY,value) {
		this.setTile2(indexX + this.widthInTiles * indexY,value);
	}
	,setTile2: function(index,value,flipX,flipY,rotate) {
		if(rotate == null) {
			rotate = false;
		}
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		if(this.tiles[index].display == null) {
			var display = this.displayConstructor(value);
			this.addChild(display);
			display.x = (index % this.widthInTiles | 0) * this.tileWidth;
			display.y = (index / this.widthInTiles | 0) * this.tileHeight;
			if(rotate) {
				display.set_rotation(Math.PI * 0.5);
				display.scaleX = flipY ? -1 : 1;
				display.scaleY = flipX ? 1 : -1;
			} else {
				display.scaleX = flipX ? -1 : 1;
				display.scaleY = flipY ? -1 : 1;
			}
			this.tiles[index].display = display;
		}
		this.tiles[index].id = value;
		this.tiles[index].display.timeline.gotoAndStop(value);
	}
	,render: function(paintMode,transform) {
		var _this = paintMode.camera;
		var homogeneousTargetX = 0 / _this.width * 2 - 1;
		var homogeneousTargetY = kha_Image.renderTargetsInvertedY() ? 0 / _this.height * 2 - 1 : 1 - 0 / _this.height * 2;
		var transform__00 = 1;
		var transform__10 = 0;
		var transform__20 = 0;
		var transform__30 = 0;
		var transform__01 = 0;
		var transform__11 = 1;
		var transform__21 = 0;
		var transform__31 = 0;
		var transform__02 = 0;
		var transform__12 = 0;
		var transform__22 = 1;
		var transform__32 = 0;
		var transform__03 = 0;
		var transform__13 = 0;
		var transform__23 = 0;
		var transform__33 = 1;
		if(_this.projectionIsOrthogonal) {
			homogeneousTargetX = 0 - _this.width * 0.5;
			homogeneousTargetY = 0 - _this.height * 0.5;
			var _this1 = _this.view;
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c00 = _this1._11 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c01 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c02 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._12;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c03 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var det = _this1._00 * c00 - _this1._01 * c01 + _this1._02 * c02 - _this1._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c10 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c11 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c12 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c13 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c20 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c21 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c22 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._32;
			var c23 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c30 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._21 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c31 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c32 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._22;
			var c33 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		} else {
			var _this1 = _this.projection;
			var m = _this.view;
			var _this__00 = _this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03;
			var _this__10 = _this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13;
			var _this__20 = _this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23;
			var _this__30 = _this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33;
			var _this__01 = _this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03;
			var _this__11 = _this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13;
			var _this__21 = _this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23;
			var _this__31 = _this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33;
			var _this__02 = _this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03;
			var _this__12 = _this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13;
			var _this__22 = _this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23;
			var _this__32 = _this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33;
			var _this__03 = _this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03;
			var _this__13 = _this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13;
			var _this__23 = _this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23;
			var _this__33 = _this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33;
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c00 = _this__11 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c01 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c02 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__12;
			var m7 = _this__22;
			var m8 = _this__32;
			var c03 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var det = _this__00 * c00 - _this__01 * c01 + _this__02 * c02 - _this__03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c10 = _this__01 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c11 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c12 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__22;
			var m8 = _this__32;
			var c13 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c20 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c21 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c22 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__32;
			var c23 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c30 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__21 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c31 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c32 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__22;
			var c33 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		}
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = -1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var farRaw_x = 0;
		var farRaw_y = 0;
		var farRaw_z = 0;
		var farRaw_w = 1;
		farRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		farRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		farRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		farRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = 1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var nearRaw_x = 0;
		var nearRaw_y = 0;
		var nearRaw_z = 0;
		var nearRaw_w = 1;
		nearRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		nearRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		nearRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		nearRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var value = 1 / farRaw_w;
		var x = farRaw_x * value;
		var y = farRaw_y * value;
		var z = farRaw_z * value;
		var w = farRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var far_x = x;
		var far_y = y;
		var far_z = z;
		var far_w = w;
		var value = 1 / nearRaw_w;
		var x = nearRaw_x * value;
		var y = nearRaw_y * value;
		var z = nearRaw_z * value;
		var w = nearRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var near_x = x;
		var near_y = y;
		var near_z = z;
		var near_w = w;
		var x = far_x - near_x;
		var y = far_y - near_y;
		var z = far_z - near_z;
		var w = far_w - near_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var dir_x = x;
		var dir_y = y;
		var dir_z = z;
		var dir_w = w;
		var x = near_x + dir_x * ((0 - near_z) / dir_z);
		var y = near_y + dir_y * ((0 - near_z) / dir_z);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var min_x = x;
		var min_y = y;
		var x = min_x;
		var y = min_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var max_x = x;
		var max_y = y;
		var _this = paintMode.camera;
		var targetX = paintMode.camera.width;
		var homogeneousTargetX = targetX / _this.width * 2 - 1;
		var homogeneousTargetY = kha_Image.renderTargetsInvertedY() ? 0 / _this.height * 2 - 1 : 1 - 0 / _this.height * 2;
		var transform__00 = 1;
		var transform__10 = 0;
		var transform__20 = 0;
		var transform__30 = 0;
		var transform__01 = 0;
		var transform__11 = 1;
		var transform__21 = 0;
		var transform__31 = 0;
		var transform__02 = 0;
		var transform__12 = 0;
		var transform__22 = 1;
		var transform__32 = 0;
		var transform__03 = 0;
		var transform__13 = 0;
		var transform__23 = 0;
		var transform__33 = 1;
		if(_this.projectionIsOrthogonal) {
			homogeneousTargetX = targetX - _this.width * 0.5;
			homogeneousTargetY = 0 - _this.height * 0.5;
			var _this1 = _this.view;
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c00 = _this1._11 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c01 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c02 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._12;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c03 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var det = _this1._00 * c00 - _this1._01 * c01 + _this1._02 * c02 - _this1._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c10 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c11 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c12 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c13 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c20 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c21 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c22 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._32;
			var c23 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c30 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._21 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c31 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c32 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._22;
			var c33 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		} else {
			var _this1 = _this.projection;
			var m = _this.view;
			var _this__00 = _this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03;
			var _this__10 = _this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13;
			var _this__20 = _this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23;
			var _this__30 = _this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33;
			var _this__01 = _this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03;
			var _this__11 = _this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13;
			var _this__21 = _this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23;
			var _this__31 = _this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33;
			var _this__02 = _this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03;
			var _this__12 = _this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13;
			var _this__22 = _this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23;
			var _this__32 = _this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33;
			var _this__03 = _this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03;
			var _this__13 = _this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13;
			var _this__23 = _this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23;
			var _this__33 = _this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33;
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c00 = _this__11 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c01 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c02 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__12;
			var m7 = _this__22;
			var m8 = _this__32;
			var c03 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var det = _this__00 * c00 - _this__01 * c01 + _this__02 * c02 - _this__03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c10 = _this__01 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c11 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c12 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__22;
			var m8 = _this__32;
			var c13 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c20 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c21 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c22 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__32;
			var c23 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c30 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__21 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c31 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c32 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__22;
			var c33 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		}
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = -1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var farRaw_x = 0;
		var farRaw_y = 0;
		var farRaw_z = 0;
		var farRaw_w = 1;
		farRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		farRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		farRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		farRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = 1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var nearRaw_x = 0;
		var nearRaw_y = 0;
		var nearRaw_z = 0;
		var nearRaw_w = 1;
		nearRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		nearRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		nearRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		nearRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var value = 1 / farRaw_w;
		var x = farRaw_x * value;
		var y = farRaw_y * value;
		var z = farRaw_z * value;
		var w = farRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var far_x = x;
		var far_y = y;
		var far_z = z;
		var far_w = w;
		var value = 1 / nearRaw_w;
		var x = nearRaw_x * value;
		var y = nearRaw_y * value;
		var z = nearRaw_z * value;
		var w = nearRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var near_x = x;
		var near_y = y;
		var near_z = z;
		var near_w = w;
		var x = far_x - near_x;
		var y = far_y - near_y;
		var z = far_z - near_z;
		var w = far_w - near_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var dir_x = x;
		var dir_y = y;
		var dir_z = z;
		var dir_w = w;
		var x = near_x + dir_x * ((0 - near_z) / dir_z);
		var y = near_y + dir_y * ((0 - near_z) / dir_z);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var point_x = x;
		var point_y = y;
		if(point_x < min_x) {
			min_x = point_x;
		}
		if(point_y < min_y) {
			min_y = point_y;
		}
		if(point_x > max_x) {
			max_x = point_x;
		}
		if(point_y > max_y) {
			max_y = point_y;
		}
		var _this = paintMode.camera;
		var targetX = paintMode.camera.width;
		var targetY = paintMode.camera.height;
		var homogeneousTargetX = targetX / _this.width * 2 - 1;
		var homogeneousTargetY = kha_Image.renderTargetsInvertedY() ? targetY / _this.height * 2 - 1 : 1 - targetY / _this.height * 2;
		var transform__00 = 1;
		var transform__10 = 0;
		var transform__20 = 0;
		var transform__30 = 0;
		var transform__01 = 0;
		var transform__11 = 1;
		var transform__21 = 0;
		var transform__31 = 0;
		var transform__02 = 0;
		var transform__12 = 0;
		var transform__22 = 1;
		var transform__32 = 0;
		var transform__03 = 0;
		var transform__13 = 0;
		var transform__23 = 0;
		var transform__33 = 1;
		if(_this.projectionIsOrthogonal) {
			homogeneousTargetX = targetX - _this.width * 0.5;
			homogeneousTargetY = targetY - _this.height * 0.5;
			var _this1 = _this.view;
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c00 = _this1._11 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c01 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c02 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._12;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c03 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var det = _this1._00 * c00 - _this1._01 * c01 + _this1._02 * c02 - _this1._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c10 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c11 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c12 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c13 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c20 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c21 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c22 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._32;
			var c23 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c30 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._21 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c31 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c32 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._22;
			var c33 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		} else {
			var _this1 = _this.projection;
			var m = _this.view;
			var _this__00 = _this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03;
			var _this__10 = _this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13;
			var _this__20 = _this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23;
			var _this__30 = _this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33;
			var _this__01 = _this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03;
			var _this__11 = _this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13;
			var _this__21 = _this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23;
			var _this__31 = _this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33;
			var _this__02 = _this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03;
			var _this__12 = _this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13;
			var _this__22 = _this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23;
			var _this__32 = _this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33;
			var _this__03 = _this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03;
			var _this__13 = _this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13;
			var _this__23 = _this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23;
			var _this__33 = _this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33;
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c00 = _this__11 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c01 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c02 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__12;
			var m7 = _this__22;
			var m8 = _this__32;
			var c03 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var det = _this__00 * c00 - _this__01 * c01 + _this__02 * c02 - _this__03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c10 = _this__01 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c11 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c12 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__22;
			var m8 = _this__32;
			var c13 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c20 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c21 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c22 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__32;
			var c23 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c30 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__21 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c31 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c32 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__22;
			var c33 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		}
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = -1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var farRaw_x = 0;
		var farRaw_y = 0;
		var farRaw_z = 0;
		var farRaw_w = 1;
		farRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		farRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		farRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		farRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = 1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var nearRaw_x = 0;
		var nearRaw_y = 0;
		var nearRaw_z = 0;
		var nearRaw_w = 1;
		nearRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		nearRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		nearRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		nearRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var value = 1 / farRaw_w;
		var x = farRaw_x * value;
		var y = farRaw_y * value;
		var z = farRaw_z * value;
		var w = farRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var far_x = x;
		var far_y = y;
		var far_z = z;
		var far_w = w;
		var value = 1 / nearRaw_w;
		var x = nearRaw_x * value;
		var y = nearRaw_y * value;
		var z = nearRaw_z * value;
		var w = nearRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var near_x = x;
		var near_y = y;
		var near_z = z;
		var near_w = w;
		var x = far_x - near_x;
		var y = far_y - near_y;
		var z = far_z - near_z;
		var w = far_w - near_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var dir_x = x;
		var dir_y = y;
		var dir_z = z;
		var dir_w = w;
		var x = near_x + dir_x * ((0 - near_z) / dir_z);
		var y = near_y + dir_y * ((0 - near_z) / dir_z);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var point_x = x;
		var point_y = y;
		if(point_x < min_x) {
			min_x = point_x;
		}
		if(point_y < min_y) {
			min_y = point_y;
		}
		if(point_x > max_x) {
			max_x = point_x;
		}
		if(point_y > max_y) {
			max_y = point_y;
		}
		var _this = paintMode.camera;
		var targetY = paintMode.camera.height;
		var homogeneousTargetX = 0 / _this.width * 2 - 1;
		var homogeneousTargetY = kha_Image.renderTargetsInvertedY() ? targetY / _this.height * 2 - 1 : 1 - targetY / _this.height * 2;
		var transform__00 = 1;
		var transform__10 = 0;
		var transform__20 = 0;
		var transform__30 = 0;
		var transform__01 = 0;
		var transform__11 = 1;
		var transform__21 = 0;
		var transform__31 = 0;
		var transform__02 = 0;
		var transform__12 = 0;
		var transform__22 = 1;
		var transform__32 = 0;
		var transform__03 = 0;
		var transform__13 = 0;
		var transform__23 = 0;
		var transform__33 = 1;
		if(_this.projectionIsOrthogonal) {
			homogeneousTargetX = 0 - _this.width * 0.5;
			homogeneousTargetY = targetY - _this.height * 0.5;
			var _this1 = _this.view;
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c00 = _this1._11 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c01 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c02 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._12;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c03 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var det = _this1._00 * c00 - _this1._01 * c01 + _this1._02 * c02 - _this1._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c10 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c11 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c12 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c13 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c20 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c21 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c22 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._32;
			var c23 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c30 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._21 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c31 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c32 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._22;
			var c33 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		} else {
			var _this1 = _this.projection;
			var m = _this.view;
			var _this__00 = _this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03;
			var _this__10 = _this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13;
			var _this__20 = _this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23;
			var _this__30 = _this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33;
			var _this__01 = _this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03;
			var _this__11 = _this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13;
			var _this__21 = _this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23;
			var _this__31 = _this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33;
			var _this__02 = _this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03;
			var _this__12 = _this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13;
			var _this__22 = _this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23;
			var _this__32 = _this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33;
			var _this__03 = _this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03;
			var _this__13 = _this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13;
			var _this__23 = _this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23;
			var _this__33 = _this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33;
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c00 = _this__11 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c01 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c02 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__12;
			var m7 = _this__22;
			var m8 = _this__32;
			var c03 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var det = _this__00 * c00 - _this__01 * c01 + _this__02 * c02 - _this__03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c10 = _this__01 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c11 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c12 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__22;
			var m8 = _this__32;
			var c13 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c20 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c21 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c22 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__32;
			var c23 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c30 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__21 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c31 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c32 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__22;
			var c33 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		}
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = -1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var farRaw_x = 0;
		var farRaw_y = 0;
		var farRaw_z = 0;
		var farRaw_w = 1;
		farRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		farRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		farRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		farRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = 1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var nearRaw_x = 0;
		var nearRaw_y = 0;
		var nearRaw_z = 0;
		var nearRaw_w = 1;
		nearRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		nearRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		nearRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		nearRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var value = 1 / farRaw_w;
		var x = farRaw_x * value;
		var y = farRaw_y * value;
		var z = farRaw_z * value;
		var w = farRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var far_x = x;
		var far_y = y;
		var far_z = z;
		var far_w = w;
		var value = 1 / nearRaw_w;
		var x = nearRaw_x * value;
		var y = nearRaw_y * value;
		var z = nearRaw_z * value;
		var w = nearRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var near_x = x;
		var near_y = y;
		var near_z = z;
		var near_w = w;
		var x = far_x - near_x;
		var y = far_y - near_y;
		var z = far_z - near_z;
		var w = far_w - near_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var dir_x = x;
		var dir_y = y;
		var dir_z = z;
		var dir_w = w;
		var x = near_x + dir_x * ((0 - near_z) / dir_z);
		var y = near_y + dir_y * ((0 - near_z) / dir_z);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var point_x = x;
		var point_y = y;
		if(point_x < min_x) {
			min_x = point_x;
		}
		if(point_y < min_y) {
			min_y = point_y;
		}
		if(point_x > max_x) {
			max_x = point_x;
		}
		if(point_y > max_y) {
			max_y = point_y;
		}
		var startInTilesX = (min_x / this.tileWidth | 0) - 1;
		var endInTilesX = (max_x / this.tileWidth | 0) + 1;
		var startInTilesY = (min_y / this.tileHeight | 0) - 1;
		var endInTilesY = (max_y / this.tileHeight | 0) + 1;
		if(startInTilesX < 0) {
			startInTilesX = 0;
		}
		if(startInTilesY < 0) {
			startInTilesY = 0;
		}
		if(endInTilesX > this.widthInTiles) {
			endInTilesX = this.widthInTiles;
		}
		if(endInTilesY > this.heightInTiles) {
			endInTilesY = this.heightInTiles;
		}
		var tileY = endInTilesY - 1;
		while(startInTilesY <= tileY) {
			var _g = startInTilesX;
			var _g1 = endInTilesX;
			while(_g < _g1) {
				var tileX = _g++;
				var index = tileX + this.widthInTiles * tileY;
				if(index >= 0 && index < this.tiles.length) {
					var frame = this.tiles[index].id;
					if(frame >= 0) {
						this.tiles[index].display.render(paintMode,transform);
					}
				}
			}
			--tileY;
		}
	}
	,__class__: com_gEngine_display_extra_TileMapAdvanceDisplay
});
var com_gEngine_display_extra_Tile = function() {
	this.display = null;
	this.id = -1;
};
$hxClasses["com.gEngine.display.extra.Tile"] = com_gEngine_display_extra_Tile;
com_gEngine_display_extra_Tile.__name__ = "com.gEngine.display.extra.Tile";
com_gEngine_display_extra_Tile.prototype = {
	id: null
	,display: null
	,__class__: com_gEngine_display_extra_Tile
};
var com_gEngine_display_extra_TileMapDisplay = function(tileType,widthInTiles,heightInTiles,tileWidth,tileHeight) {
	com_gEngine_display_Layer.call(this);
	this.widthInTiles = widthInTiles;
	this.heightInTiles = heightInTiles;
	this.tileWidth = tileWidth;
	this.tileHeight = tileHeight;
	this.tiles = [];
	this.orientation = [];
	this.tile = tileType;
	this.tile.pivotX = tileWidth * 0.5;
	this.tile.pivotY = tileHeight * 0.5;
	var _g = 0;
	var _g1 = widthInTiles * heightInTiles;
	while(_g < _g1) {
		var i = _g++;
		this.tiles.push(-1);
		this.orientation.push(0);
	}
};
$hxClasses["com.gEngine.display.extra.TileMapDisplay"] = com_gEngine_display_extra_TileMapDisplay;
com_gEngine_display_extra_TileMapDisplay.__name__ = "com.gEngine.display.extra.TileMapDisplay";
com_gEngine_display_extra_TileMapDisplay.mergeMinMax = function(point,min,max) {
	if(point.x < min.x) {
		min.x = point.x;
	}
	if(point.y < min.y) {
		min.y = point.y;
	}
	if(point.x > max.x) {
		max.x = point.x;
	}
	if(point.y > max.y) {
		max.y = point.y;
	}
};
com_gEngine_display_extra_TileMapDisplay.__super__ = com_gEngine_display_Layer;
com_gEngine_display_extra_TileMapDisplay.prototype = $extend(com_gEngine_display_Layer.prototype,{
	widthInTiles: null
	,heightInTiles: null
	,tileWidth: null
	,tileHeight: null
	,tiles: null
	,orientation: null
	,tile: null
	,getTile: function(indexX,indexY) {
		return this.tiles[indexX + this.widthInTiles * indexY];
	}
	,setTile: function(indexX,indexY,value,flipX,flipY,rotate) {
		if(rotate == null) {
			rotate = false;
		}
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		this.setTile2(indexX + this.widthInTiles * indexY,value,flipX,flipY);
	}
	,setTile2: function(index,value,flipX,flipY,rotate) {
		if(rotate == null) {
			rotate = false;
		}
		if(flipY == null) {
			flipY = false;
		}
		if(flipX == null) {
			flipX = false;
		}
		this.tiles[index] = value;
		var tileOrientation = 0;
		if(flipX) {
			tileOrientation |= 1;
		}
		if(flipY) {
			tileOrientation |= 2;
		}
		if(rotate) {
			tileOrientation |= 4;
		}
		this.orientation[index] = tileOrientation;
	}
	,render: function(paintMode,transform) {
		com_gEngine_display_Layer.prototype.render.call(this,paintMode,transform);
		var _this = paintMode.camera;
		var homogeneousTargetX = 0 / _this.width * 2 - 1;
		var homogeneousTargetY = kha_Image.renderTargetsInvertedY() ? 0 / _this.height * 2 - 1 : 1 - 0 / _this.height * 2;
		var transform__00 = 1;
		var transform__10 = 0;
		var transform__20 = 0;
		var transform__30 = 0;
		var transform__01 = 0;
		var transform__11 = 1;
		var transform__21 = 0;
		var transform__31 = 0;
		var transform__02 = 0;
		var transform__12 = 0;
		var transform__22 = 1;
		var transform__32 = 0;
		var transform__03 = 0;
		var transform__13 = 0;
		var transform__23 = 0;
		var transform__33 = 1;
		if(_this.projectionIsOrthogonal) {
			homogeneousTargetX = 0 - _this.width * 0.5;
			homogeneousTargetY = 0 - _this.height * 0.5;
			var _this1 = _this.view;
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c00 = _this1._11 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c01 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c02 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._12;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c03 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var det = _this1._00 * c00 - _this1._01 * c01 + _this1._02 * c02 - _this1._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c10 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c11 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c12 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c13 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c20 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c21 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c22 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._32;
			var c23 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c30 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._21 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c31 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c32 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._22;
			var c33 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		} else {
			var _this1 = _this.projection;
			var m = _this.view;
			var _this__00 = _this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03;
			var _this__10 = _this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13;
			var _this__20 = _this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23;
			var _this__30 = _this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33;
			var _this__01 = _this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03;
			var _this__11 = _this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13;
			var _this__21 = _this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23;
			var _this__31 = _this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33;
			var _this__02 = _this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03;
			var _this__12 = _this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13;
			var _this__22 = _this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23;
			var _this__32 = _this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33;
			var _this__03 = _this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03;
			var _this__13 = _this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13;
			var _this__23 = _this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23;
			var _this__33 = _this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33;
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c00 = _this__11 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c01 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c02 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__12;
			var m7 = _this__22;
			var m8 = _this__32;
			var c03 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var det = _this__00 * c00 - _this__01 * c01 + _this__02 * c02 - _this__03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c10 = _this__01 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c11 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c12 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__22;
			var m8 = _this__32;
			var c13 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c20 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c21 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c22 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__32;
			var c23 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c30 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__21 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c31 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c32 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__22;
			var c33 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		}
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = -1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var farRaw_x = 0;
		var farRaw_y = 0;
		var farRaw_z = 0;
		var farRaw_w = 1;
		farRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		farRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		farRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		farRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = 1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var nearRaw_x = 0;
		var nearRaw_y = 0;
		var nearRaw_z = 0;
		var nearRaw_w = 1;
		nearRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		nearRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		nearRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		nearRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var value = 1 / farRaw_w;
		var x = farRaw_x * value;
		var y = farRaw_y * value;
		var z = farRaw_z * value;
		var w = farRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var far_x = x;
		var far_y = y;
		var far_z = z;
		var far_w = w;
		var value = 1 / nearRaw_w;
		var x = nearRaw_x * value;
		var y = nearRaw_y * value;
		var z = nearRaw_z * value;
		var w = nearRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var near_x = x;
		var near_y = y;
		var near_z = z;
		var near_w = w;
		var x = far_x - near_x;
		var y = far_y - near_y;
		var z = far_z - near_z;
		var w = far_w - near_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var dir_x = x;
		var dir_y = y;
		var dir_z = z;
		var dir_w = w;
		var x = near_x + dir_x * ((0 - near_z) / dir_z);
		var y = near_y + dir_y * ((0 - near_z) / dir_z);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var min_x = x;
		var min_y = y;
		var x = min_x;
		var y = min_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var max_x = x;
		var max_y = y;
		var _this = paintMode.camera;
		var targetX = paintMode.camera.width;
		var homogeneousTargetX = targetX / _this.width * 2 - 1;
		var homogeneousTargetY = kha_Image.renderTargetsInvertedY() ? 0 / _this.height * 2 - 1 : 1 - 0 / _this.height * 2;
		var transform__00 = 1;
		var transform__10 = 0;
		var transform__20 = 0;
		var transform__30 = 0;
		var transform__01 = 0;
		var transform__11 = 1;
		var transform__21 = 0;
		var transform__31 = 0;
		var transform__02 = 0;
		var transform__12 = 0;
		var transform__22 = 1;
		var transform__32 = 0;
		var transform__03 = 0;
		var transform__13 = 0;
		var transform__23 = 0;
		var transform__33 = 1;
		if(_this.projectionIsOrthogonal) {
			homogeneousTargetX = targetX - _this.width * 0.5;
			homogeneousTargetY = 0 - _this.height * 0.5;
			var _this1 = _this.view;
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c00 = _this1._11 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c01 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c02 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._12;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c03 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var det = _this1._00 * c00 - _this1._01 * c01 + _this1._02 * c02 - _this1._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c10 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c11 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c12 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c13 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c20 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c21 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c22 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._32;
			var c23 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c30 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._21 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c31 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c32 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._22;
			var c33 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		} else {
			var _this1 = _this.projection;
			var m = _this.view;
			var _this__00 = _this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03;
			var _this__10 = _this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13;
			var _this__20 = _this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23;
			var _this__30 = _this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33;
			var _this__01 = _this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03;
			var _this__11 = _this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13;
			var _this__21 = _this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23;
			var _this__31 = _this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33;
			var _this__02 = _this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03;
			var _this__12 = _this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13;
			var _this__22 = _this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23;
			var _this__32 = _this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33;
			var _this__03 = _this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03;
			var _this__13 = _this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13;
			var _this__23 = _this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23;
			var _this__33 = _this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33;
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c00 = _this__11 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c01 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c02 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__12;
			var m7 = _this__22;
			var m8 = _this__32;
			var c03 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var det = _this__00 * c00 - _this__01 * c01 + _this__02 * c02 - _this__03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c10 = _this__01 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c11 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c12 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__22;
			var m8 = _this__32;
			var c13 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c20 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c21 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c22 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__32;
			var c23 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c30 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__21 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c31 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c32 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__22;
			var c33 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		}
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = -1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var farRaw_x = 0;
		var farRaw_y = 0;
		var farRaw_z = 0;
		var farRaw_w = 1;
		farRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		farRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		farRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		farRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = 1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var nearRaw_x = 0;
		var nearRaw_y = 0;
		var nearRaw_z = 0;
		var nearRaw_w = 1;
		nearRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		nearRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		nearRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		nearRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var value = 1 / farRaw_w;
		var x = farRaw_x * value;
		var y = farRaw_y * value;
		var z = farRaw_z * value;
		var w = farRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var far_x = x;
		var far_y = y;
		var far_z = z;
		var far_w = w;
		var value = 1 / nearRaw_w;
		var x = nearRaw_x * value;
		var y = nearRaw_y * value;
		var z = nearRaw_z * value;
		var w = nearRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var near_x = x;
		var near_y = y;
		var near_z = z;
		var near_w = w;
		var x = far_x - near_x;
		var y = far_y - near_y;
		var z = far_z - near_z;
		var w = far_w - near_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var dir_x = x;
		var dir_y = y;
		var dir_z = z;
		var dir_w = w;
		var x = near_x + dir_x * ((0 - near_z) / dir_z);
		var y = near_y + dir_y * ((0 - near_z) / dir_z);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var point_x = x;
		var point_y = y;
		if(point_x < min_x) {
			min_x = point_x;
		}
		if(point_y < min_y) {
			min_y = point_y;
		}
		if(point_x > max_x) {
			max_x = point_x;
		}
		if(point_y > max_y) {
			max_y = point_y;
		}
		var _this = paintMode.camera;
		var targetX = paintMode.camera.width;
		var targetY = paintMode.camera.height;
		var homogeneousTargetX = targetX / _this.width * 2 - 1;
		var homogeneousTargetY = kha_Image.renderTargetsInvertedY() ? targetY / _this.height * 2 - 1 : 1 - targetY / _this.height * 2;
		var transform__00 = 1;
		var transform__10 = 0;
		var transform__20 = 0;
		var transform__30 = 0;
		var transform__01 = 0;
		var transform__11 = 1;
		var transform__21 = 0;
		var transform__31 = 0;
		var transform__02 = 0;
		var transform__12 = 0;
		var transform__22 = 1;
		var transform__32 = 0;
		var transform__03 = 0;
		var transform__13 = 0;
		var transform__23 = 0;
		var transform__33 = 1;
		if(_this.projectionIsOrthogonal) {
			homogeneousTargetX = targetX - _this.width * 0.5;
			homogeneousTargetY = targetY - _this.height * 0.5;
			var _this1 = _this.view;
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c00 = _this1._11 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c01 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c02 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._12;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c03 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var det = _this1._00 * c00 - _this1._01 * c01 + _this1._02 * c02 - _this1._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c10 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c11 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c12 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c13 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c20 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c21 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c22 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._32;
			var c23 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c30 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._21 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c31 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c32 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._22;
			var c33 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		} else {
			var _this1 = _this.projection;
			var m = _this.view;
			var _this__00 = _this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03;
			var _this__10 = _this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13;
			var _this__20 = _this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23;
			var _this__30 = _this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33;
			var _this__01 = _this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03;
			var _this__11 = _this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13;
			var _this__21 = _this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23;
			var _this__31 = _this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33;
			var _this__02 = _this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03;
			var _this__12 = _this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13;
			var _this__22 = _this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23;
			var _this__32 = _this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33;
			var _this__03 = _this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03;
			var _this__13 = _this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13;
			var _this__23 = _this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23;
			var _this__33 = _this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33;
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c00 = _this__11 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c01 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c02 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__12;
			var m7 = _this__22;
			var m8 = _this__32;
			var c03 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var det = _this__00 * c00 - _this__01 * c01 + _this__02 * c02 - _this__03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c10 = _this__01 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c11 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c12 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__22;
			var m8 = _this__32;
			var c13 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c20 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c21 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c22 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__32;
			var c23 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c30 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__21 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c31 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c32 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__22;
			var c33 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		}
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = -1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var farRaw_x = 0;
		var farRaw_y = 0;
		var farRaw_z = 0;
		var farRaw_w = 1;
		farRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		farRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		farRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		farRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = 1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var nearRaw_x = 0;
		var nearRaw_y = 0;
		var nearRaw_z = 0;
		var nearRaw_w = 1;
		nearRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		nearRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		nearRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		nearRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var value = 1 / farRaw_w;
		var x = farRaw_x * value;
		var y = farRaw_y * value;
		var z = farRaw_z * value;
		var w = farRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var far_x = x;
		var far_y = y;
		var far_z = z;
		var far_w = w;
		var value = 1 / nearRaw_w;
		var x = nearRaw_x * value;
		var y = nearRaw_y * value;
		var z = nearRaw_z * value;
		var w = nearRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var near_x = x;
		var near_y = y;
		var near_z = z;
		var near_w = w;
		var x = far_x - near_x;
		var y = far_y - near_y;
		var z = far_z - near_z;
		var w = far_w - near_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var dir_x = x;
		var dir_y = y;
		var dir_z = z;
		var dir_w = w;
		var x = near_x + dir_x * ((0 - near_z) / dir_z);
		var y = near_y + dir_y * ((0 - near_z) / dir_z);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var point_x = x;
		var point_y = y;
		if(point_x < min_x) {
			min_x = point_x;
		}
		if(point_y < min_y) {
			min_y = point_y;
		}
		if(point_x > max_x) {
			max_x = point_x;
		}
		if(point_y > max_y) {
			max_y = point_y;
		}
		var _this = paintMode.camera;
		var targetY = paintMode.camera.height;
		var homogeneousTargetX = 0 / _this.width * 2 - 1;
		var homogeneousTargetY = kha_Image.renderTargetsInvertedY() ? targetY / _this.height * 2 - 1 : 1 - targetY / _this.height * 2;
		var transform__00 = 1;
		var transform__10 = 0;
		var transform__20 = 0;
		var transform__30 = 0;
		var transform__01 = 0;
		var transform__11 = 1;
		var transform__21 = 0;
		var transform__31 = 0;
		var transform__02 = 0;
		var transform__12 = 0;
		var transform__22 = 1;
		var transform__32 = 0;
		var transform__03 = 0;
		var transform__13 = 0;
		var transform__23 = 0;
		var transform__33 = 1;
		if(_this.projectionIsOrthogonal) {
			homogeneousTargetX = 0 - _this.width * 0.5;
			homogeneousTargetY = targetY - _this.height * 0.5;
			var _this1 = _this.view;
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c00 = _this1._11 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._12;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c01 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._13;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c02 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._11;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._12;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c03 = _this1._10 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var det = _this1._00 * c00 - _this1._01 * c01 + _this1._02 * c02 - _this1._03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c10 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._21 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._22;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c11 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._23;
			var m8 = _this1._33;
			var c12 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._21;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._22;
			var m8 = _this1._32;
			var c13 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._20 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c20 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._31 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._32;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c21 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._33;
			var c22 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._31;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._32;
			var c23 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._30 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c30 = _this1._01 * (m4 * m8 - m5 * m7) - _this1._11 * (m3 * m8 - m5 * m6) + _this1._21 * (m3 * m7 - m4 * m6);
			var m3 = _this1._02;
			var m4 = _this1._12;
			var m5 = _this1._22;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c31 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._03;
			var m7 = _this1._13;
			var m8 = _this1._23;
			var c32 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var m3 = _this1._01;
			var m4 = _this1._11;
			var m5 = _this1._21;
			var m6 = _this1._02;
			var m7 = _this1._12;
			var m8 = _this1._22;
			var c33 = _this1._00 * (m4 * m8 - m5 * m7) - _this1._10 * (m3 * m8 - m5 * m6) + _this1._20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		} else {
			var _this1 = _this.projection;
			var m = _this.view;
			var _this__00 = _this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03;
			var _this__10 = _this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13;
			var _this__20 = _this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23;
			var _this__30 = _this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33;
			var _this__01 = _this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03;
			var _this__11 = _this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13;
			var _this__21 = _this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23;
			var _this__31 = _this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33;
			var _this__02 = _this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03;
			var _this__12 = _this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13;
			var _this__22 = _this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23;
			var _this__32 = _this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33;
			var _this__03 = _this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03;
			var _this__13 = _this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13;
			var _this__23 = _this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23;
			var _this__33 = _this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33;
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c00 = _this__11 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__12;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c01 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__13;
			var m7 = _this__23;
			var m8 = _this__33;
			var c02 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__11;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__12;
			var m7 = _this__22;
			var m8 = _this__32;
			var c03 = _this__10 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var det = _this__00 * c00 - _this__01 * c01 + _this__02 * c02 - _this__03 * c03;
			if(Math.abs(det) < 0.000001) {
				throw haxe_Exception.thrown("determinant is too small");
			}
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c10 = _this__01 * (m4 * m8 - m5 * m7) - _this__21 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__22;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c11 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__23;
			var m8 = _this__33;
			var c12 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__21;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__22;
			var m8 = _this__32;
			var c13 = _this__00 * (m4 * m8 - m5 * m7) - _this__20 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c20 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__31 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__32;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c21 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__33;
			var c22 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__31;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__32;
			var c23 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__30 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c30 = _this__01 * (m4 * m8 - m5 * m7) - _this__11 * (m3 * m8 - m5 * m6) + _this__21 * (m3 * m7 - m4 * m6);
			var m3 = _this__02;
			var m4 = _this__12;
			var m5 = _this__22;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c31 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__03;
			var m7 = _this__13;
			var m8 = _this__23;
			var c32 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var m3 = _this__01;
			var m4 = _this__11;
			var m5 = _this__21;
			var m6 = _this__02;
			var m7 = _this__12;
			var m8 = _this__22;
			var c33 = _this__00 * (m4 * m8 - m5 * m7) - _this__10 * (m3 * m8 - m5 * m6) + _this__20 * (m3 * m7 - m4 * m6);
			var invdet = 1.0 / det;
			var m__00 = c00 * invdet;
			var m__10 = -c01 * invdet;
			var m__20 = c02 * invdet;
			var m__30 = -c03 * invdet;
			var m__01 = -c10 * invdet;
			var m__11 = c11 * invdet;
			var m__21 = -c12 * invdet;
			var m__31 = c13 * invdet;
			var m__02 = c20 * invdet;
			var m__12 = -c21 * invdet;
			var m__22 = c22 * invdet;
			var m__32 = -c23 * invdet;
			var m__03 = -c30 * invdet;
			var m__13 = c31 * invdet;
			var m__23 = -c32 * invdet;
			var m__33 = c33 * invdet;
			transform__00 = m__00;
			transform__10 = m__10;
			transform__20 = m__20;
			transform__30 = m__30;
			transform__01 = m__01;
			transform__11 = m__11;
			transform__21 = m__21;
			transform__31 = m__31;
			transform__02 = m__02;
			transform__12 = m__12;
			transform__22 = m__22;
			transform__32 = m__32;
			transform__03 = m__03;
			transform__13 = m__13;
			transform__23 = m__23;
			transform__33 = m__33;
		}
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = -1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var farRaw_x = 0;
		var farRaw_y = 0;
		var farRaw_z = 0;
		var farRaw_w = 1;
		farRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		farRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		farRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		farRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var x = homogeneousTargetX;
		var y = homogeneousTargetY;
		var z = 1;
		var w = 1;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = w;
		var nearRaw_x = 0;
		var nearRaw_y = 0;
		var nearRaw_z = 0;
		var nearRaw_w = 1;
		nearRaw_x = transform__00 * value_x + transform__10 * value_y + transform__20 * value_z + transform__30 * value_w;
		nearRaw_y = transform__01 * value_x + transform__11 * value_y + transform__21 * value_z + transform__31 * value_w;
		nearRaw_z = transform__02 * value_x + transform__12 * value_y + transform__22 * value_z + transform__32 * value_w;
		nearRaw_w = transform__03 * value_x + transform__13 * value_y + transform__23 * value_z + transform__33 * value_w;
		var value = 1 / farRaw_w;
		var x = farRaw_x * value;
		var y = farRaw_y * value;
		var z = farRaw_z * value;
		var w = farRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var far_x = x;
		var far_y = y;
		var far_z = z;
		var far_w = w;
		var value = 1 / nearRaw_w;
		var x = nearRaw_x * value;
		var y = nearRaw_y * value;
		var z = nearRaw_z * value;
		var w = nearRaw_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var near_x = x;
		var near_y = y;
		var near_z = z;
		var near_w = w;
		var x = far_x - near_x;
		var y = far_y - near_y;
		var z = far_z - near_z;
		var w = far_w - near_w;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var dir_x = x;
		var dir_y = y;
		var dir_z = z;
		var dir_w = w;
		var x = near_x + dir_x * ((0 - near_z) / dir_z);
		var y = near_y + dir_y * ((0 - near_z) / dir_z);
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var point_x = x;
		var point_y = y;
		if(point_x < min_x) {
			min_x = point_x;
		}
		if(point_y < min_y) {
			min_y = point_y;
		}
		if(point_x > max_x) {
			max_x = point_x;
		}
		if(point_y > max_y) {
			max_y = point_y;
		}
		var startInTilesX = (min_x / this.tileWidth | 0) - 1;
		var endInTilesX = (max_x / this.tileWidth | 0) + 1;
		var startInTilesY = (min_y / this.tileHeight | 0) - 1;
		var endInTilesY = (max_y / this.tileHeight | 0) + 1;
		if(startInTilesX < 0) {
			startInTilesX = 0;
		}
		if(startInTilesY < 0) {
			startInTilesY = 0;
		}
		if(endInTilesX > this.widthInTiles) {
			endInTilesX = this.widthInTiles;
		}
		if(endInTilesY > this.heightInTiles) {
			endInTilesY = this.heightInTiles;
		}
		var _g = startInTilesY;
		var _g1 = endInTilesY;
		while(_g < _g1) {
			var y = _g++;
			var _g2 = startInTilesX;
			var _g3 = endInTilesX;
			while(_g2 < _g3) {
				var x = _g2++;
				var index = x + this.widthInTiles * y;
				if(index >= 0 && index < this.tiles.length) {
					var frame = this.tiles[index];
					var orientation = this.orientation[index];
					if(frame >= 0) {
						this.tile.timeline.gotoAndStop(frame);
						this.tile.x = x * this.tileWidth;
						this.tile.y = y * this.tileHeight;
						if((orientation & 4) != 0) {
							this.tile.set_rotation(Math.PI * 0.5);
							this.tile.scaleX = (orientation & 2) != 0 ? -1 : 1;
							this.tile.scaleY = (orientation & 1) != 0 ? 1 : -1;
						} else {
							this.tile.set_rotation(0);
							this.tile.scaleX = (orientation & 1) != 0 ? -1 : 1;
							this.tile.scaleY = (orientation & 2) != 0 ? -1 : 1;
						}
						this.tile.render(paintMode,transform);
					}
				}
			}
		}
	}
	,__class__: com_gEngine_display_extra_TileMapDisplay
});
var com_gEngine_helpers_RectangleDisplay = function() {
	this.animationData = com_gEngine_helpers_RectangleDisplay.data;
	com_gEngine_display_Sprite.call(this);
};
$hxClasses["com.gEngine.helpers.RectangleDisplay"] = com_gEngine_helpers_RectangleDisplay;
com_gEngine_helpers_RectangleDisplay.__name__ = "com.gEngine.helpers.RectangleDisplay";
com_gEngine_helpers_RectangleDisplay.init = function(textureID) {
	com_gEngine_helpers_RectangleDisplay.data = new com_gEngine_AnimationData();
	com_gEngine_helpers_RectangleDisplay.data.name = "rec?";
	var frame = new com_gEngine_Frame();
	frame.drawArea = new com_gEngine_DrawArea(0,0,1,1);
	frame.vertexs = [0,0,1,0,0,1,1,1];
	frame.UVs = [0,0,1,0,0,1,1,1];
	com_gEngine_helpers_RectangleDisplay.data.frames = [frame];
	com_gEngine_helpers_RectangleDisplay.data.texturesID = textureID;
};
com_gEngine_helpers_RectangleDisplay.__super__ = com_gEngine_display_Sprite;
com_gEngine_helpers_RectangleDisplay.prototype = $extend(com_gEngine_display_Sprite.prototype,{
	setColor: function(r,g,b) {
		this.colorMultiplication(r / 255,g / 255,b / 255,1);
	}
	,__class__: com_gEngine_helpers_RectangleDisplay
});
var com_gEngine_helpers_RenderTargetPool = function() {
	this.targets = [];
};
$hxClasses["com.gEngine.helpers.RenderTargetPool"] = com_gEngine_helpers_RenderTargetPool;
com_gEngine_helpers_RenderTargetPool.__name__ = "com.gEngine.helpers.RenderTargetPool";
com_gEngine_helpers_RenderTargetPool.prototype = {
	targets: null
	,getFreeImageId: function(width,height) {
		var _g = 0;
		var _g1 = this.targets;
		while(_g < _g1.length) {
			var target = _g1[_g];
			++_g;
			if(!target.inUse && target.width == width && target.height == height) {
				target.inUse = true;
				return target.textureId;
			}
		}
		return -1;
	}
	,addRenderTarget: function(id,width,height) {
		this.targets.push(new com_gEngine_helpers_ImageProx(id,width,height));
	}
	,release: function(id) {
		var _g = 0;
		var _g1 = this.targets;
		while(_g < _g1.length) {
			var target = _g1[_g];
			++_g;
			if(target.textureId == id) {
				target.inUse = false;
				return;
			}
		}
		throw haxe_Exception.thrown("render target " + id + " not found");
	}
	,releaseAll: function() {
		var _g = 0;
		var _g1 = this.targets;
		while(_g < _g1.length) {
			var target = _g1[_g];
			++_g;
			target.inUse = false;
		}
	}
	,clear: function() {
		this.targets.splice(0,this.targets.length);
	}
	,__class__: com_gEngine_helpers_RenderTargetPool
};
var com_gEngine_helpers_ImageProx = function(id,width,height) {
	this.inUse = true;
	this.textureId = id;
	this.width = width;
	this.height = height;
};
$hxClasses["com.gEngine.helpers.ImageProx"] = com_gEngine_helpers_ImageProx;
com_gEngine_helpers_ImageProx.__name__ = "com.gEngine.helpers.ImageProx";
com_gEngine_helpers_ImageProx.prototype = {
	inUse: null
	,textureId: null
	,width: null
	,height: null
	,__class__: com_gEngine_helpers_ImageProx
};
var com_gEngine_helpers_Screen = function() {
};
$hxClasses["com.gEngine.helpers.Screen"] = com_gEngine_helpers_Screen;
com_gEngine_helpers_Screen.__name__ = "com.gEngine.helpers.Screen";
com_gEngine_helpers_Screen.getWidth = function() {
	return kha_System.windowWidth();
};
com_gEngine_helpers_Screen.getHeight = function() {
	return kha_System.windowHeight();
};
com_gEngine_helpers_Screen.prototype = {
	__class__: com_gEngine_helpers_Screen
};
var com_gEngine_helpers_Timeline = function(frameRate,totalFrames,labels) {
	this.currentTime = 0;
	this.lastFrame = 0;
	this.firstFrame = 0;
	this.loop = true;
	this.playing = true;
	this.currentFrame = 0;
	this.frameSkiped = 0;
	this.frameRate = frameRate;
	this.lastFrame = totalFrames - 1;
	this.totalFrames = totalFrames;
	if(totalFrames == 1) {
		this.playing = false;
	}
	this.labels = labels;
	this.frameJump = true;
};
$hxClasses["com.gEngine.helpers.Timeline"] = com_gEngine_helpers_Timeline;
com_gEngine_helpers_Timeline.__name__ = "com.gEngine.helpers.Timeline";
com_gEngine_helpers_Timeline.prototype = {
	frameRate: null
	,frameSkiped: null
	,totalFrames: null
	,currentFrame: null
	,playing: null
	,frameChange: null
	,loop: null
	,frameJump: null
	,currentAnimation: null
	,firstFrame: null
	,lastFrame: null
	,labels: null
	,currentTime: null
	,update: function(dt) {
		this.frameChange = false;
		this.frameSkiped = 0;
		this.frameJump = false;
		if(!this.playing) {
			return;
		}
		this.currentTime += dt;
		if(this.currentTime < this.frameRate) {
			return;
		}
		this.frameChange = true;
		this.frameSkiped = Math.floor(this.currentTime / this.frameRate);
		this.currentTime -= this.frameRate * this.frameSkiped;
		this.currentFrame += this.frameSkiped;
		if(this.currentFrame >= this.totalFrames) {
			if(this.loop) {
				if(this.currentFrame != this.firstFrame) {
					this.frameJump = true;
				}
				this.currentFrame = this.firstFrame;
			} else {
				this.currentFrame = this.totalFrames - 1;
				this.playing = false;
			}
		}
		if(this.currentFrame <= this.lastFrame && this.currentFrame >= this.firstFrame) {
			return;
		}
		if(this.currentAnimation != null) {
			if(this.loop) {
				this.gotoAndPlay(this.firstFrame);
			} else {
				this.gotoAndStop(this.lastFrame);
			}
		}
	}
	,gotoAndPlay: function(frame) {
		this.currentFrame = frame;
		this.currentTime = 0;
		this.playing = true;
		this.frameJump = true;
	}
	,gotoAndStop: function(frame) {
		this.currentFrame = frame;
		this.currentTime = 0;
		this.playing = false;
		this.frameJump = true;
	}
	,labelFrame: function(text) {
		var _g = 0;
		var _g1 = this.labels;
		while(_g < _g1.length) {
			var label = _g1[_g];
			++_g;
			if(label.text == text) {
				return label;
			}
		}
		throw haxe_Exception.thrown("label " + text + "not found");
	}
	,nextFrame: function() {
		if(this.currentFrame + 1 > this.lastFrame) {
			if(this.loop) {
				return this.firstFrame;
			} else {
				return this.lastFrame;
			}
		}
		return this.currentFrame + 1;
	}
	,currentLabel: function() {
		var frame;
		var _g = 0;
		var _g1 = this.labels;
		while(_g < _g1.length) {
			var label = _g1[_g];
			++_g;
			frame = label.frame;
			if(frame == this.currentFrame || frame > this.currentFrame - this.frameSkiped && frame <= this.currentFrame) {
				return label.text;
			}
			if(frame > this.currentFrame) {
				return null;
			}
		}
		return null;
	}
	,labelEnd: function(text) {
		var counter = 0;
		var _g = 0;
		var _g1 = this.labels;
		while(_g < _g1.length) {
			var label = _g1[_g];
			++_g;
			if(label.text == text) {
				if(this.labels.length == counter + 1) {
					return this.totalFrames - 1;
				}
				return this.labels[counter + 1].frame - 1;
			}
			++counter;
		}
		throw haxe_Exception.thrown("label " + text + "not found");
	}
	,labelEndEvent: function(text,indexStart,prefixIgnore) {
		if(indexStart == null) {
			indexStart = 0;
		}
		var _g = indexStart;
		var _g1 = this.labels.length;
		while(_g < _g1) {
			var i = _g++;
			var label = this.labels[i];
			if(label.text == text) {
				if(this.labels.length == i + 1) {
					return this.totalFrames - 1;
				}
				if(this.labels[i + 1].text.indexOf(prefixIgnore) == 0) {
					return this.labelEndEvent(this.labels[i + 1].text,i + 1,prefixIgnore);
				}
				return this.labels[i + 1].frame - 1;
			}
		}
		throw haxe_Exception.thrown("label " + text + "not found");
	}
	,play: function() {
		this.playing = true;
	}
	,localFrame: function() {
		return this.currentFrame - this.firstFrame;
	}
	,playAnimation: function(animation,loop,force,prefixCharIgnore) {
		if(force == null) {
			force = false;
		}
		if(loop == null) {
			loop = true;
		}
		var firstAnimationFrame = this.labelFrame(animation).frame;
		this.loop = loop;
		if((this.currentAnimation != animation || force || !this.playing) && firstAnimationFrame != -1) {
			this.currentAnimation = animation;
			this.firstFrame = firstAnimationFrame;
			this.lastFrame = prefixCharIgnore == null ? this.labelEnd(this.currentAnimation) : this.labelEndEvent(animation,null,prefixCharIgnore);
			this.gotoAndPlay(this.firstFrame);
		}
	}
	,labelFrameAt: function(frame) {
		var _g = 0;
		var _g1 = this.labels;
		while(_g < _g1.length) {
			var label = _g1[_g];
			++_g;
			if(label.frame == frame) {
				return label.text;
			}
			if(label.frame > frame) {
				return null;
			}
		}
		return null;
	}
	,hasLabel: function(labelText) {
		var _g = 0;
		var _g1 = this.labels;
		while(_g < _g1.length) {
			var label = _g1[_g];
			++_g;
			if(label.text == labelText) {
				return true;
			}
		}
		return false;
	}
	,interchange: function(animation) {
		if(this.currentAnimation != animation) {
			var delta = this.currentFrame - this.firstFrame;
			this.currentAnimation = animation;
			this.firstFrame = this.labelFrame(this.currentAnimation).frame;
			this.gotoAndPlay(this.firstFrame + delta);
		}
	}
	,stop: function() {
		this.playing = false;
	}
	,isComplete: function() {
		if(!this.playing) {
			return !this.loop;
		} else {
			return false;
		}
	}
	,goRandomFrame: function(stop) {
		if(stop == null) {
			stop = true;
		}
		if(stop) {
			this.gotoAndStop(this.totalFrames * Math.random() | 0);
		} else {
			this.gotoAndPlay(this.totalFrames * Math.random() | 0);
		}
	}
	,__class__: com_gEngine_helpers_Timeline
};
var com_gEngine_painters_IPainter = function() { };
$hxClasses["com.gEngine.painters.IPainter"] = com_gEngine_painters_IPainter;
com_gEngine_painters_IPainter.__name__ = "com.gEngine.painters.IPainter";
com_gEngine_painters_IPainter.__isInterface__ = true;
com_gEngine_painters_IPainter.prototype = {
	write: null
	,start: null
	,finish: null
	,render: null
	,canBatch: null
	,vertexCount: null
	,releaseTexture: null
	,adjustRenderArea: null
	,getVertexBuffer: null
	,getVertexDataCounter: null
	,setVertexDataCounter: null
	,destroy: null
	,setProjection: null
	,textureID: null
	,resolution: null
	,filter: null
	,mipMapFilter: null
	,__class__: com_gEngine_painters_IPainter
};
var com_gEngine_painters_PaintInfo = function() {
};
$hxClasses["com.gEngine.painters.PaintInfo"] = com_gEngine_painters_PaintInfo;
com_gEngine_painters_PaintInfo.__name__ = "com.gEngine.painters.PaintInfo";
com_gEngine_painters_PaintInfo.prototype = {
	texture: null
	,blend: null
	,textureFilter: null
	,mipMapFilter: null
	,equal: function(info) {
		if(this.texture == info.texture && this.blend == info.blend && this.textureFilter == info.textureFilter) {
			return this.mipMapFilter == info.mipMapFilter;
		} else {
			return false;
		}
	}
	,__class__: com_gEngine_painters_PaintInfo
};
var com_gEngine_painters_PaintMode = function() {
	this.addA = 0;
	this.addB = 0;
	this.addG = 0;
	this.addR = 0;
	this.mulA = 1;
	this.mulB = 1;
	this.mulG = 1;
	this.mulR = 1;
	this.renderArea = [];
	this.renderAreaUnion = new com_helpers_MinMax();
};
$hxClasses["com.gEngine.painters.PaintMode"] = com_gEngine_painters_PaintMode;
com_gEngine_painters_PaintMode.__name__ = "com.gEngine.painters.PaintMode";
com_gEngine_painters_PaintMode.prototype = {
	currentPainter: null
	,paintInfo: null
	,renderArea: null
	,renderAreaUnion: null
	,camera: null
	,mulR: null
	,mulG: null
	,mulB: null
	,mulA: null
	,addR: null
	,addG: null
	,addB: null
	,addA: null
	,colorTransform: null
	,render: function(clear) {
		if(clear == null) {
			clear = false;
		}
		if(this.currentPainter != null) {
			this.currentPainter.setProjection(this.camera.projection);
			if(this.renderArea.length > 0) {
				this.currentPainter.render(clear,this.renderAreaUnion);
			} else {
				this.currentPainter.render(clear);
			}
		}
	}
	,changePainter: function(painter,paintInfo) {
		this.currentPainter = painter;
		this.currentPainter.textureID = paintInfo.texture;
		this.currentPainter.mipMapFilter = paintInfo.mipMapFilter;
		this.currentPainter.filter = paintInfo.textureFilter;
		this.paintInfo = paintInfo;
	}
	,canBatch: function(info,size,painter) {
		return this.currentPainter == painter;
	}
	,adjustRenderArea: function(area) {
		var length = this.renderArea.push(area);
		if(length == 1) {
			var _this = this.renderAreaUnion;
			var _this1 = _this.max;
			var x = area.max.x;
			var y = area.max.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this1.x = x;
			_this1.y = y;
			var _this1 = _this.min;
			var x = area.min.x;
			var y = area.min.y;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this1.x = x;
			_this1.y = y;
			_this.minZ = -869.1168;
			_this.maxZ = -869.1168;
			_this.isEmpty = _this.width() < 0 || _this.height() < 0;
		} else {
			this.renderAreaUnion.intersection(area);
		}
	}
	,resetRenderArea: function() {
		this.renderArea.pop();
		var _this = this.renderAreaUnion;
		var _this1 = _this.min;
		var x = Infinity;
		var y = Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this1.x = x;
		_this1.y = y;
		var _this1 = _this.max;
		var x = -Infinity;
		var y = -Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this1.x = x;
		_this1.y = y;
		_this.minZ = Infinity;
		_this.maxZ = -Infinity;
		_this.isEmpty = true;
		var _g = 0;
		var _g1 = this.renderArea;
		while(_g < _g1.length) {
			var area = _g1[_g];
			++_g;
			this.renderAreaUnion.intersection(area);
		}
	}
	,getRenderArea: function() {
		return this.renderAreaUnion;
	}
	,hasRenderArea: function() {
		return this.renderArea.length > 0;
	}
	,vertexCount: function() {
		if(this.currentPainter != null) {
			return this.currentPainter.vertexCount();
		}
		return 0;
	}
	,isVisible: function(area) {
		var _this = this.renderAreaUnion;
		if(_this.min.x <= area.max.x && area.min.x <= _this.max.x && _this.min.y <= area.max.y) {
			return area.min.y <= _this.max.y;
		} else {
			return false;
		}
	}
	,__class__: com_gEngine_painters_PaintMode
};
var com_gEngine_painters_Painter = function(autoDestroy,blend,depthWrite,clockWise) {
	if(clockWise == null) {
		clockWise = 2;
	}
	if(depthWrite == null) {
		depthWrite = false;
	}
	if(autoDestroy == null) {
		autoDestroy = true;
	}
	this.mipMapFilter = 0;
	this.filter = 1;
	this.textureID = -1;
	this.counter = 0;
	this.resolution = 1;
	this.canvasHeight = 0;
	this.canvasWidth = 0;
	this.dataPerVertex = 5;
	this.MAX_VERTEX_PER_BUFFER = 6000;
	this.alpha = 0.;
	this.blue = 0.;
	this.green = 0.;
	this.red = 0.;
	if(blend == null) {
		blend = com_gEngine_display_Blend.blendDefault();
	}
	if(autoDestroy) {
		com_gEngine_PainterGarbage.get_i().add(this);
	}
	this.depthWrite = depthWrite;
	this.clockWise = clockWise;
	this.initShaders(blend);
	this.createBuffers();
	this.buffer = this.downloadVertexBuffer();
};
$hxClasses["com.gEngine.painters.Painter"] = com_gEngine_painters_Painter;
com_gEngine_painters_Painter.__name__ = "com.gEngine.painters.Painter";
com_gEngine_painters_Painter.__interfaces__ = [com_gEngine_painters_IPainter];
com_gEngine_painters_Painter.prototype = {
	vertexBuffer: null
	,indexBuffer: null
	,pipeline: null
	,red: null
	,green: null
	,blue: null
	,alpha: null
	,MAX_VERTEX_PER_BUFFER: null
	,dataPerVertex: null
	,mvpID: null
	,textureConstantID: null
	,canvasWidth: null
	,canvasHeight: null
	,projection: null
	,resolution: null
	,counter: null
	,buffer: null
	,textureID: null
	,filter: null
	,mipMapFilter: null
	,paintInfo: null
	,structure: null
	,depthWrite: null
	,clockWise: null
	,write: function(value) {
		this.buffer.setFloat32(this.counter++ * 4,value,true);
	}
	,start: function() {
	}
	,finish: function() {
	}
	,render: function(clear,cropArea) {
		if(clear == null) {
			clear = false;
		}
		if(this.counter == 0) {
			return;
		}
		var vertexCount = this.counter / this.dataPerVertex | 0;
		var canvas = com_gEngine_GEngine.get_i().currentCanvas();
		this.canvasWidth = canvas.get_width();
		this.canvasHeight = canvas.get_height();
		var g = canvas.get_g4();
		this.uploadVertexBuffer(vertexCount);
		if(clear) {
			g.clear(kha_Color.fromFloats(this.red,this.green,this.blue,this.alpha),1);
		}
		g.setVertexBuffer(this.vertexBuffer);
		g.setIndexBuffer(this.indexBuffer);
		g.setPipeline(this.pipeline);
		this.setParameter(g);
		g.setTextureParameters(this.textureConstantID,2,2,this.filter,this.filter,this.mipMapFilter);
		g.drawIndexedVertices(0,vertexCount * 1.5 | 0);
		this.unsetTextures(g);
		this.buffer = this.downloadVertexBuffer();
		++com_gEngine_GEngine.drawCount;
		this.counter = 0;
	}
	,vertexCount: function() {
		return this.counter / this.dataPerVertex | 0;
	}
	,initShaders: function(blend) {
		this.pipeline = new kha_graphics4_PipelineState();
		this.structure = new kha_graphics4_VertexStructure();
		this.defineVertexStructure(this.structure);
		this.pipeline.inputLayout = [this.structure];
		this.pipeline.depthMode = 4;
		this.pipeline.cullMode = this.clockWise;
		this.pipeline.depthWrite = this.depthWrite;
		this.setShaders(this.pipeline);
		var pipeline = this.pipeline;
		pipeline.blendOperation = blend.blendOperation;
		pipeline.blendSource = blend.blendSource;
		pipeline.blendDestination = blend.blendDestination;
		pipeline.alphaBlendSource = blend.alphaBlendSource;
		pipeline.alphaBlendDestination = blend.alphaBlendDestination;
		this.pipeline.compile();
		this.getConstantLocations(this.pipeline);
	}
	,getConstantLocations: function(pipeline) {
		this.mvpID = pipeline.getConstantLocation("projectionMatrix");
		this.textureConstantID = pipeline.getTextureUnit("tex");
	}
	,createBuffers: function() {
		this.vertexBuffer = new kha_graphics4_VertexBuffer(this.MAX_VERTEX_PER_BUFFER,this.structure,1);
		this.indexBuffer = new kha_graphics4_IndexBuffer(this.MAX_VERTEX_PER_BUFFER * 1.5 | 0,0);
		var iData = this.indexBuffer.lock();
		var _g = 0;
		var _g1 = this.MAX_VERTEX_PER_BUFFER / 4 | 0;
		while(_g < _g1) {
			var i = _g++;
			var k = i * 6;
			iData.setUint32(k * 4,i * 4 + 1,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp = k * 4;
			var k1 = i * 6 + 1;
			iData.setUint32(k1 * 4,i * 4,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp1 = k1 * 4;
			var k2 = i * 6 + 2;
			iData.setUint32(k2 * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp2 = k2 * 4;
			var k3 = i * 6 + 3;
			iData.setUint32(k3 * 4,i * 4 + 1,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp3 = k3 * 4;
			var k4 = i * 6 + 4;
			iData.setUint32(k4 * 4,i * 4 + 2,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp4 = k4 * 4;
			var k5 = i * 6 + 5;
			iData.setUint32(k5 * 4,i * 4 + 3,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp5 = k5 * 4;
		}
		this.indexBuffer.unlock();
	}
	,setBlends: function(pipeline,blend) {
		pipeline.blendOperation = blend.blendOperation;
		pipeline.blendSource = blend.blendSource;
		pipeline.blendDestination = blend.blendDestination;
		pipeline.alphaBlendSource = blend.alphaBlendSource;
		pipeline.alphaBlendDestination = blend.alphaBlendDestination;
	}
	,defineVertexStructure: function(structure) {
		structure.add("vertexPosition",2);
		structure.add("texPosition",1);
	}
	,setShaders: function(pipeline) {
		pipeline.vertexShader = kha_Shaders.simple_vert;
		pipeline.fragmentShader = kha_Shaders.simple_frag;
	}
	,setParameter: function(g) {
		g.setMatrix(this.mvpID,this.projection);
		g.setTexture(this.textureConstantID,com_gEngine_GEngine.get_i().textures[this.textureID]);
	}
	,unsetTextures: function(g) {
		g.setTexture(this.textureConstantID,null);
	}
	,downloadVertexBuffer: function() {
		return this.vertexBuffer.lock();
	}
	,uploadVertexBuffer: function(count) {
		this.vertexBuffer.unlock(count);
	}
	,destroy: function() {
		this.vertexBuffer.delete();
		this.indexBuffer.delete();
		this.pipeline.delete();
	}
	,adjustRenderArea: function(area) {
	}
	,canBatch: function(info,size) {
		if(info.texture == this.textureID && info.mipMapFilter == this.mipMapFilter && info.textureFilter == this.filter) {
			return this.counter + size * this.dataPerVertex <= this.MAX_VERTEX_PER_BUFFER * this.dataPerVertex;
		} else {
			return false;
		}
	}
	,setProjection: function(proj) {
		this.projection = proj;
	}
	,releaseTexture: function() {
		return true;
	}
	,getVertexDataCounter: function() {
		return this.counter;
	}
	,setVertexDataCounter: function(data) {
		this.counter = data;
	}
	,getVertexBuffer: function() {
		return this.buffer;
	}
	,__class__: com_gEngine_painters_Painter
};
var com_gEngine_painters_PainterAlpha = function(autoDestroy,blend) {
	if(autoDestroy == null) {
		autoDestroy = true;
	}
	com_gEngine_painters_Painter.call(this,autoDestroy,blend);
	this.dataPerVertex = 6;
};
$hxClasses["com.gEngine.painters.PainterAlpha"] = com_gEngine_painters_PainterAlpha;
com_gEngine_painters_PainterAlpha.__name__ = "com.gEngine.painters.PainterAlpha";
com_gEngine_painters_PainterAlpha.__super__ = com_gEngine_painters_Painter;
com_gEngine_painters_PainterAlpha.prototype = $extend(com_gEngine_painters_Painter.prototype,{
	defineVertexStructure: function(structure) {
		structure.add("vertexPosition",2);
		structure.add("texPosition",2);
	}
	,setShaders: function(pipeline) {
		pipeline.vertexShader = kha_Shaders.simpleAlpha_vert;
		pipeline.fragmentShader = kha_Shaders.simpleAlpha_frag;
	}
	,__class__: com_gEngine_painters_PainterAlpha
});
var com_gEngine_painters_PainterColorTransform = function(autoDestroy,blend,depthWrite) {
	if(depthWrite == null) {
		depthWrite = false;
	}
	if(autoDestroy == null) {
		autoDestroy = true;
	}
	com_gEngine_painters_Painter.call(this,autoDestroy,blend,depthWrite);
	this.dataPerVertex = 13;
};
$hxClasses["com.gEngine.painters.PainterColorTransform"] = com_gEngine_painters_PainterColorTransform;
com_gEngine_painters_PainterColorTransform.__name__ = "com.gEngine.painters.PainterColorTransform";
com_gEngine_painters_PainterColorTransform.__super__ = com_gEngine_painters_Painter;
com_gEngine_painters_PainterColorTransform.prototype = $extend(com_gEngine_painters_Painter.prototype,{
	defineVertexStructure: function(structure) {
		structure.add("vertexPosition",2);
		structure.add("texPosition",1);
		structure.add("colorMul",3);
		structure.add("colorAdd",3);
	}
	,setShaders: function(pipeline) {
		pipeline.vertexShader = kha_Shaders.simpleColorTransformation_vert;
		pipeline.fragmentShader = kha_Shaders.simpleColorTransformation_frag;
	}
	,__class__: com_gEngine_painters_PainterColorTransform
});
var com_gEngine_shaders_RenderPass = function(filters,renderAtEnd) {
	this.filters = filters;
	this.renderAtEnd = renderAtEnd;
};
$hxClasses["com.gEngine.shaders.RenderPass"] = com_gEngine_shaders_RenderPass;
com_gEngine_shaders_RenderPass.__name__ = "com.gEngine.shaders.RenderPass";
com_gEngine_shaders_RenderPass.prototype = {
	renderAtEnd: null
	,filters: null
	,__class__: com_gEngine_shaders_RenderPass
};
var com_gEngine_shaders_ShDontRender = function(autoDestroy) {
	if(autoDestroy == null) {
		autoDestroy = true;
	}
	com_gEngine_painters_Painter.call(this,autoDestroy);
};
$hxClasses["com.gEngine.shaders.ShDontRender"] = com_gEngine_shaders_ShDontRender;
com_gEngine_shaders_ShDontRender.__name__ = "com.gEngine.shaders.ShDontRender";
com_gEngine_shaders_ShDontRender.__super__ = com_gEngine_painters_Painter;
com_gEngine_shaders_ShDontRender.prototype = $extend(com_gEngine_painters_Painter.prototype,{
	__class__: com_gEngine_shaders_ShDontRender
});
var com_gEngine_shaders_ShRender = function(directDraw) {
	if(directDraw == null) {
		directDraw = true;
	}
	this.directDraw = directDraw;
	com_gEngine_painters_Painter.call(this,true);
};
$hxClasses["com.gEngine.shaders.ShRender"] = com_gEngine_shaders_ShRender;
com_gEngine_shaders_ShRender.__name__ = "com.gEngine.shaders.ShRender";
com_gEngine_shaders_ShRender.__super__ = com_gEngine_painters_Painter;
com_gEngine_shaders_ShRender.prototype = $extend(com_gEngine_painters_Painter.prototype,{
	directDraw: null
	,__class__: com_gEngine_shaders_ShRender
});
var com_helpers_FastPoint = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["com.helpers.FastPoint"] = com_helpers_FastPoint;
com_helpers_FastPoint.__name__ = "com.helpers.FastPoint";
com_helpers_FastPoint.prototype = {
	x: null
	,y: null
	,clone: function() {
		return new com_helpers_FastPoint(this.x,this.y);
	}
	,setTo: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
	}
	,__class__: com_helpers_FastPoint
};
var com_helpers_MinMax = function() {
	this.maxZ = -869.1168;
	this.minZ = -869.1168;
	this.min = new com_helpers_FastPoint(Infinity,Infinity);
	this.max = new com_helpers_FastPoint(-Infinity,-Infinity);
};
$hxClasses["com.helpers.MinMax"] = com_helpers_MinMax;
com_helpers_MinMax.__name__ = "com.helpers.MinMax";
com_helpers_MinMax.from = function(left,top,right,bottom) {
	var minMax = new com_helpers_MinMax();
	minMax.min.x = left;
	minMax.min.y = top;
	minMax.max.x = right;
	minMax.max.y = bottom;
	minMax.isEmpty = minMax.width() < 0 || minMax.height() < 0;
	return minMax;
};
com_helpers_MinMax.fromRec = function(x,y,width,height) {
	var minMax = new com_helpers_MinMax();
	minMax.min.x = x;
	minMax.min.y = y;
	minMax.max.x = x + width;
	minMax.max.y = y + height;
	minMax.isEmpty = minMax.width() < 0 || minMax.height() < 0;
	return minMax;
};
com_helpers_MinMax.prototype = {
	min: null
	,max: null
	,minZ: null
	,maxZ: null
	,isEmpty: null
	,reset: function() {
		var _this = this.min;
		var x = Infinity;
		var y = Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		var _this = this.max;
		var x = -Infinity;
		var y = -Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		this.minZ = Infinity;
		this.maxZ = -Infinity;
		this.isEmpty = true;
	}
	,merge: function(value) {
		if(this.min.x > value.min.x) {
			this.min.x = value.min.x;
		}
		if(this.min.y > value.min.y) {
			this.min.y = value.min.y;
		}
		if(this.max.x < value.max.x) {
			this.max.x = value.max.x;
		}
		if(this.max.y < value.max.y) {
			this.max.y = value.max.y;
		}
		if(this.minZ > value.minZ) {
			this.minZ = value.minZ;
		}
		if(this.maxZ < value.maxZ) {
			this.maxZ = value.maxZ;
		}
		this.isEmpty = this.isEmpty && value.isEmpty;
	}
	,intersection: function(value) {
		if(this.min.x > value.max.x || this.max.x < value.min.x || this.min.y > value.max.y || this.max.y < value.min.y) {
			this.isEmpty = true;
			var _this = this.min;
			var x = Infinity;
			var y = Infinity;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this.x = x;
			_this.y = y;
			var _this = this.max;
			var x = -Infinity;
			var y = -Infinity;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			_this.x = x;
			_this.y = y;
			this.minZ = Infinity;
			this.maxZ = -Infinity;
			this.isEmpty = true;
			return;
		}
		if(this.min.x < value.min.x) {
			this.min.x = value.min.x;
		}
		if(this.min.y < value.min.y) {
			this.min.y = value.min.y;
		}
		if(this.max.x > value.max.x) {
			this.max.x = value.max.x;
		}
		if(this.max.y > value.max.y) {
			this.max.y = value.max.y;
		}
	}
	,transform: function(matrix) {
		if(this.isEmpty) {
			return;
		}
		var x = this.min.x;
		var y = this.min.y;
		var z = this.minZ;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var fMin_x = x;
		var fMin_y = y;
		var fMin_z = z;
		var fMin_w = 1;
		var x = this.max.x;
		var y = this.max.y;
		var z = this.maxZ;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var fMax_x = x;
		var fMax_y = y;
		var fMax_z = z;
		var fMax_w = 1;
		var _this = this.min;
		var x = Infinity;
		var y = Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		var _this = this.max;
		var x = -Infinity;
		var y = -Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		this.minZ = Infinity;
		this.maxZ = -Infinity;
		this.isEmpty = true;
		var multvec_x = 0;
		var multvec_y = 0;
		var multvec_z = 0;
		var multvec_w = 1;
		multvec_x = matrix._00 * fMin_x + matrix._10 * fMin_y + matrix._20 * fMin_z + matrix._30 * fMin_w;
		multvec_y = matrix._01 * fMin_x + matrix._11 * fMin_y + matrix._21 * fMin_z + matrix._31 * fMin_w;
		multvec_z = matrix._02 * fMin_x + matrix._12 * fMin_y + matrix._22 * fMin_z + matrix._32 * fMin_w;
		multvec_w = matrix._03 * fMin_x + matrix._13 * fMin_y + matrix._23 * fMin_z + matrix._33 * fMin_w;
		if(this.min.x > multvec_x) {
			this.min.x = multvec_x;
		}
		if(this.min.y > multvec_y) {
			this.min.y = multvec_y;
		}
		if(this.max.x < multvec_x) {
			this.max.x = multvec_x;
		}
		if(this.max.y < multvec_y) {
			this.max.y = multvec_y;
		}
		if(this.minZ > multvec_z) {
			this.minZ = multvec_z;
		}
		if(this.maxZ < multvec_z) {
			this.maxZ = multvec_z;
		}
		this.isEmpty = false;
		var multvec_x = 0;
		var multvec_y = 0;
		var multvec_z = 0;
		var multvec_w = 1;
		multvec_x = matrix._00 * fMax_x + matrix._10 * fMax_y + matrix._20 * fMax_z + matrix._30 * fMax_w;
		multvec_y = matrix._01 * fMax_x + matrix._11 * fMax_y + matrix._21 * fMax_z + matrix._31 * fMax_w;
		multvec_z = matrix._02 * fMax_x + matrix._12 * fMax_y + matrix._22 * fMax_z + matrix._32 * fMax_w;
		multvec_w = matrix._03 * fMax_x + matrix._13 * fMax_y + matrix._23 * fMax_z + matrix._33 * fMax_w;
		if(this.min.x > multvec_x) {
			this.min.x = multvec_x;
		}
		if(this.min.y > multvec_y) {
			this.min.y = multvec_y;
		}
		if(this.max.x < multvec_x) {
			this.max.x = multvec_x;
		}
		if(this.max.y < multvec_y) {
			this.max.y = multvec_y;
		}
		if(this.minZ > multvec_z) {
			this.minZ = multvec_z;
		}
		if(this.maxZ < multvec_z) {
			this.maxZ = multvec_z;
		}
		this.isEmpty = false;
		var x = fMax_x;
		var y = fMax_y;
		var z = fMin_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = 1;
		var multvec_x = 0;
		var multvec_y = 0;
		var multvec_z = 0;
		var multvec_w = 1;
		multvec_x = matrix._00 * value_x + matrix._10 * value_y + matrix._20 * value_z + matrix._30 * value_w;
		multvec_y = matrix._01 * value_x + matrix._11 * value_y + matrix._21 * value_z + matrix._31 * value_w;
		multvec_z = matrix._02 * value_x + matrix._12 * value_y + matrix._22 * value_z + matrix._32 * value_w;
		multvec_w = matrix._03 * value_x + matrix._13 * value_y + matrix._23 * value_z + matrix._33 * value_w;
		if(this.min.x > multvec_x) {
			this.min.x = multvec_x;
		}
		if(this.min.y > multvec_y) {
			this.min.y = multvec_y;
		}
		if(this.max.x < multvec_x) {
			this.max.x = multvec_x;
		}
		if(this.max.y < multvec_y) {
			this.max.y = multvec_y;
		}
		if(this.minZ > multvec_z) {
			this.minZ = multvec_z;
		}
		if(this.maxZ < multvec_z) {
			this.maxZ = multvec_z;
		}
		this.isEmpty = false;
		var x = fMin_x;
		var y = fMin_y;
		var z = fMax_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = 1;
		var multvec_x = 0;
		var multvec_y = 0;
		var multvec_z = 0;
		var multvec_w = 1;
		multvec_x = matrix._00 * value_x + matrix._10 * value_y + matrix._20 * value_z + matrix._30 * value_w;
		multvec_y = matrix._01 * value_x + matrix._11 * value_y + matrix._21 * value_z + matrix._31 * value_w;
		multvec_z = matrix._02 * value_x + matrix._12 * value_y + matrix._22 * value_z + matrix._32 * value_w;
		multvec_w = matrix._03 * value_x + matrix._13 * value_y + matrix._23 * value_z + matrix._33 * value_w;
		if(this.min.x > multvec_x) {
			this.min.x = multvec_x;
		}
		if(this.min.y > multvec_y) {
			this.min.y = multvec_y;
		}
		if(this.max.x < multvec_x) {
			this.max.x = multvec_x;
		}
		if(this.max.y < multvec_y) {
			this.max.y = multvec_y;
		}
		if(this.minZ > multvec_z) {
			this.minZ = multvec_z;
		}
		if(this.maxZ < multvec_z) {
			this.maxZ = multvec_z;
		}
		this.isEmpty = false;
		var x = fMin_x;
		var y = fMax_y;
		var z = fMin_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = 1;
		var multvec_x = 0;
		var multvec_y = 0;
		var multvec_z = 0;
		var multvec_w = 1;
		multvec_x = matrix._00 * value_x + matrix._10 * value_y + matrix._20 * value_z + matrix._30 * value_w;
		multvec_y = matrix._01 * value_x + matrix._11 * value_y + matrix._21 * value_z + matrix._31 * value_w;
		multvec_z = matrix._02 * value_x + matrix._12 * value_y + matrix._22 * value_z + matrix._32 * value_w;
		multvec_w = matrix._03 * value_x + matrix._13 * value_y + matrix._23 * value_z + matrix._33 * value_w;
		if(this.min.x > multvec_x) {
			this.min.x = multvec_x;
		}
		if(this.min.y > multvec_y) {
			this.min.y = multvec_y;
		}
		if(this.max.x < multvec_x) {
			this.max.x = multvec_x;
		}
		if(this.max.y < multvec_y) {
			this.max.y = multvec_y;
		}
		if(this.minZ > multvec_z) {
			this.minZ = multvec_z;
		}
		if(this.maxZ < multvec_z) {
			this.maxZ = multvec_z;
		}
		this.isEmpty = false;
		var x = fMin_x;
		var y = fMax_y;
		var z = fMax_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = 1;
		var multvec_x = 0;
		var multvec_y = 0;
		var multvec_z = 0;
		var multvec_w = 1;
		multvec_x = matrix._00 * value_x + matrix._10 * value_y + matrix._20 * value_z + matrix._30 * value_w;
		multvec_y = matrix._01 * value_x + matrix._11 * value_y + matrix._21 * value_z + matrix._31 * value_w;
		multvec_z = matrix._02 * value_x + matrix._12 * value_y + matrix._22 * value_z + matrix._32 * value_w;
		multvec_w = matrix._03 * value_x + matrix._13 * value_y + matrix._23 * value_z + matrix._33 * value_w;
		if(this.min.x > multvec_x) {
			this.min.x = multvec_x;
		}
		if(this.min.y > multvec_y) {
			this.min.y = multvec_y;
		}
		if(this.max.x < multvec_x) {
			this.max.x = multvec_x;
		}
		if(this.max.y < multvec_y) {
			this.max.y = multvec_y;
		}
		if(this.minZ > multvec_z) {
			this.minZ = multvec_z;
		}
		if(this.maxZ < multvec_z) {
			this.maxZ = multvec_z;
		}
		this.isEmpty = false;
		var x = fMax_x;
		var y = fMin_y;
		var z = fMin_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = 1;
		var multvec_x = 0;
		var multvec_y = 0;
		var multvec_z = 0;
		var multvec_w = 1;
		multvec_x = matrix._00 * value_x + matrix._10 * value_y + matrix._20 * value_z + matrix._30 * value_w;
		multvec_y = matrix._01 * value_x + matrix._11 * value_y + matrix._21 * value_z + matrix._31 * value_w;
		multvec_z = matrix._02 * value_x + matrix._12 * value_y + matrix._22 * value_z + matrix._32 * value_w;
		multvec_w = matrix._03 * value_x + matrix._13 * value_y + matrix._23 * value_z + matrix._33 * value_w;
		if(this.min.x > multvec_x) {
			this.min.x = multvec_x;
		}
		if(this.min.y > multvec_y) {
			this.min.y = multvec_y;
		}
		if(this.max.x < multvec_x) {
			this.max.x = multvec_x;
		}
		if(this.max.y < multvec_y) {
			this.max.y = multvec_y;
		}
		if(this.minZ > multvec_z) {
			this.minZ = multvec_z;
		}
		if(this.maxZ < multvec_z) {
			this.maxZ = multvec_z;
		}
		this.isEmpty = false;
		var x = fMax_x;
		var y = fMin_y;
		var z = fMax_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = z;
		var value_w = 1;
		var multvec_x = 0;
		var multvec_y = 0;
		var multvec_z = 0;
		var multvec_w = 1;
		multvec_x = matrix._00 * value_x + matrix._10 * value_y + matrix._20 * value_z + matrix._30 * value_w;
		multvec_y = matrix._01 * value_x + matrix._11 * value_y + matrix._21 * value_z + matrix._31 * value_w;
		multvec_z = matrix._02 * value_x + matrix._12 * value_y + matrix._22 * value_z + matrix._32 * value_w;
		multvec_w = matrix._03 * value_x + matrix._13 * value_y + matrix._23 * value_z + matrix._33 * value_w;
		if(this.min.x > multvec_x) {
			this.min.x = multvec_x;
		}
		if(this.min.y > multvec_y) {
			this.min.y = multvec_y;
		}
		if(this.max.x < multvec_x) {
			this.max.x = multvec_x;
		}
		if(this.max.y < multvec_y) {
			this.max.y = multvec_y;
		}
		if(this.minZ > multvec_z) {
			this.minZ = multvec_z;
		}
		if(this.maxZ < multvec_z) {
			this.maxZ = multvec_z;
		}
		this.isEmpty = false;
	}
	,perspective: function(projection,width,height) {
		if(this.isEmpty) {
			return;
		}
		var x = this.min.x;
		var y = this.min.y;
		var z = this.minZ;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var fMin_x = x;
		var fMin_y = y;
		var fMin_z = z;
		var fMin_w = 1;
		var x = this.max.x;
		var y = this.max.y;
		var z = this.maxZ;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var fMax_x = x;
		var fMax_y = y;
		var fMax_z = z;
		var fMax_w = 1;
		var _this = this.min;
		var x = Infinity;
		var y = Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		var _this = this.max;
		var x = -Infinity;
		var y = -Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		this.minZ = Infinity;
		this.maxZ = -Infinity;
		this.isEmpty = true;
		var p_x = 0;
		var p_y = 0;
		var p_z = 0;
		var p_w = 1;
		p_x = projection._00 * fMin_x + projection._10 * fMin_y + projection._20 * fMin_z + projection._30 * fMin_w;
		p_y = projection._01 * fMin_x + projection._11 * fMin_y + projection._21 * fMin_z + projection._31 * fMin_w;
		p_z = projection._02 * fMin_x + projection._12 * fMin_y + projection._22 * fMin_z + projection._32 * fMin_w;
		p_w = projection._03 * fMin_x + projection._13 * fMin_y + projection._23 * fMin_z + projection._33 * fMin_w;
		var value = 1 / p_w;
		var x = p_x * value;
		var y = p_y * value;
		var z = p_z * value;
		var w = p_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var hPoint_x = x;
		var hPoint_y = y;
		var hPoint_z = z;
		var hPoint_w = w;
		if(this.min.x > hPoint_x) {
			this.min.x = hPoint_x;
		}
		if(this.min.y > hPoint_y) {
			this.min.y = hPoint_y;
		}
		if(this.max.x < hPoint_x) {
			this.max.x = hPoint_x;
		}
		if(this.max.y < hPoint_y) {
			this.max.y = hPoint_y;
		}
		if(this.minZ > hPoint_z) {
			this.minZ = hPoint_z;
		}
		if(this.maxZ < hPoint_z) {
			this.maxZ = hPoint_z;
		}
		this.isEmpty = false;
		var p_x = 0;
		var p_y = 0;
		var p_z = 0;
		var p_w = 1;
		p_x = projection._00 * fMax_x + projection._10 * fMax_y + projection._20 * fMax_z + projection._30 * fMax_w;
		p_y = projection._01 * fMax_x + projection._11 * fMax_y + projection._21 * fMax_z + projection._31 * fMax_w;
		p_z = projection._02 * fMax_x + projection._12 * fMax_y + projection._22 * fMax_z + projection._32 * fMax_w;
		p_w = projection._03 * fMax_x + projection._13 * fMax_y + projection._23 * fMax_z + projection._33 * fMax_w;
		var value = 1 / p_w;
		var x = p_x * value;
		var y = p_y * value;
		var z = p_z * value;
		var w = p_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var hPoint_x = x;
		var hPoint_y = y;
		var hPoint_z = z;
		var hPoint_w = w;
		if(this.min.x > hPoint_x) {
			this.min.x = hPoint_x;
		}
		if(this.min.y > hPoint_y) {
			this.min.y = hPoint_y;
		}
		if(this.max.x < hPoint_x) {
			this.max.x = hPoint_x;
		}
		if(this.max.y < hPoint_y) {
			this.max.y = hPoint_y;
		}
		if(this.minZ > hPoint_z) {
			this.minZ = hPoint_z;
		}
		if(this.maxZ < hPoint_z) {
			this.maxZ = hPoint_z;
		}
		this.isEmpty = false;
		var x = fMax_x;
		var y = fMax_y;
		var z = fMin_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vector_x = x;
		var vector_y = y;
		var vector_z = z;
		var vector_w = 1;
		var p_x = 0;
		var p_y = 0;
		var p_z = 0;
		var p_w = 1;
		p_x = projection._00 * vector_x + projection._10 * vector_y + projection._20 * vector_z + projection._30 * vector_w;
		p_y = projection._01 * vector_x + projection._11 * vector_y + projection._21 * vector_z + projection._31 * vector_w;
		p_z = projection._02 * vector_x + projection._12 * vector_y + projection._22 * vector_z + projection._32 * vector_w;
		p_w = projection._03 * vector_x + projection._13 * vector_y + projection._23 * vector_z + projection._33 * vector_w;
		var value = 1 / p_w;
		var x = p_x * value;
		var y = p_y * value;
		var z = p_z * value;
		var w = p_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var hPoint_x = x;
		var hPoint_y = y;
		var hPoint_z = z;
		var hPoint_w = w;
		if(this.min.x > hPoint_x) {
			this.min.x = hPoint_x;
		}
		if(this.min.y > hPoint_y) {
			this.min.y = hPoint_y;
		}
		if(this.max.x < hPoint_x) {
			this.max.x = hPoint_x;
		}
		if(this.max.y < hPoint_y) {
			this.max.y = hPoint_y;
		}
		if(this.minZ > hPoint_z) {
			this.minZ = hPoint_z;
		}
		if(this.maxZ < hPoint_z) {
			this.maxZ = hPoint_z;
		}
		this.isEmpty = false;
		var x = fMin_x;
		var y = fMin_y;
		var z = fMax_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vector_x = x;
		var vector_y = y;
		var vector_z = z;
		var vector_w = 1;
		var p_x = 0;
		var p_y = 0;
		var p_z = 0;
		var p_w = 1;
		p_x = projection._00 * vector_x + projection._10 * vector_y + projection._20 * vector_z + projection._30 * vector_w;
		p_y = projection._01 * vector_x + projection._11 * vector_y + projection._21 * vector_z + projection._31 * vector_w;
		p_z = projection._02 * vector_x + projection._12 * vector_y + projection._22 * vector_z + projection._32 * vector_w;
		p_w = projection._03 * vector_x + projection._13 * vector_y + projection._23 * vector_z + projection._33 * vector_w;
		var value = 1 / p_w;
		var x = p_x * value;
		var y = p_y * value;
		var z = p_z * value;
		var w = p_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var hPoint_x = x;
		var hPoint_y = y;
		var hPoint_z = z;
		var hPoint_w = w;
		if(this.min.x > hPoint_x) {
			this.min.x = hPoint_x;
		}
		if(this.min.y > hPoint_y) {
			this.min.y = hPoint_y;
		}
		if(this.max.x < hPoint_x) {
			this.max.x = hPoint_x;
		}
		if(this.max.y < hPoint_y) {
			this.max.y = hPoint_y;
		}
		if(this.minZ > hPoint_z) {
			this.minZ = hPoint_z;
		}
		if(this.maxZ < hPoint_z) {
			this.maxZ = hPoint_z;
		}
		this.isEmpty = false;
		var x = fMin_x;
		var y = fMax_y;
		var z = fMin_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vector_x = x;
		var vector_y = y;
		var vector_z = z;
		var vector_w = 1;
		var p_x = 0;
		var p_y = 0;
		var p_z = 0;
		var p_w = 1;
		p_x = projection._00 * vector_x + projection._10 * vector_y + projection._20 * vector_z + projection._30 * vector_w;
		p_y = projection._01 * vector_x + projection._11 * vector_y + projection._21 * vector_z + projection._31 * vector_w;
		p_z = projection._02 * vector_x + projection._12 * vector_y + projection._22 * vector_z + projection._32 * vector_w;
		p_w = projection._03 * vector_x + projection._13 * vector_y + projection._23 * vector_z + projection._33 * vector_w;
		var value = 1 / p_w;
		var x = p_x * value;
		var y = p_y * value;
		var z = p_z * value;
		var w = p_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var hPoint_x = x;
		var hPoint_y = y;
		var hPoint_z = z;
		var hPoint_w = w;
		if(this.min.x > hPoint_x) {
			this.min.x = hPoint_x;
		}
		if(this.min.y > hPoint_y) {
			this.min.y = hPoint_y;
		}
		if(this.max.x < hPoint_x) {
			this.max.x = hPoint_x;
		}
		if(this.max.y < hPoint_y) {
			this.max.y = hPoint_y;
		}
		if(this.minZ > hPoint_z) {
			this.minZ = hPoint_z;
		}
		if(this.maxZ < hPoint_z) {
			this.maxZ = hPoint_z;
		}
		this.isEmpty = false;
		var x = fMin_x;
		var y = fMax_y;
		var z = fMax_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vector_x = x;
		var vector_y = y;
		var vector_z = z;
		var vector_w = 1;
		var p_x = 0;
		var p_y = 0;
		var p_z = 0;
		var p_w = 1;
		p_x = projection._00 * vector_x + projection._10 * vector_y + projection._20 * vector_z + projection._30 * vector_w;
		p_y = projection._01 * vector_x + projection._11 * vector_y + projection._21 * vector_z + projection._31 * vector_w;
		p_z = projection._02 * vector_x + projection._12 * vector_y + projection._22 * vector_z + projection._32 * vector_w;
		p_w = projection._03 * vector_x + projection._13 * vector_y + projection._23 * vector_z + projection._33 * vector_w;
		var value = 1 / p_w;
		var x = p_x * value;
		var y = p_y * value;
		var z = p_z * value;
		var w = p_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var hPoint_x = x;
		var hPoint_y = y;
		var hPoint_z = z;
		var hPoint_w = w;
		if(this.min.x > hPoint_x) {
			this.min.x = hPoint_x;
		}
		if(this.min.y > hPoint_y) {
			this.min.y = hPoint_y;
		}
		if(this.max.x < hPoint_x) {
			this.max.x = hPoint_x;
		}
		if(this.max.y < hPoint_y) {
			this.max.y = hPoint_y;
		}
		if(this.minZ > hPoint_z) {
			this.minZ = hPoint_z;
		}
		if(this.maxZ < hPoint_z) {
			this.maxZ = hPoint_z;
		}
		this.isEmpty = false;
		var x = fMax_x;
		var y = fMin_y;
		var z = fMax_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vector_x = x;
		var vector_y = y;
		var vector_z = z;
		var vector_w = 1;
		var p_x = 0;
		var p_y = 0;
		var p_z = 0;
		var p_w = 1;
		p_x = projection._00 * vector_x + projection._10 * vector_y + projection._20 * vector_z + projection._30 * vector_w;
		p_y = projection._01 * vector_x + projection._11 * vector_y + projection._21 * vector_z + projection._31 * vector_w;
		p_z = projection._02 * vector_x + projection._12 * vector_y + projection._22 * vector_z + projection._32 * vector_w;
		p_w = projection._03 * vector_x + projection._13 * vector_y + projection._23 * vector_z + projection._33 * vector_w;
		var value = 1 / p_w;
		var x = p_x * value;
		var y = p_y * value;
		var z = p_z * value;
		var w = p_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var hPoint_x = x;
		var hPoint_y = y;
		var hPoint_z = z;
		var hPoint_w = w;
		if(this.min.x > hPoint_x) {
			this.min.x = hPoint_x;
		}
		if(this.min.y > hPoint_y) {
			this.min.y = hPoint_y;
		}
		if(this.max.x < hPoint_x) {
			this.max.x = hPoint_x;
		}
		if(this.max.y < hPoint_y) {
			this.max.y = hPoint_y;
		}
		if(this.minZ > hPoint_z) {
			this.minZ = hPoint_z;
		}
		if(this.maxZ < hPoint_z) {
			this.maxZ = hPoint_z;
		}
		this.isEmpty = false;
		var x = fMax_x;
		var y = fMin_y;
		var z = fMin_z;
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var vector_x = x;
		var vector_y = y;
		var vector_z = z;
		var vector_w = 1;
		var p_x = 0;
		var p_y = 0;
		var p_z = 0;
		var p_w = 1;
		p_x = projection._00 * vector_x + projection._10 * vector_y + projection._20 * vector_z + projection._30 * vector_w;
		p_y = projection._01 * vector_x + projection._11 * vector_y + projection._21 * vector_z + projection._31 * vector_w;
		p_z = projection._02 * vector_x + projection._12 * vector_y + projection._22 * vector_z + projection._32 * vector_w;
		p_w = projection._03 * vector_x + projection._13 * vector_y + projection._23 * vector_z + projection._33 * vector_w;
		var value = 1 / p_w;
		var x = p_x * value;
		var y = p_y * value;
		var z = p_z * value;
		var w = p_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var hPoint_x = x;
		var hPoint_y = y;
		var hPoint_z = z;
		var hPoint_w = w;
		if(this.min.x > hPoint_x) {
			this.min.x = hPoint_x;
		}
		if(this.min.y > hPoint_y) {
			this.min.y = hPoint_y;
		}
		if(this.max.x < hPoint_x) {
			this.max.x = hPoint_x;
		}
		if(this.max.y < hPoint_y) {
			this.max.y = hPoint_y;
		}
		if(this.minZ > hPoint_z) {
			this.minZ = hPoint_z;
		}
		if(this.maxZ < hPoint_z) {
			this.maxZ = hPoint_z;
		}
		this.isEmpty = false;
		this.min.x *= width * 0.5;
		this.min.y *= height * 0.5;
		this.max.x *= width * 0.5;
		this.max.y *= height * 0.5;
	}
	,mergePerspectiveVector: function(vector,perspective) {
		var p_x = 0;
		var p_y = 0;
		var p_z = 0;
		var p_w = 1;
		p_x = perspective._00 * vector.x + perspective._10 * vector.y + perspective._20 * vector.z + perspective._30 * vector.w;
		p_y = perspective._01 * vector.x + perspective._11 * vector.y + perspective._21 * vector.z + perspective._31 * vector.w;
		p_z = perspective._02 * vector.x + perspective._12 * vector.y + perspective._22 * vector.z + perspective._32 * vector.w;
		p_w = perspective._03 * vector.x + perspective._13 * vector.y + perspective._23 * vector.z + perspective._33 * vector.w;
		var value = 1 / p_w;
		var x = p_x * value;
		var y = p_y * value;
		var z = p_z * value;
		var w = p_w * value;
		if(w == null) {
			w = 1;
		}
		if(z == null) {
			z = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var hPoint_x = x;
		var hPoint_y = y;
		var hPoint_z = z;
		var hPoint_w = w;
		if(this.min.x > hPoint_x) {
			this.min.x = hPoint_x;
		}
		if(this.min.y > hPoint_y) {
			this.min.y = hPoint_y;
		}
		if(this.max.x < hPoint_x) {
			this.max.x = hPoint_x;
		}
		if(this.max.y < hPoint_y) {
			this.max.y = hPoint_y;
		}
		if(this.minZ > hPoint_z) {
			this.minZ = hPoint_z;
		}
		if(this.maxZ < hPoint_z) {
			this.maxZ = hPoint_z;
		}
		this.isEmpty = false;
	}
	,transform3: function(matrix) {
		if(this.isEmpty) {
			return;
		}
		var x = this.min.x;
		var y = this.min.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var fMin_x = x;
		var fMin_y = y;
		var x = this.max.x;
		var y = this.max.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var fMax_x = x;
		var fMax_y = y;
		var _this = this.min;
		var x = Infinity;
		var y = Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		var _this = this.max;
		var x = -Infinity;
		var y = -Infinity;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		this.minZ = Infinity;
		this.maxZ = -Infinity;
		this.isEmpty = true;
		var w = matrix._02 * fMin_x + matrix._12 * fMin_y + matrix._22;
		var x = (matrix._00 * fMin_x + matrix._10 * fMin_y + matrix._20) / w;
		var y = (matrix._01 * fMin_x + matrix._11 * fMin_y + matrix._21) / w;
		this.mergeVec(new kha_math_FastVector2(x,y));
		var w = matrix._02 * fMax_x + matrix._12 * fMax_y + matrix._22;
		var x = (matrix._00 * fMax_x + matrix._10 * fMax_y + matrix._20) / w;
		var y = (matrix._01 * fMax_x + matrix._11 * fMax_y + matrix._21) / w;
		this.mergeVec(new kha_math_FastVector2(x,y));
		var x = fMin_x;
		var y = fMax_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = matrix._02 * value_x + matrix._12 * value_y + matrix._22;
		var x = (matrix._00 * value_x + matrix._10 * value_y + matrix._20) / w;
		var y = (matrix._01 * value_x + matrix._11 * value_y + matrix._21) / w;
		this.mergeVec(new kha_math_FastVector2(x,y));
		var x = fMax_x;
		var y = fMin_y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = matrix._02 * value_x + matrix._12 * value_y + matrix._22;
		var x = (matrix._00 * value_x + matrix._10 * value_y + matrix._20) / w;
		var y = (matrix._01 * value_x + matrix._11 * value_y + matrix._21) / w;
		this.mergeVec(new kha_math_FastVector2(x,y));
	}
	,mergeRec: function(x,y,width,height) {
		if(this.min.x > x) {
			this.min.x = x;
		}
		if(this.min.y > y) {
			this.min.y = y;
		}
		if(this.max.x < x + width) {
			this.max.x = x + width;
		}
		if(this.max.y < y + height) {
			this.max.y = y + height;
		}
		this.isEmpty = this.width() < 0 || this.height() < 0;
	}
	,mergeVec: function(multvec) {
		if(this.min.x > multvec.x) {
			this.min.x = multvec.x;
		}
		if(this.min.y > multvec.y) {
			this.min.y = multvec.y;
		}
		if(this.max.x < multvec.x) {
			this.max.x = multvec.x;
		}
		if(this.max.y < multvec.y) {
			this.max.y = multvec.y;
		}
		this.isEmpty = this.width() < 0 || this.height() < 0;
	}
	,mergeVec4: function(multvec) {
		if(this.min.x > multvec.x) {
			this.min.x = multvec.x;
		}
		if(this.min.y > multvec.y) {
			this.min.y = multvec.y;
		}
		if(this.max.x < multvec.x) {
			this.max.x = multvec.x;
		}
		if(this.max.y < multvec.y) {
			this.max.y = multvec.y;
		}
		if(this.minZ > multvec.z) {
			this.minZ = multvec.z;
		}
		if(this.maxZ < multvec.z) {
			this.maxZ = multvec.z;
		}
		this.isEmpty = false;
	}
	,mergeValue: function(x,y) {
		if(this.min.x > x) {
			this.min.x = x;
		}
		if(this.min.y > y) {
			this.min.y = y;
		}
		if(this.max.x < x) {
			this.max.x = x;
		}
		if(this.max.y < y) {
			this.max.y = y;
		}
		this.isEmpty = false;
	}
	,addBorderWidth: function(value) {
		this.min.x -= value;
		this.max.x += value;
	}
	,addBorderHeight: function(value) {
		this.min.y -= value;
		this.max.y += value;
	}
	,width: function() {
		return this.max.x - this.min.x;
	}
	,height: function() {
		return this.max.y - this.min.y;
	}
	,set: function(left,top,right,bottom) {
		this.min.x = left;
		this.min.y = top;
		this.max.x = right;
		this.max.y = bottom;
		this.isEmpty = this.width() < 0 || this.height() < 0;
	}
	,setFrom: function(minMax) {
		var _this = this.max;
		var x = minMax.max.x;
		var y = minMax.max.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		var _this = this.min;
		var x = minMax.min.x;
		var y = minMax.min.y;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		this.minZ = -869.1168;
		this.maxZ = -869.1168;
		this.isEmpty = this.width() < 0 || this.height() < 0;
	}
	,scale: function(scaleX,scaleY) {
		this.min.x *= scaleX;
		this.min.y *= scaleY;
		this.max.x *= scaleX;
		this.max.y *= scaleY;
	}
	,contains: function(minMax) {
		if(this.min.x <= minMax.max.x && minMax.min.x <= this.max.x && this.min.y <= minMax.max.y) {
			return minMax.min.y <= this.max.y;
		} else {
			return false;
		}
	}
	,offset: function(x,y) {
		this.min.x += x;
		this.min.y += y;
		this.max.x += x;
		this.max.y += y;
	}
	,flipY: function(height) {
		var t = height - this.min.y;
		this.min.y = height - this.max.y;
		this.max.y = t;
	}
	,inside: function(x,y) {
		if(x > this.min.x && x < this.max.x && y > this.min.y) {
			return y < this.max.y;
		} else {
			return false;
		}
	}
	,__class__: com_helpers_MinMax
};
var com_helpers_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["com.helpers.Point"] = com_helpers_Point;
com_helpers_Point.__name__ = "com.helpers.Point";
com_helpers_Point.Lerp = function(A,B,s) {
	return A * (1 - s) + B * s;
};
com_helpers_Point.Length = function(A,B) {
	var deltaX = A.x - B.x;
	var deltaY = A.y - B.y;
	return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
};
com_helpers_Point.prototype = {
	x: null
	,y: null
	,clone: function() {
		return new com_helpers_Point(this.x,this.y);
	}
	,setTo: function(x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.x = x;
		this.y = y;
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,normalize: function() {
		var length = Math.sqrt(this.x * this.x + this.y * this.y);
		this.x /= length;
		this.y /= length;
	}
	,__class__: com_helpers_Point
};
var com_helpers_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["com.helpers.Rectangle"] = com_helpers_Rectangle;
com_helpers_Rectangle.__name__ = "com.helpers.Rectangle";
com_helpers_Rectangle.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,clone: function() {
		return new com_helpers_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(mouseX,mouseY) {
		if(mouseX > this.x && mouseX < this.x + this.width && mouseY > this.y) {
			return mouseY < this.y + this.height;
		} else {
			return false;
		}
	}
	,__class__: com_helpers_Rectangle
};
var com_helpers_SIMDOperations = function() { };
$hxClasses["com.helpers.SIMDOperations"] = com_helpers_SIMDOperations;
com_helpers_SIMDOperations.__name__ = "com.helpers.SIMDOperations";
com_helpers_SIMDOperations.setMatrix = function(matrix) {
	com_helpers_SIMDOperations.row1 = new kha_simd_Float32x4(matrix._00,matrix._10,matrix._20,matrix._30);
	com_helpers_SIMDOperations.row2 = new kha_simd_Float32x4(matrix._01,matrix._11,matrix._21,matrix._31);
	com_helpers_SIMDOperations.row3 = new kha_simd_Float32x4(matrix._02,matrix._12,matrix._22,matrix._32);
	com_helpers_SIMDOperations.row4 = new kha_simd_Float32x4(matrix._03,matrix._13,matrix._23,matrix._33);
};
com_helpers_SIMDOperations.multiply = function(point) {
	var vec__0 = point.x;
	var vec__1 = point.y;
	var vec__2 = point.z;
	var vec__3 = point.w;
	var a = com_helpers_SIMDOperations.row1;
	var xVec__0 = a._0 * vec__0;
	var xVec__1 = a._1 * vec__1;
	var xVec__2 = a._2 * vec__2;
	var xVec__3 = a._3 * vec__3;
	var a = com_helpers_SIMDOperations.row2;
	var yVec__0 = a._0 * vec__0;
	var yVec__1 = a._1 * vec__1;
	var yVec__2 = a._2 * vec__2;
	var yVec__3 = a._3 * vec__3;
	var a = com_helpers_SIMDOperations.row3;
	var zVec__0 = a._0 * vec__0;
	var zVec__1 = a._1 * vec__1;
	var zVec__2 = a._2 * vec__2;
	var zVec__3 = a._3 * vec__3;
	var value = 0;
	value = xVec__0;
	var value1 = 0;
	value1 = xVec__1;
	var value2 = 0;
	value2 = xVec__2;
	var value3 = 0;
	value3 = xVec__3;
	var value4 = 0;
	value4 = yVec__0;
	var value5 = 0;
	value5 = yVec__1;
	var value6 = 0;
	value6 = yVec__2;
	var value7 = 0;
	value7 = yVec__3;
	var value8 = 0;
	value8 = zVec__0;
	var value9 = 0;
	value9 = zVec__1;
	var value10 = 0;
	value10 = zVec__2;
	var value11 = 0;
	value11 = zVec__3;
	return new kha_math_FastVector4(value + value1 + value2 + value3,value4 + value5 + value6 + value7,value8 + value9 + value10 + value11);
};
com_helpers_SIMDOperations.vectorSum = function(vec) {
	var value = 0;
	value = vec._0;
	var value1 = 0;
	value1 = vec._1;
	var value2 = 0;
	value2 = vec._2;
	var value3 = 0;
	value3 = vec._3;
	return value + value1 + value2 + value3;
};
com_helpers_SIMDOperations.multiplyMat = function(a,b) {
	return new kha_math_FastMatrix4(a._00 * b._00 + a._10 * b._01 + a._20 * b._02 + a._30 * b._03,a._00 * b._10 + a._10 * b._11 + a._20 * b._12 + a._30 * b._13,a._00 * b._20 + a._10 * b._21 + a._20 * b._22 + a._30 * b._23,a._00 * b._30 + a._10 * b._31 + a._20 * b._32 + a._30 * b._33,a._01 * b._00 + a._11 * b._01 + a._21 * b._02 + a._31 * b._03,a._01 * b._10 + a._11 * b._11 + a._21 * b._12 + a._31 * b._13,a._01 * b._20 + a._11 * b._21 + a._21 * b._22 + a._31 * b._23,a._01 * b._30 + a._11 * b._31 + a._21 * b._32 + a._31 * b._33,a._02 * b._00 + a._12 * b._01 + a._22 * b._02 + a._32 * b._03,a._02 * b._10 + a._12 * b._11 + a._22 * b._12 + a._32 * b._13,a._02 * b._20 + a._12 * b._21 + a._22 * b._22 + a._32 * b._23,a._02 * b._30 + a._12 * b._31 + a._22 * b._32 + a._32 * b._33,a._03 * b._00 + a._13 * b._01 + a._23 * b._02 + a._33 * b._03,a._03 * b._10 + a._13 * b._11 + a._23 * b._12 + a._33 * b._13,a._03 * b._20 + a._13 * b._21 + a._23 * b._22 + a._33 * b._23,a._03 * b._30 + a._13 * b._31 + a._23 * b._32 + a._33 * b._33);
};
var com_imageAtlas_AtlasGenerator = function() { };
$hxClasses["com.imageAtlas.AtlasGenerator"] = com_imageAtlas_AtlasGenerator;
com_imageAtlas_AtlasGenerator.__name__ = "com.imageAtlas.AtlasGenerator";
com_imageAtlas_AtlasGenerator.generate = function(width,height,bitmaps,separation) {
	if(separation == null) {
		separation = 2;
	}
	if(com_imageAtlas_AtlasGenerator.clearPipeline == null) {
		com_imageAtlas_AtlasGenerator.clearPipeline = com_imageAtlas_AtlasGenerator.createClearPipeline();
	}
	bitmaps.sort(com_imageAtlas_AtlasGenerator.sortArea);
	var atlasImage = kha_Image.createRenderTarget(width,height,0,0,0);
	var realWidth = atlasImage.get_realWidth();
	var realHeight = atlasImage.get_realWidth();
	var atlasMap = new com_imageAtlas_ImageTree(width,height,separation);
	var g = new com_imageAtlas_SingleImagePainter(atlasImage.get_g4());
	g.setProjection(width,height);
	g.begin(true,kha_Color.fromFloats(0,0,0,0));
	var _g = 0;
	while(_g < bitmaps.length) {
		var bitmap = bitmaps[_g];
		++_g;
		var rectangle = atlasMap.insertImage(bitmap);
		if(rectangle == null) {
			throw haxe_Exception.thrown("not enough space on the atlas texture , atlas id " + bitmap.name + ", create another atlas");
		}
		if(bitmap.hasPreRender) {
			g.end();
			bitmap.preRender();
			g.begin(false);
		}
		if(bitmap.specialPipeline != null) {
			g.setPipeline(bitmap.specialPipeline);
		} else {
			g.setPipeline(com_imageAtlas_AtlasGenerator.clearPipeline);
		}
		g.setBilinearMipmapFilter(bitmap.hasMipMap);
		g.setBilinearFilter(false);
		g.drawScaledSubImage(bitmap.image,bitmap.x * bitmap.scaleX,bitmap.y * bitmap.scaleY,bitmap.width * bitmap.scaleX,bitmap.height * bitmap.scaleY,rectangle.x - 1,rectangle.y,bitmap.width + 2,bitmap.height);
		g.drawScaledSubImage(bitmap.image,bitmap.x * bitmap.scaleX,bitmap.y * bitmap.scaleY,bitmap.width * bitmap.scaleX,bitmap.height * bitmap.scaleY,rectangle.x,rectangle.y - 1,bitmap.width,bitmap.height + 2);
		g.setBilinearFilter(true);
		g.drawScaledSubImage(bitmap.image,bitmap.x * bitmap.scaleX,bitmap.y * bitmap.scaleY,bitmap.width * bitmap.scaleX,bitmap.height * bitmap.scaleY,rectangle.x,rectangle.y,bitmap.width,bitmap.height);
		rectangle.x += bitmap.extrude;
		rectangle.y += bitmap.extrude;
		rectangle.width += -separation * 2 - bitmap.extrude * 2;
		rectangle.height += -separation * 2 - bitmap.extrude * 2;
		var _this = bitmap.minUV;
		var x = rectangle.x / realWidth;
		var y = rectangle.y / realHeight;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		_this.x = x;
		_this.y = y;
		var _this1 = bitmap.maxUV;
		var x1 = (rectangle.x + rectangle.width) / realWidth;
		var y1 = (rectangle.y + rectangle.height) / realHeight;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		_this1.x = x1;
		_this1.y = y1;
	}
	g.end();
	var img = kha_Image.createRenderTarget(1,1);
	img.unload();
	atlasImage.generateMipmaps(4);
	return atlasImage;
};
com_imageAtlas_AtlasGenerator.sortArea = function(b1,b2) {
	return b2.width * b2.height - b1.width * b1.height | 0;
};
com_imageAtlas_AtlasGenerator.createClearPipeline = function() {
	var shaderPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_Graphics2.createImageVertexStructure());
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 2;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 2;
	shaderPipeline.compile();
	return shaderPipeline;
};
var com_imageAtlas_Bitmap = function() {
	this.hasPreRender = false;
	this.hasMipMap = false;
	this.specialPipeline = null;
	this.maxUV = new com_helpers_Point(1,1);
	this.minUV = new com_helpers_Point(0,0);
	this.scaleY = 1;
	this.scaleX = 1;
	this.extrude = 0;
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
};
$hxClasses["com.imageAtlas.Bitmap"] = com_imageAtlas_Bitmap;
com_imageAtlas_Bitmap.__name__ = "com.imageAtlas.Bitmap";
com_imageAtlas_Bitmap.prototype = {
	name: null
	,image: null
	,x: null
	,y: null
	,width: null
	,height: null
	,extrude: null
	,scaleX: null
	,scaleY: null
	,minUV: null
	,maxUV: null
	,specialPipeline: null
	,hasMipMap: null
	,hasPreRender: null
	,preRender: function() {
	}
	,__class__: com_imageAtlas_Bitmap
};
var com_imageAtlas_ImageTree = function(width,height,imageSeparation) {
	this.firstNode = new com_imageAtlas_Node();
	this.firstNode.rect = new com_helpers_Rectangle(0,0,width,height);
	this.imageSeparation = imageSeparation * 2;
};
$hxClasses["com.imageAtlas.ImageTree"] = com_imageAtlas_ImageTree;
com_imageAtlas_ImageTree.__name__ = "com.imageAtlas.ImageTree";
com_imageAtlas_ImageTree.prototype = {
	firstNode: null
	,imageSeparation: null
	,insertImage: function(bitmap) {
		var node = this.Insert(bitmap,this.firstNode);
		if(node != null) {
			var rec = node.rect.clone();
			rec.x += this.imageSeparation * 0.5;
			rec.y += this.imageSeparation * 0.5;
			return rec;
		} else {
			return null;
		}
	}
	,Insert: function(bitmap,node) {
		if(node.Right != null || node.Left != null) {
			var newNode = this.Insert(bitmap,node.Left);
			if(newNode != null) {
				return newNode;
			}
			return this.Insert(bitmap,node.Right);
		} else {
			if(node.bitmap != null) {
				return null;
			}
			if(!this.rectangleFitIn(node.rect,bitmap)) {
				return null;
			}
			var normal = this.rectangleFitIn(node.rect,bitmap);
			var rotated = this.rectangleFitIn(node.rect,bitmap);
			if(!normal && !rotated) {
				return null;
			} else {
				var tmp = rotated && !normal;
			}
			if(this.rectangleFitPerfect(node.rect,bitmap)) {
				node.bitmap = bitmap;
				return node;
			}
			var rc = node.rect;
			node.Left = new com_imageAtlas_Node();
			node.Right = new com_imageAtlas_Node();
			var dw = rc.width - (bitmap.width + this.imageSeparation);
			var dh = rc.height - (bitmap.height + this.imageSeparation);
			if(dw < dh) {
				node.Left.rect = new com_helpers_Rectangle(rc.x,rc.y,rc.width,bitmap.height + this.imageSeparation);
				node.Right.rect = new com_helpers_Rectangle(rc.x,rc.y + bitmap.height + this.imageSeparation,rc.width,rc.height - (bitmap.height + this.imageSeparation));
			} else {
				node.Left.rect = new com_helpers_Rectangle(rc.x,rc.y,bitmap.width + this.imageSeparation,rc.height);
				node.Right.rect = new com_helpers_Rectangle(rc.x + bitmap.width + this.imageSeparation,rc.y,rc.width - (bitmap.width + this.imageSeparation),rc.height);
			}
			return this.Insert(bitmap,node.Left);
		}
	}
	,rectangleFitPerfect: function(rect,bitmap) {
		if(rect.width == bitmap.width + this.imageSeparation) {
			return rect.height == bitmap.height + this.imageSeparation;
		} else {
			return false;
		}
	}
	,rectangleFitIn: function(rect,bitmap) {
		if(rect.width >= bitmap.width + this.imageSeparation) {
			return rect.height >= bitmap.height + this.imageSeparation;
		} else {
			return false;
		}
	}
	,__class__: com_imageAtlas_ImageTree
};
var com_imageAtlas_Node = function() {
};
$hxClasses["com.imageAtlas.Node"] = com_imageAtlas_Node;
com_imageAtlas_Node.__name__ = "com.imageAtlas.Node";
com_imageAtlas_Node.prototype = {
	Left: null
	,Right: null
	,rect: null
	,bitmap: null
	,__class__: com_imageAtlas_Node
};
var com_imageAtlas_SingleImagePainter = function(g4) {
	this.opacity = 1;
	this.color = -1;
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	com_imageAtlas_SingleImagePainter.bufferStart = 0;
	com_imageAtlas_SingleImagePainter.bufferIndex = 0;
	com_imageAtlas_SingleImagePainter.initShaders();
	this.myPipeline = com_imageAtlas_SingleImagePainter.standardImagePipeline;
	this.initBuffers();
};
$hxClasses["com.imageAtlas.SingleImagePainter"] = com_imageAtlas_SingleImagePainter;
com_imageAtlas_SingleImagePainter.__name__ = "com.imageAtlas.SingleImagePainter";
com_imageAtlas_SingleImagePainter.initShaders = function() {
	if(com_imageAtlas_SingleImagePainter.structure == null) {
		com_imageAtlas_SingleImagePainter.structure = kha_graphics4_Graphics2.createImageVertexStructure();
	}
	if(com_imageAtlas_SingleImagePainter.standardImagePipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createImagePipeline(com_imageAtlas_SingleImagePainter.structure);
		com_imageAtlas_SingleImagePainter.standardImagePipeline = new kha_graphics4_PerFramebufferPipelineCache(pipeline,true);
	}
};
com_imageAtlas_SingleImagePainter.prototype = {
	projectionMatrix: null
	,bilinear: null
	,bilinearMipmaps: null
	,g: null
	,myPipeline: null
	,color: null
	,opacity: null
	,lastPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : com_imageAtlas_SingleImagePainter.standardImagePipeline;
		return this.myPipeline;
	}
	,setPipeline: function(pipeline) {
		if(pipeline == this.lastPipeline) {
			return;
		}
		this.lastPipeline = pipeline;
		this.drawBuffer(false);
		if(pipeline == null) {
			pipeline = null;
		} else {
			this.set_pipeline(new kha_graphics4_SimplePipelineCache(pipeline,true));
		}
	}
	,setProjection: function(width,height) {
		if(kha_Image.renderTargetsInvertedY()) {
			var tx = -width / width;
			var ty = -height / height;
			var tz = -1.0002000200020003;
			this.projectionMatrix = new kha_math_FastMatrix4(2 / width,0,0,tx,0,2.0 / height,0,ty,0,0,-0.002000200020002,tz,0,0,0,1);
		} else {
			var tx = -width / width;
			var ty = -height / (0 - height);
			var tz = -1.0002000200020003;
			this.projectionMatrix = new kha_math_FastMatrix4(2 / width,0,0,tx,0,2.0 / (0 - height),0,ty,0,0,-0.002000200020002,tz,0,0,0,1);
		}
	}
	,initBuffers: function() {
		if(com_imageAtlas_SingleImagePainter.rectVertexBuffer == null) {
			com_imageAtlas_SingleImagePainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4,com_imageAtlas_SingleImagePainter.structure,1);
			com_imageAtlas_SingleImagePainter.rectVertices = com_imageAtlas_SingleImagePainter.rectVertexBuffer.lock();
			com_imageAtlas_SingleImagePainter.indexBuffer = new kha_graphics4_IndexBuffer(6,0);
			var indices = com_imageAtlas_SingleImagePainter.indexBuffer.lock();
			var k = 0;
			indices.setUint32(k * 4,0,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp = k * 4;
			var k = 1;
			indices.setUint32(k * 4,1,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp = k * 4;
			var k = 2;
			indices.setUint32(k * 4,2,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp = k * 4;
			var k = 3;
			indices.setUint32(k * 4,0,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp = k * 4;
			var k = 4;
			indices.setUint32(k * 4,2,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp = k * 4;
			var k = 5;
			indices.setUint32(k * 4,3,kha_arrays_ByteArray.LITTLE_ENDIAN);
			var tmp = k * 4;
			com_imageAtlas_SingleImagePainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = (com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart) * 9 * 4;
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32(baseIndex * 4,bottomleftx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 1) * 4,bottomlefty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 2) * 4,-5.0,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 9) * 4,topleftx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 10) * 4,toplefty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 11) * 4,-5.0,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 18) * 4,toprightx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 19) * 4,toprighty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 20) * 4,-5.0,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 27) * 4,bottomrightx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 28) * 4,bottomrighty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 29) * 4,-5.0,true);
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = (com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart) * 9 * 4;
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 3) * 4,left,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 4) * 4,bottom,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 12) * 4,left,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 13) * 4,top,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 21) * 4,right,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 22) * 4,top,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 30) * 4,right,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 31) * 4,bottom,true);
	}
	,setRectColor: function(r,g,b,a) {
		var baseIndex = (com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart) * 9 * 4;
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 5) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 6) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 7) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 8) * 4,a,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 14) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 15) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 16) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 17) * 4,a,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 23) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 24) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 25) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 26) * 4,a,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 32) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 33) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 34) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 35) * 4,a,true);
	}
	,drawBuffer: function(end) {
		if(com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart == 0) {
			return;
		}
		com_imageAtlas_SingleImagePainter.rectVertexBuffer.unlock((com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart) * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(com_imageAtlas_SingleImagePainter.rectVertexBuffer);
		this.g.setIndexBuffer(com_imageAtlas_SingleImagePainter.indexBuffer);
		this.g.setTexture(pipeline.textureLocation,com_imageAtlas_SingleImagePainter.lastTexture);
		this.g.setTextureParameters(pipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,this.bilinearMipmaps ? 2 : 0);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(com_imageAtlas_SingleImagePainter.bufferStart * 2 * 3,(com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart) * 2 * 3);
		this.g.setTexture(pipeline.textureLocation,null);
		if(end || (com_imageAtlas_SingleImagePainter.bufferStart + com_imageAtlas_SingleImagePainter.bufferIndex + 1) * 4 >= 1) {
			com_imageAtlas_SingleImagePainter.bufferStart = 0;
			com_imageAtlas_SingleImagePainter.bufferIndex = 0;
			com_imageAtlas_SingleImagePainter.rectVertices = com_imageAtlas_SingleImagePainter.rectVertexBuffer.lock(0);
		} else {
			com_imageAtlas_SingleImagePainter.bufferStart = com_imageAtlas_SingleImagePainter.bufferIndex;
			com_imageAtlas_SingleImagePainter.rectVertices = com_imageAtlas_SingleImagePainter.rectVertexBuffer.lock(com_imageAtlas_SingleImagePainter.bufferStart * 4);
		}
	}
	,setBilinearFilter: function(bilinear) {
		this.drawBuffer(false);
		com_imageAtlas_SingleImagePainter.lastTexture = null;
		this.bilinear = bilinear;
	}
	,setBilinearMipmapFilter: function(bilinear) {
		this.drawBuffer(false);
		com_imageAtlas_SingleImagePainter.lastTexture = null;
		this.bilinearMipmaps = bilinear;
	}
	,drawImage2: function(img,sx,sy,sw,sh,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(com_imageAtlas_SingleImagePainter.bufferStart + com_imageAtlas_SingleImagePainter.bufferIndex + 1 >= 1 || com_imageAtlas_SingleImagePainter.lastTexture != null && tex != com_imageAtlas_SingleImagePainter.lastTexture) {
			this.drawBuffer(false);
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = (com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart) * 9 * 4;
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 3) * 4,left,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 4) * 4,bottom,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 12) * 4,left,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 13) * 4,top,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 21) * 4,right,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 22) * 4,top,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 30) * 4,right,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 31) * 4,bottom,true);
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart) * 9 * 4;
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 5) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 6) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 7) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 8) * 4,a,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 14) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 15) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 16) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 17) * 4,a,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 23) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 24) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 25) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 26) * 4,a,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 32) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 33) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 34) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 35) * 4,a,true);
		var baseIndex = (com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart) * 9 * 4;
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32(baseIndex * 4,bottomleftx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 1) * 4,bottomlefty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 2) * 4,-5.0,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 9) * 4,topleftx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 10) * 4,toplefty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 11) * 4,-5.0,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 18) * 4,toprightx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 19) * 4,toprighty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 20) * 4,-5.0,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 27) * 4,bottomrightx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 28) * 4,bottomrighty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 29) * 4,-5.0,true);
		++com_imageAtlas_SingleImagePainter.bufferIndex;
		com_imageAtlas_SingleImagePainter.lastTexture = tex;
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		var x = dx;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p1_x = x;
		var p1_y = y;
		var x = dx;
		var y = dy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p2_x = x;
		var p2_y = y;
		var x = dx + dw;
		var y = dy;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p3_x = x;
		var p3_y = y;
		var x = dx + dw;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p4_x = x;
		var p4_y = y;
		var bottomleftx = p1_x;
		var bottomlefty = p1_y;
		var topleftx = p2_x;
		var toplefty = p2_y;
		var toprightx = p3_x;
		var toprighty = p3_y;
		var bottomrightx = p4_x;
		var bottomrighty = p4_y;
		var opacity = this.opacity;
		var color = this.color;
		var tex = img;
		if(com_imageAtlas_SingleImagePainter.bufferStart + com_imageAtlas_SingleImagePainter.bufferIndex + 1 >= 1 || com_imageAtlas_SingleImagePainter.lastTexture != null && tex != com_imageAtlas_SingleImagePainter.lastTexture) {
			this.drawBuffer(false);
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = (com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart) * 9 * 4;
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 3) * 4,left,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 4) * 4,bottom,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 12) * 4,left,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 13) * 4,top,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 21) * 4,right,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 22) * 4,top,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 30) * 4,right,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 31) * 4,bottom,true);
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart) * 9 * 4;
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 5) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 6) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 7) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 8) * 4,a,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 14) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 15) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 16) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 17) * 4,a,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 23) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 24) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 25) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 26) * 4,a,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 32) * 4,r,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 33) * 4,g,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 34) * 4,b,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 35) * 4,a,true);
		var baseIndex = (com_imageAtlas_SingleImagePainter.bufferIndex - com_imageAtlas_SingleImagePainter.bufferStart) * 9 * 4;
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32(baseIndex * 4,bottomleftx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 1) * 4,bottomlefty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 2) * 4,-5.0,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 9) * 4,topleftx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 10) * 4,toplefty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 11) * 4,-5.0,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 18) * 4,toprightx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 19) * 4,toprighty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 20) * 4,-5.0,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 27) * 4,bottomrightx,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 28) * 4,bottomrighty,true);
		com_imageAtlas_SingleImagePainter.rectVertices.setFloat32((baseIndex + 29) * 4,-5.0,true);
		++com_imageAtlas_SingleImagePainter.bufferIndex;
		com_imageAtlas_SingleImagePainter.lastTexture = tex;
	}
	,begin: function(clear,color) {
		if(color == null) {
			color = 0;
		}
		if(clear == null) {
			clear = true;
		}
		this.g.begin();
		if(clear) {
			this.g.clear(color);
		}
	}
	,end: function() {
		if(com_imageAtlas_SingleImagePainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		com_imageAtlas_SingleImagePainter.lastTexture = null;
		this.g.end();
	}
	,__class__: com_imageAtlas_SingleImagePainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var com_loading_Resource = function() { };
$hxClasses["com.loading.Resource"] = com_loading_Resource;
com_loading_Resource.__name__ = "com.loading.Resource";
com_loading_Resource.__isInterface__ = true;
com_loading_Resource.prototype = {
	load: null
	,loadLocal: null
	,unload: null
	,unloadLocal: null
	,__class__: com_loading_Resource
};
var com_loading_AtlasJoinable = function() { };
$hxClasses["com.loading.AtlasJoinable"] = com_loading_AtlasJoinable;
com_loading_AtlasJoinable.__name__ = "com.loading.AtlasJoinable";
com_loading_AtlasJoinable.__isInterface__ = true;
com_loading_AtlasJoinable.__interfaces__ = [com_loading_Resource];
com_loading_AtlasJoinable.prototype = {
	getBitmaps: null
	,update: null
	,__class__: com_loading_AtlasJoinable
};
var com_loading_Resources = function() {
	this.resources = [];
};
$hxClasses["com.loading.Resources"] = com_loading_Resources;
com_loading_Resources.__name__ = "com.loading.Resources";
com_loading_Resources.prototype = {
	keepData: null
	,resources: null
	,loadedCount: null
	,onFinish: null
	,loadingFile: null
	,add: function(resource) {
		this.resources.push(resource);
	}
	,percentage: function() {
		return this.loadedCount / this.resources.length;
	}
	,load: function(onFinish) {
		this.loadedCount = 0;
		this.onFinish = onFinish;
		if(this.resources.length == 0) {
			onFinish();
			return;
		}
		this.loadingFile = true;
		this.resources[0].load($bind(this,this.onLoad));
	}
	,loadLocal: function(onFinish) {
		this.loadedCount = 0;
		this.onFinish = onFinish;
		if(this.resources.length == 0) {
			onFinish();
			return;
		}
		this.loadingFile = true;
		this.resources[0].loadLocal($bind(this,this.onLoad));
	}
	,update: function() {
		if(!this.loadingFile && this.loadedCount < this.resources.length) {
			this.loadingFile = true;
			this.resources[this.loadedCount].load($bind(this,this.onLoad));
		}
	}
	,onLoad: function() {
		++this.loadedCount;
		this.loadingFile = false;
		if(this.loadedCount == this.resources.length) {
			this.onFinish();
		}
	}
	,unload: function() {
		if(this.keepData) {
			var _g = 0;
			var _g1 = this.resources;
			while(_g < _g1.length) {
				var resource = _g1[_g];
				++_g;
				resource.unloadLocal();
			}
			this.resources.splice(0,this.resources.length);
		} else {
			var _g = 0;
			var _g1 = this.resources;
			while(_g < _g1.length) {
				var resource = _g1[_g];
				++_g;
				resource.unload();
			}
			this.resources.splice(0,this.resources.length);
		}
	}
	,__class__: com_loading_Resources
};
var com_loading_basicResources_DataLoader = function(dataName) {
	this.name = dataName;
};
$hxClasses["com.loading.basicResources.DataLoader"] = com_loading_basicResources_DataLoader;
com_loading_basicResources_DataLoader.__name__ = "com.loading.basicResources.DataLoader";
com_loading_basicResources_DataLoader.__interfaces__ = [com_loading_Resource];
com_loading_basicResources_DataLoader.prototype = {
	name: null
	,load: function(callback) {
		kha_Assets.loadBlob(this.name,function(b) {
			callback();
		},null,{ fileName : "com/loading/basicResources/DataLoader.hx", lineNumber : 15, className : "com.loading.basicResources.DataLoader", methodName : "load"});
	}
	,loadLocal: function(callback) {
		callback();
	}
	,unload: function() {
		kha_Assets.blobs.get(this.name).unload();
		kha_Assets.blobs[this.name] = null;
	}
	,unloadLocal: function() {
	}
	,__class__: com_loading_basicResources_DataLoader
};
var com_loading_basicResources_TilesheetLoader = function(imageName,tileWidth,tileHeight,spacing) {
	this.imageName = imageName;
	this.tileWidth = tileWidth;
	this.tileHeight = tileHeight;
	this.spacing = spacing;
};
$hxClasses["com.loading.basicResources.TilesheetLoader"] = com_loading_basicResources_TilesheetLoader;
com_loading_basicResources_TilesheetLoader.__name__ = "com.loading.basicResources.TilesheetLoader";
com_loading_basicResources_TilesheetLoader.__interfaces__ = [com_loading_AtlasJoinable];
com_loading_basicResources_TilesheetLoader.createFrame = function(x,y,width,height,rotated,textureOriginX,textureOriginY,textureW,textureH) {
	if(rotated) {
		var temp = width;
		width = height;
		height = temp;
	}
	var frame = new com_gEngine_Frame();
	frame.vertexs = [];
	frame.UVs = [];
	frame.drawArea = new com_gEngine_DrawArea(x,y,x + width,y + height);
	frame.UVs.push(textureOriginX / textureW);
	frame.UVs.push(textureOriginY / textureH);
	frame.UVs.push(textureOriginX / textureW);
	frame.UVs.push((textureOriginY + height) / textureH);
	frame.UVs.push((textureOriginX + width) / textureW);
	frame.UVs.push(textureOriginY / textureH);
	frame.UVs.push((textureOriginX + width) / textureW);
	frame.UVs.push((textureOriginY + height) / textureH);
	if(rotated) {
		frame.vertexs.push(x);
		frame.vertexs.push(y + height);
		frame.vertexs.push(x + width);
		frame.vertexs.push(y + height);
		frame.vertexs.push(x);
		frame.vertexs.push(y);
		frame.vertexs.push(x + width);
		frame.vertexs.push(y);
	} else {
		frame.vertexs.push(x);
		frame.vertexs.push(y);
		frame.vertexs.push(x);
		frame.vertexs.push(y + height);
		frame.vertexs.push(x + width);
		frame.vertexs.push(y);
		frame.vertexs.push(x + width);
		frame.vertexs.push(y + height);
	}
	return frame;
};
com_loading_basicResources_TilesheetLoader.prototype = {
	imageName: null
	,tileWidth: null
	,tileHeight: null
	,spacing: null
	,bitmaps: null
	,animation: null
	,onLoad: null
	,load: function(callback) {
		var _gthis = this;
		kha_Assets.loadImage(this.imageName,function(image) {
			_gthis.fromSpriteSheet();
			callback();
		},null,{ fileName : "com/loading/basicResources/TilesheetLoader.hx", lineNumber : 31, className : "com.loading.basicResources.TilesheetLoader", methodName : "load"});
	}
	,loadLocal: function(callback) {
		this.fromSpriteSheet();
		callback();
	}
	,unload: function() {
		kha_Assets.images.get(this.imageName).unload();
		kha_Assets.images[this.imageName] = null;
	}
	,unloadLocal: function() {
	}
	,fromSpriteSheet: function() {
		var image = Reflect.field(kha_Assets.images,this.imageName);
		var spritesCount = (image.get_width() / (this.tileWidth + this.spacing * 2) | 0) * (image.get_height() / (this.tileHeight + this.spacing * 2) | 0);
		this.animation = new com_gEngine_AnimationData();
		var frames = [];
		this.bitmaps = [];
		var widthInFrames = image.get_width() / (this.tileWidth + this.spacing * 2) | 0;
		var _g = 0;
		var _g1 = spritesCount;
		while(_g < _g1) {
			var counter = _g++;
			var x = counter % widthInFrames * (this.tileWidth + this.spacing * 2);
			var y = (counter / widthInFrames | 0) * (this.tileHeight + this.spacing * 2);
			frames.push(com_loading_basicResources_TilesheetLoader.createFrame(0,0,this.tileWidth,this.tileHeight,false,x,y,image.get_realWidth(),image.get_realHeight()));
			var bitmap = new com_imageAtlas_Bitmap();
			bitmap.x = x;
			bitmap.y = y;
			bitmap.width = this.tileWidth + this.spacing * 2;
			bitmap.height = this.tileHeight + this.spacing * 2;
			bitmap.name = this.imageName + counter;
			bitmap.extrude = this.spacing;
			bitmap.image = image;
			this.bitmaps.push(bitmap);
		}
		this.animation.frames = frames;
		this.animation.name = this.imageName;
		this.animation.labels = [];
		this.animation.texturesID = com_gEngine_GEngine.get_i().addTexture(image);
		com_basicDisplay_SpriteSheetDB.get_i().add(this.animation);
	}
	,getBitmaps: function() {
		return this.bitmaps;
	}
	,update: function(atlasId) {
		this.animation.texturesID = atlasId;
		this.animation.hasMipMap = true;
		var _g = 0;
		var _g1 = this.bitmaps.length;
		while(_g < _g1) {
			var i = _g++;
			var frame = this.animation.frames[i];
			var bitmap = this.bitmaps[i];
			var UVs = [];
			UVs.push(bitmap.minUV.x);
			UVs.push(bitmap.minUV.y);
			UVs.push(bitmap.minUV.x);
			UVs.push(bitmap.maxUV.y);
			UVs.push(bitmap.maxUV.x);
			UVs.push(bitmap.minUV.y);
			UVs.push(bitmap.maxUV.x);
			UVs.push(bitmap.maxUV.y);
			frame.UVs = UVs;
		}
	}
	,__class__: com_loading_basicResources_TilesheetLoader
};
var com_loading_basicResources_FontLoader = function(fontName,size) {
	com_loading_basicResources_TilesheetLoader.call(this,fontName,0,0,0);
	this.size = size;
};
$hxClasses["com.loading.basicResources.FontLoader"] = com_loading_basicResources_FontLoader;
com_loading_basicResources_FontLoader.__name__ = "com.loading.basicResources.FontLoader";
com_loading_basicResources_FontLoader.__super__ = com_loading_basicResources_TilesheetLoader;
com_loading_basicResources_FontLoader.prototype = $extend(com_loading_basicResources_TilesheetLoader.prototype,{
	size: null
	,load: function(callback) {
		var _gthis = this;
		kha_Assets.loadFont(this.imageName,function(font) {
			_gthis.fromKhaFont();
			callback();
		},null,{ fileName : "com/loading/basicResources/FontLoader.hx", lineNumber : 30, className : "com.loading.basicResources.FontLoader", methodName : "load"});
	}
	,loadLocal: function(callback) {
		this.fromKhaFont();
		callback();
	}
	,tex: null
	,fromKhaFont: function() {
		var font = Reflect.field(kha_Assets.fonts,this.imageName);
		var kravurImage = font._get(this.size);
		this.tex = kravurImage.getTexture();
		this.animation = new com_gEngine_FontData(this.size);
		var frames = [];
		var labels = [];
		this.bitmaps = [];
		var bakedQuadCache = new kha_AlignedQuad();
		var counter = 0;
		if(com_loading_basicResources_FontLoader.pipeline == null) {
			com_loading_basicResources_FontLoader.pipeline = kha_graphics4_Graphics2.createTextPipeline(kha_graphics4_Graphics2.createTextVertexStructure());
			com_loading_basicResources_FontLoader.pipeline.blendSource = 3;
			com_loading_basicResources_FontLoader.pipeline.blendDestination = 2;
			com_loading_basicResources_FontLoader.pipeline.alphaBlendSource = 3;
			com_loading_basicResources_FontLoader.pipeline.alphaBlendDestination = 2;
			com_loading_basicResources_FontLoader.pipeline.compile();
		}
		while(true) {
			var q = kravurImage.getBakedQuad(bakedQuadCache,counter,0,0);
			if(q != null) {
				++counter;
				var x = q.s0 * this.tex.get_realWidth() | 0;
				var y = q.t0 * this.tex.get_realHeight() | 0;
				var width = (q.s1 - q.s0) * this.tex.get_realWidth() | 0;
				var height = (q.t1 - q.t0) * this.tex.get_realHeight() | 0;
				frames.push(com_loading_basicResources_TilesheetLoader.createFrame(q.x0 | 0,q.y0 | 0,width,height,false,x,y,this.tex.get_realWidth(),this.tex.get_realHeight()));
				var bitmap = new com_imageAtlas_Bitmap();
				bitmap.x = x;
				bitmap.y = y;
				bitmap.width = width;
				bitmap.height = height;
				bitmap.specialPipeline = com_loading_basicResources_FontLoader.pipeline;
				bitmap.image = this.tex;
				this.bitmaps.push(bitmap);
			} else {
				break;
			}
		}
		this.animation.frames = frames;
		this.animation.name = this.imageName;
		this.animation.labels = labels;
		com_basicDisplay_SpriteSheetDB.get_i().add(this.animation);
	}
	,unload: function() {
	}
	,unloadLocal: function() {
	}
	,__class__: com_loading_basicResources_FontLoader
});
var com_loading_basicResources_ImageLoader = function(imageName) {
	var description = Reflect.field(kha_Assets.images,imageName + "Description");
	com_loading_basicResources_TilesheetLoader.call(this,imageName,description.original_width,description.original_height,0);
};
$hxClasses["com.loading.basicResources.ImageLoader"] = com_loading_basicResources_ImageLoader;
com_loading_basicResources_ImageLoader.__name__ = "com.loading.basicResources.ImageLoader";
com_loading_basicResources_ImageLoader.__super__ = com_loading_basicResources_TilesheetLoader;
com_loading_basicResources_ImageLoader.prototype = $extend(com_loading_basicResources_TilesheetLoader.prototype,{
	__class__: com_loading_basicResources_ImageLoader
});
var com_loading_basicResources_JoinAtlas = function(width,height,separation) {
	if(separation == null) {
		separation = 2;
	}
	this.loadedCounter = 0;
	this.width = width;
	this.height = height;
	this.separation = separation;
	this.resources = [];
};
$hxClasses["com.loading.basicResources.JoinAtlas"] = com_loading_basicResources_JoinAtlas;
com_loading_basicResources_JoinAtlas.__name__ = "com.loading.basicResources.JoinAtlas";
com_loading_basicResources_JoinAtlas.__interfaces__ = [com_loading_Resource];
com_loading_basicResources_JoinAtlas.prototype = {
	width: null
	,height: null
	,resources: null
	,onFinish: null
	,loadedCounter: null
	,separation: null
	,image: null
	,add: function(resource) {
		this.resources.push(resource);
	}
	,load: function(callback) {
		this.onFinish = callback;
		var _g = 0;
		var _g1 = this.resources;
		while(_g < _g1.length) {
			var resource = _g1[_g];
			++_g;
			resource.load($bind(this,this.onLoad));
		}
		if(this.resources.length == 0) {
			callback();
		}
	}
	,loadLocal: function(callback) {
		this.onFinish = callback;
		var _g = 0;
		var _g1 = this.resources;
		while(_g < _g1.length) {
			var resource = _g1[_g];
			++_g;
			resource.loadLocal($bind(this,this.onLoad));
		}
		if(this.resources.length == 0) {
			callback();
		}
	}
	,onLoad: function() {
		++this.loadedCounter;
		if(this.loadedCounter == this.resources.length) {
			this.createAtlas();
		}
	}
	,createAtlas: function() {
		var bitmaps = [];
		var _g = 0;
		var _g1 = this.resources;
		while(_g < _g1.length) {
			var resource = _g1[_g];
			++_g;
			bitmaps = bitmaps.concat(resource.getBitmaps());
		}
		this.image = com_imageAtlas_AtlasGenerator.generate(this.width,this.height,bitmaps,this.separation);
		var textureId = com_gEngine_GEngine.get_i().addTexture(this.image);
		var _g = 0;
		var _g1 = this.resources;
		while(_g < _g1.length) {
			var resource = _g1[_g];
			++_g;
			resource.update(textureId);
		}
		this.onFinish();
	}
	,unload: function() {
		var _g = 0;
		var _g1 = this.resources;
		while(_g < _g1.length) {
			var resource = _g1[_g];
			++_g;
			resource.unload();
		}
		if(this.image != null) {
			this.image.unload();
		}
	}
	,unloadLocal: function() {
		var _g = 0;
		var _g1 = this.resources;
		while(_g < _g1.length) {
			var resource = _g1[_g];
			++_g;
			resource.unloadLocal();
		}
		this.image.unload();
	}
	,__class__: com_loading_basicResources_JoinAtlas
};
var com_loading_basicResources_SpriteSheetLoader = function(imageName,tileWidth,tileHeight,spacing,animations) {
	com_loading_basicResources_TilesheetLoader.call(this,imageName,tileWidth,tileHeight,spacing);
	this.animations = animations;
};
$hxClasses["com.loading.basicResources.SpriteSheetLoader"] = com_loading_basicResources_SpriteSheetLoader;
com_loading_basicResources_SpriteSheetLoader.__name__ = "com.loading.basicResources.SpriteSheetLoader";
com_loading_basicResources_SpriteSheetLoader.__super__ = com_loading_basicResources_TilesheetLoader;
com_loading_basicResources_SpriteSheetLoader.prototype = $extend(com_loading_basicResources_TilesheetLoader.prototype,{
	animations: null
	,baseFrames: null
	,fromSpriteSheet: function() {
		com_loading_basicResources_TilesheetLoader.prototype.fromSpriteSheet.call(this);
		this.baseFrames = this.animation.frames;
		var frames = [];
		var frameCounter = 0;
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var seq = _g1[_g];
			++_g;
			var label = new com_gEngine_Label(seq.name,frameCounter);
			this.animation.labels.push(label);
			var _g2 = 0;
			var _g3 = seq.frames;
			while(_g2 < _g3.length) {
				var frame = _g3[_g2];
				++_g2;
				frames.push(this.baseFrames[frame]);
			}
			frameCounter += seq.frames.length;
		}
		this.animation.frames = frames;
	}
	,update: function(atlasId) {
		var temp = this.animation.frames;
		this.animation.frames = this.baseFrames;
		com_loading_basicResources_TilesheetLoader.prototype.update.call(this,atlasId);
		this.animation.frames = temp;
	}
	,__class__: com_loading_basicResources_SpriteSheetLoader
});
var com_loading_basicResources_Sequence = function(name,frames) {
	this.name = name;
	this.frames = frames;
};
$hxClasses["com.loading.basicResources.Sequence"] = com_loading_basicResources_Sequence;
com_loading_basicResources_Sequence.__name__ = "com.loading.basicResources.Sequence";
com_loading_basicResources_Sequence.at = function(name,start,end) {
	var frames = [];
	var _g = start;
	var _g1 = end + 1;
	while(_g < _g1) {
		var i = _g++;
		frames.push(i);
	}
	return new com_loading_basicResources_Sequence(name,frames);
};
com_loading_basicResources_Sequence.prototype = {
	name: null
	,frames: null
	,__class__: com_loading_basicResources_Sequence
};
var com_soundLib_SoundManager = function() { };
$hxClasses["com.soundLib.SoundManager"] = com_soundLib_SoundManager;
com_soundLib_SoundManager.__name__ = "com.soundLib.SoundManager";
com_soundLib_SoundManager.init = function() {
	com_soundLib_SoundManager.map = new haxe_ds_StringMap();
	com_soundLib_SoundManager.initied = true;
};
com_soundLib_SoundManager.addSound = function(soundName,sound) {
	com_soundLib_SoundManager.map.h[soundName] = sound;
};
com_soundLib_SoundManager.playFx = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	if(!Object.prototype.hasOwnProperty.call(com_soundLib_SoundManager.map.h,sound)) {
		throw haxe_Exception.thrown("Sound not found");
	}
	if(!com_soundLib_SoundManager.soundMuted) {
		return kha_audio2_Audio1.play(com_soundLib_SoundManager.map.h[sound],loop);
	}
	return null;
};
com_soundLib_SoundManager.playMusic = function(soundName,loop) {
	if(loop == null) {
		loop = true;
	}
	if(!Object.prototype.hasOwnProperty.call(com_soundLib_SoundManager.map.h,soundName)) {
		throw haxe_Exception.thrown("Sound not found " + soundName);
	}
	if(com_soundLib_SoundManager.music != null) {
		com_soundLib_SoundManager.music.stop();
	}
	com_soundLib_SoundManager.musicName = soundName;
	if(!com_soundLib_SoundManager.musicMuted) {
		var sound = com_soundLib_SoundManager.map.h[soundName];
		if(sound.compressedData != null) {
			com_soundLib_SoundManager.music = kha_audio2_Audio1.stream(sound,loop);
		} else {
			com_soundLib_SoundManager.music = kha_audio2_Audio1.play(sound,loop);
		}
	}
};
com_soundLib_SoundManager.switchSound = function() {
	if(com_soundLib_SoundManager.soundMuted) {
		com_soundLib_SoundManager.unMuteSound();
	} else {
		com_soundLib_SoundManager.muteSound();
	}
};
com_soundLib_SoundManager.switchMusic = function() {
	if(com_soundLib_SoundManager.musicMuted) {
		com_soundLib_SoundManager.unMuteMusic();
	} else {
		com_soundLib_SoundManager.muteMusic();
	}
};
com_soundLib_SoundManager.muteSound = function() {
	com_soundLib_SoundManager.soundMuted = true;
};
com_soundLib_SoundManager.muteMusic = function() {
	com_soundLib_SoundManager.musicMuted = true;
	if(com_soundLib_SoundManager.music != null) {
		com_soundLib_SoundManager.musicPosition = com_soundLib_SoundManager.music.get_position();
		com_soundLib_SoundManager.music.pause();
	}
};
com_soundLib_SoundManager.musicVolume = function(vol) {
	if(com_soundLib_SoundManager.music != null) {
		com_soundLib_SoundManager.music.set_volume(vol);
	}
};
com_soundLib_SoundManager.stopMusic = function() {
	if(com_soundLib_SoundManager.music != null) {
		com_soundLib_SoundManager.musicPosition = com_soundLib_SoundManager.music.get_position();
		com_soundLib_SoundManager.music.stop();
		com_soundLib_SoundManager.music = null;
	}
};
com_soundLib_SoundManager.unMuteSound = function() {
	com_soundLib_SoundManager.soundMuted = false;
};
com_soundLib_SoundManager.unMuteMusic = function() {
	com_soundLib_SoundManager.musicMuted = false;
	if(com_soundLib_SoundManager.music != null) {
		com_soundLib_SoundManager.music.play();
	}
};
com_soundLib_SoundManager.reset = function() {
	com_soundLib_SoundManager.map = new haxe_ds_StringMap();
};
var format_tmx_TmxOrientation = $hxEnums["format.tmx.TmxOrientation"] = { __ename__:true,__constructs__:null
	,Orthogonal: {_hx_name:"Orthogonal",_hx_index:0,__enum__:"format.tmx.TmxOrientation",toString:$estr}
	,Isometric: {_hx_name:"Isometric",_hx_index:1,__enum__:"format.tmx.TmxOrientation",toString:$estr}
	,Staggered: {_hx_name:"Staggered",_hx_index:2,__enum__:"format.tmx.TmxOrientation",toString:$estr}
	,Hexagonal: {_hx_name:"Hexagonal",_hx_index:3,__enum__:"format.tmx.TmxOrientation",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:4,value:value,__enum__:"format.tmx.TmxOrientation",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxOrientation.__constructs__ = [format_tmx_TmxOrientation.Orthogonal,format_tmx_TmxOrientation.Isometric,format_tmx_TmxOrientation.Staggered,format_tmx_TmxOrientation.Hexagonal,format_tmx_TmxOrientation.Unknown];
var format_tmx_TmxRenderOrder = $hxEnums["format.tmx.TmxRenderOrder"] = { __ename__:true,__constructs__:null
	,RightDown: {_hx_name:"RightDown",_hx_index:0,__enum__:"format.tmx.TmxRenderOrder",toString:$estr}
	,RightUp: {_hx_name:"RightUp",_hx_index:1,__enum__:"format.tmx.TmxRenderOrder",toString:$estr}
	,LeftDown: {_hx_name:"LeftDown",_hx_index:2,__enum__:"format.tmx.TmxRenderOrder",toString:$estr}
	,LeftUp: {_hx_name:"LeftUp",_hx_index:3,__enum__:"format.tmx.TmxRenderOrder",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:4,value:value,__enum__:"format.tmx.TmxRenderOrder",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxRenderOrder.__constructs__ = [format_tmx_TmxRenderOrder.RightDown,format_tmx_TmxRenderOrder.RightUp,format_tmx_TmxRenderOrder.LeftDown,format_tmx_TmxRenderOrder.LeftUp,format_tmx_TmxRenderOrder.Unknown];
var format_tmx_TmxStaggerIndex = $hxEnums["format.tmx.TmxStaggerIndex"] = { __ename__:true,__constructs__:null
	,Even: {_hx_name:"Even",_hx_index:0,__enum__:"format.tmx.TmxStaggerIndex",toString:$estr}
	,Odd: {_hx_name:"Odd",_hx_index:1,__enum__:"format.tmx.TmxStaggerIndex",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:2,value:value,__enum__:"format.tmx.TmxStaggerIndex",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxStaggerIndex.__constructs__ = [format_tmx_TmxStaggerIndex.Even,format_tmx_TmxStaggerIndex.Odd,format_tmx_TmxStaggerIndex.Unknown];
var format_tmx_TmxStaggerAxis = $hxEnums["format.tmx.TmxStaggerAxis"] = { __ename__:true,__constructs__:null
	,AxisX: {_hx_name:"AxisX",_hx_index:0,__enum__:"format.tmx.TmxStaggerAxis",toString:$estr}
	,AxisY: {_hx_name:"AxisY",_hx_index:1,__enum__:"format.tmx.TmxStaggerAxis",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:2,value:value,__enum__:"format.tmx.TmxStaggerAxis",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxStaggerAxis.__constructs__ = [format_tmx_TmxStaggerAxis.AxisX,format_tmx_TmxStaggerAxis.AxisY,format_tmx_TmxStaggerAxis.Unknown];
var format_tmx_TmxMap = function(version,orientation,width,height,tileWidth,tileHeight,backgroundColor,renderOrder,staggerIndex,staggerAxis,hexSideLength,nextObjectId,properties,tilesets,layers,infinite) {
	this.version = version;
	this.orientation = orientation;
	this.width = width;
	this.height = height;
	this.tileWidth = tileWidth;
	this.tileHeight = tileHeight;
	this.backgroundColor = backgroundColor;
	this.renderOrder = renderOrder;
	this.staggerIndex = staggerIndex;
	this.staggerAxis = staggerAxis;
	this.hexSideLength = hexSideLength;
	this.nextObjectId = nextObjectId;
	this.properties = properties;
	this.tilesets = tilesets;
	this.layers = layers;
	this.infinite = infinite;
};
$hxClasses["format.tmx.TmxMap"] = format_tmx_TmxMap;
format_tmx_TmxMap.__name__ = "format.tmx.TmxMap";
format_tmx_TmxMap.prototype = {
	version: null
	,orientation: null
	,width: null
	,height: null
	,tileWidth: null
	,tileHeight: null
	,backgroundColor: null
	,renderOrder: null
	,staggerIndex: null
	,staggerAxis: null
	,hexSideLength: null
	,nextObjectId: null
	,properties: null
	,tilesets: null
	,layers: null
	,infinite: null
	,__class__: format_tmx_TmxMap
};
var format_tmx_TmxTileset = function(firstGID,source,name,tileWidth,tileHeight,spacing,margin,tileCount,columns,tileOffset,properties,image,terrainTypes,tiles,grid,wangSets) {
	this.firstGID = firstGID;
	this.source = source;
	this.name = name;
	this.tileWidth = tileWidth;
	this.tileHeight = tileHeight;
	this.spacing = spacing;
	this.margin = margin;
	this.tileCount = tileCount;
	this.columns = columns;
	this.tileOffset = tileOffset;
	this.properties = properties;
	this.image = image;
	this.terrainTypes = terrainTypes;
	this.tiles = tiles;
	this.grid = grid;
	this.wangSets = wangSets;
};
$hxClasses["format.tmx.TmxTileset"] = format_tmx_TmxTileset;
format_tmx_TmxTileset.__name__ = "format.tmx.TmxTileset";
format_tmx_TmxTileset.prototype = {
	firstGID: null
	,source: null
	,name: null
	,tileWidth: null
	,tileHeight: null
	,spacing: null
	,margin: null
	,tileCount: null
	,columns: null
	,tileOffset: null
	,properties: null
	,image: null
	,terrainTypes: null
	,tiles: null
	,grid: null
	,wangSets: null
	,__class__: format_tmx_TmxTileset
};
var format_tmx_TmxTilesetGrid = function(orientation,width,height) {
	this.orientation = orientation;
	this.width = width;
	this.height = height;
};
$hxClasses["format.tmx.TmxTilesetGrid"] = format_tmx_TmxTilesetGrid;
format_tmx_TmxTilesetGrid.__name__ = "format.tmx.TmxTilesetGrid";
format_tmx_TmxTilesetGrid.prototype = {
	orientation: null
	,width: null
	,height: null
	,__class__: format_tmx_TmxTilesetGrid
};
var format_tmx_TmxTileOffset = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["format.tmx.TmxTileOffset"] = format_tmx_TmxTileOffset;
format_tmx_TmxTileOffset.__name__ = "format.tmx.TmxTileOffset";
format_tmx_TmxTileOffset.prototype = {
	x: null
	,y: null
	,__class__: format_tmx_TmxTileOffset
};
var format_tmx_TmxWangSet = function(name,tile,corners,edges,tiles) {
	this.name = name;
	this.tile = tile;
	this.corners = corners;
	this.edges = edges;
	this.tiles = tiles;
};
$hxClasses["format.tmx.TmxWangSet"] = format_tmx_TmxWangSet;
format_tmx_TmxWangSet.__name__ = "format.tmx.TmxWangSet";
format_tmx_TmxWangSet.prototype = {
	name: null
	,tile: null
	,corners: null
	,edges: null
	,tiles: null
	,__class__: format_tmx_TmxWangSet
};
var format_tmx_TmxWangSetColor = function(name,color,tile,probability) {
	this.name = name;
	this.color = color;
	this.tile = tile;
	this.probability = probability;
};
$hxClasses["format.tmx.TmxWangSetColor"] = format_tmx_TmxWangSetColor;
format_tmx_TmxWangSetColor.__name__ = "format.tmx.TmxWangSetColor";
format_tmx_TmxWangSetColor.prototype = {
	name: null
	,color: null
	,tile: null
	,probability: null
	,__class__: format_tmx_TmxWangSetColor
};
var format_tmx_TmxWangSetTile = function(tileID,wangID) {
	this.tileID = tileID;
	this.wangID = wangID;
};
$hxClasses["format.tmx.TmxWangSetTile"] = format_tmx_TmxWangSetTile;
format_tmx_TmxWangSetTile.__name__ = "format.tmx.TmxWangSetTile";
format_tmx_TmxWangSetTile.prototype = {
	tileID: null
	,wangID: null
	,__class__: format_tmx_TmxWangSetTile
};
var format_tmx_TmxImage = function(format,id,source,transparent,width,height,data) {
	this.format = format;
	this.id = id;
	this.source = source;
	this.transparent = transparent;
	this.width = width;
	this.height = height;
	this.data = data;
};
$hxClasses["format.tmx.TmxImage"] = format_tmx_TmxImage;
format_tmx_TmxImage.__name__ = "format.tmx.TmxImage";
format_tmx_TmxImage.prototype = {
	format: null
	,id: null
	,source: null
	,transparent: null
	,width: null
	,height: null
	,data: null
	,__class__: format_tmx_TmxImage
};
var format_tmx_TmxTerrain = function(name,tile,properties) {
	this.name = name;
	this.tile = tile;
	this.properties = properties;
};
$hxClasses["format.tmx.TmxTerrain"] = format_tmx_TmxTerrain;
format_tmx_TmxTerrain.__name__ = "format.tmx.TmxTerrain";
format_tmx_TmxTerrain.prototype = {
	name: null
	,tile: null
	,properties: null
	,__class__: format_tmx_TmxTerrain
};
var format_tmx_TmxTilesetTile = function(id,type,terrain,probability,properties,image,objectGroup,animation) {
	this.id = id;
	this.type = type;
	this.terrain = terrain;
	this.probability = probability;
	this.properties = properties;
	this.image = image;
	this.objectGroup = objectGroup;
	this.animation = animation;
};
$hxClasses["format.tmx.TmxTilesetTile"] = format_tmx_TmxTilesetTile;
format_tmx_TmxTilesetTile.__name__ = "format.tmx.TmxTilesetTile";
format_tmx_TmxTilesetTile.prototype = {
	id: null
	,type: null
	,terrain: null
	,probability: null
	,properties: null
	,image: null
	,objectGroup: null
	,animation: null
	,__class__: format_tmx_TmxTilesetTile
};
var format_tmx_TmxTilesetTileFrame = function(tileId,duration) {
	this.tileId = tileId;
	this.duration = duration;
};
$hxClasses["format.tmx.TmxTilesetTileFrame"] = format_tmx_TmxTilesetTileFrame;
format_tmx_TmxTilesetTileFrame.__name__ = "format.tmx.TmxTilesetTileFrame";
format_tmx_TmxTilesetTileFrame.prototype = {
	tileId: null
	,duration: null
	,__class__: format_tmx_TmxTilesetTileFrame
};
var format_tmx_TmxLayer = $hxEnums["format.tmx.TmxLayer"] = { __ename__:true,__constructs__:null
	,LTileLayer: ($_=function(layer) { return {_hx_index:0,layer:layer,__enum__:"format.tmx.TmxLayer",toString:$estr}; },$_._hx_name="LTileLayer",$_.__params__ = ["layer"],$_)
	,LObjectGroup: ($_=function(group) { return {_hx_index:1,group:group,__enum__:"format.tmx.TmxLayer",toString:$estr}; },$_._hx_name="LObjectGroup",$_.__params__ = ["group"],$_)
	,LImageLayer: ($_=function(layer) { return {_hx_index:2,layer:layer,__enum__:"format.tmx.TmxLayer",toString:$estr}; },$_._hx_name="LImageLayer",$_.__params__ = ["layer"],$_)
	,LGroup: ($_=function(group) { return {_hx_index:3,group:group,__enum__:"format.tmx.TmxLayer",toString:$estr}; },$_._hx_name="LGroup",$_.__params__ = ["group"],$_)
};
format_tmx_TmxLayer.__constructs__ = [format_tmx_TmxLayer.LTileLayer,format_tmx_TmxLayer.LObjectGroup,format_tmx_TmxLayer.LImageLayer,format_tmx_TmxLayer.LGroup];
var format_tmx_TmxGroup = function(name,offsetX,offsetY,opacity,visible,properties,layers) {
	this.name = name;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.opacity = opacity;
	this.visible = visible;
	this.properties = properties;
	this.layers = layers;
};
$hxClasses["format.tmx.TmxGroup"] = format_tmx_TmxGroup;
format_tmx_TmxGroup.__name__ = "format.tmx.TmxGroup";
format_tmx_TmxGroup.prototype = {
	name: null
	,offsetX: null
	,offsetY: null
	,opacity: null
	,visible: null
	,properties: null
	,layers: null
	,__class__: format_tmx_TmxGroup
};
var format_tmx_TmxBaseLayer = function(name,x,y,offsetX,offsetY,width,height,opacity,visible,properties) {
	this.name = name;
	this.x = x;
	this.y = y;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.opacity = opacity;
	this.visible = visible;
	this.properties = properties;
};
$hxClasses["format.tmx.TmxBaseLayer"] = format_tmx_TmxBaseLayer;
format_tmx_TmxBaseLayer.__name__ = "format.tmx.TmxBaseLayer";
format_tmx_TmxBaseLayer.prototype = {
	name: null
	,x: null
	,y: null
	,width: null
	,height: null
	,opacity: null
	,visible: null
	,offsetX: null
	,offsetY: null
	,properties: null
	,__class__: format_tmx_TmxBaseLayer
};
var format_tmx_TmxImageLayer = function(image,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties) {
	format_tmx_TmxBaseLayer.call(this,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties);
	this.image = image;
};
$hxClasses["format.tmx.TmxImageLayer"] = format_tmx_TmxImageLayer;
format_tmx_TmxImageLayer.__name__ = "format.tmx.TmxImageLayer";
format_tmx_TmxImageLayer.__super__ = format_tmx_TmxBaseLayer;
format_tmx_TmxImageLayer.prototype = $extend(format_tmx_TmxBaseLayer.prototype,{
	image: null
	,__class__: format_tmx_TmxImageLayer
});
var format_tmx_TmxTileLayer = function(data,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties) {
	format_tmx_TmxBaseLayer.call(this,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties);
	this.data = data;
};
$hxClasses["format.tmx.TmxTileLayer"] = format_tmx_TmxTileLayer;
format_tmx_TmxTileLayer.__name__ = "format.tmx.TmxTileLayer";
format_tmx_TmxTileLayer.__super__ = format_tmx_TmxBaseLayer;
format_tmx_TmxTileLayer.prototype = $extend(format_tmx_TmxBaseLayer.prototype,{
	data: null
	,__class__: format_tmx_TmxTileLayer
});
var format_tmx_TmxDataEncoding = $hxEnums["format.tmx.TmxDataEncoding"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"format.tmx.TmxDataEncoding",toString:$estr}
	,Base64: {_hx_name:"Base64",_hx_index:1,__enum__:"format.tmx.TmxDataEncoding",toString:$estr}
	,CSV: {_hx_name:"CSV",_hx_index:2,__enum__:"format.tmx.TmxDataEncoding",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:3,value:value,__enum__:"format.tmx.TmxDataEncoding",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxDataEncoding.__constructs__ = [format_tmx_TmxDataEncoding.None,format_tmx_TmxDataEncoding.Base64,format_tmx_TmxDataEncoding.CSV,format_tmx_TmxDataEncoding.Unknown];
var format_tmx_TmxDataCompression = $hxEnums["format.tmx.TmxDataCompression"] = { __ename__:true,__constructs__:null
	,None: {_hx_name:"None",_hx_index:0,__enum__:"format.tmx.TmxDataCompression",toString:$estr}
	,GZip: {_hx_name:"GZip",_hx_index:1,__enum__:"format.tmx.TmxDataCompression",toString:$estr}
	,ZLib: {_hx_name:"ZLib",_hx_index:2,__enum__:"format.tmx.TmxDataCompression",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:3,value:value,__enum__:"format.tmx.TmxDataCompression",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxDataCompression.__constructs__ = [format_tmx_TmxDataCompression.None,format_tmx_TmxDataCompression.GZip,format_tmx_TmxDataCompression.ZLib,format_tmx_TmxDataCompression.Unknown];
var format_tmx_TmxData = function(encoding,compression,tiles,chunks,data) {
	this.encoding = encoding;
	this.compression = compression;
	this.tiles = tiles;
	this.chunks = chunks;
	this.data = data;
};
$hxClasses["format.tmx.TmxData"] = format_tmx_TmxData;
format_tmx_TmxData.__name__ = "format.tmx.TmxData";
format_tmx_TmxData.prototype = {
	encoding: null
	,compression: null
	,tiles: null
	,chunks: null
	,data: null
	,__class__: format_tmx_TmxData
};
var format_tmx_TmxChunk = function(x,y,width,height,tiles) {
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.tiles = tiles;
};
$hxClasses["format.tmx.TmxChunk"] = format_tmx_TmxChunk;
format_tmx_TmxChunk.__name__ = "format.tmx.TmxChunk";
format_tmx_TmxChunk.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,tiles: null
	,__class__: format_tmx_TmxChunk
};
var format_tmx_TmxTile = function(gid,flippedHorizontally,flippedVertically,flippedDiagonally) {
	this.gid = gid;
	this.flippedHorizontally = flippedHorizontally;
	this.flippedVertically = flippedVertically;
	this.flippedDiagonally = flippedDiagonally;
};
$hxClasses["format.tmx.TmxTile"] = format_tmx_TmxTile;
format_tmx_TmxTile.__name__ = "format.tmx.TmxTile";
format_tmx_TmxTile.prototype = {
	gid: null
	,flippedHorizontally: null
	,flippedVertically: null
	,flippedDiagonally: null
	,__class__: format_tmx_TmxTile
};
var format_tmx_TmxObjectGroupDrawOrder = $hxEnums["format.tmx.TmxObjectGroupDrawOrder"] = { __ename__:true,__constructs__:null
	,Index: {_hx_name:"Index",_hx_index:0,__enum__:"format.tmx.TmxObjectGroupDrawOrder",toString:$estr}
	,Topdown: {_hx_name:"Topdown",_hx_index:1,__enum__:"format.tmx.TmxObjectGroupDrawOrder",toString:$estr}
	,Unknown: ($_=function(value) { return {_hx_index:2,value:value,__enum__:"format.tmx.TmxObjectGroupDrawOrder",toString:$estr}; },$_._hx_name="Unknown",$_.__params__ = ["value"],$_)
};
format_tmx_TmxObjectGroupDrawOrder.__constructs__ = [format_tmx_TmxObjectGroupDrawOrder.Index,format_tmx_TmxObjectGroupDrawOrder.Topdown,format_tmx_TmxObjectGroupDrawOrder.Unknown];
var format_tmx_TmxObjectGroup = function(drawOrder,objects,color,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties) {
	format_tmx_TmxBaseLayer.call(this,name,x,y,offsetX,offsetY,width,height,opacity,visible,properties);
	this.color = color;
	this.drawOrder = drawOrder;
	this.objects = objects;
};
$hxClasses["format.tmx.TmxObjectGroup"] = format_tmx_TmxObjectGroup;
format_tmx_TmxObjectGroup.__name__ = "format.tmx.TmxObjectGroup";
format_tmx_TmxObjectGroup.__super__ = format_tmx_TmxBaseLayer;
format_tmx_TmxObjectGroup.prototype = $extend(format_tmx_TmxBaseLayer.prototype,{
	color: null
	,drawOrder: null
	,objects: null
	,__class__: format_tmx_TmxObjectGroup
});
var format_tmx_TmxPoint = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["format.tmx.TmxPoint"] = format_tmx_TmxPoint;
format_tmx_TmxPoint.__name__ = "format.tmx.TmxPoint";
format_tmx_TmxPoint.prototype = {
	x: null
	,y: null
	,__class__: format_tmx_TmxPoint
};
var format_tmx_TmxObjectType = $hxEnums["format.tmx.TmxObjectType"] = { __ename__:true,__constructs__:null
	,OTRectangle: {_hx_name:"OTRectangle",_hx_index:0,__enum__:"format.tmx.TmxObjectType",toString:$estr}
	,OTTile: ($_=function(gid) { return {_hx_index:1,gid:gid,__enum__:"format.tmx.TmxObjectType",toString:$estr}; },$_._hx_name="OTTile",$_.__params__ = ["gid"],$_)
	,OTEllipse: {_hx_name:"OTEllipse",_hx_index:2,__enum__:"format.tmx.TmxObjectType",toString:$estr}
	,OTPolygon: ($_=function(points) { return {_hx_index:3,points:points,__enum__:"format.tmx.TmxObjectType",toString:$estr}; },$_._hx_name="OTPolygon",$_.__params__ = ["points"],$_)
	,OTText: ($_=function(text) { return {_hx_index:4,text:text,__enum__:"format.tmx.TmxObjectType",toString:$estr}; },$_._hx_name="OTText",$_.__params__ = ["text"],$_)
	,OTPolyline: ($_=function(points) { return {_hx_index:5,points:points,__enum__:"format.tmx.TmxObjectType",toString:$estr}; },$_._hx_name="OTPolyline",$_.__params__ = ["points"],$_)
};
format_tmx_TmxObjectType.__constructs__ = [format_tmx_TmxObjectType.OTRectangle,format_tmx_TmxObjectType.OTTile,format_tmx_TmxObjectType.OTEllipse,format_tmx_TmxObjectType.OTPolygon,format_tmx_TmxObjectType.OTText,format_tmx_TmxObjectType.OTPolyline];
var format_tmx_TmxObject = function(id,name,type,x,y,width,height,rotation,visible,objectType,properties,flippedHorizontally,flippedVertically,template) {
	this.id = id;
	this.name = name;
	this.type = type;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.rotation = rotation;
	this.visible = visible;
	this.objectType = objectType;
	this.properties = properties;
	this.flippedHorizontally = flippedHorizontally;
	this.flippedVertically = flippedVertically;
	this.template = template;
};
$hxClasses["format.tmx.TmxObject"] = format_tmx_TmxObject;
format_tmx_TmxObject.__name__ = "format.tmx.TmxObject";
format_tmx_TmxObject.prototype = {
	id: null
	,name: null
	,type: null
	,x: null
	,y: null
	,width: null
	,height: null
	,rotation: null
	,visible: null
	,objectType: null
	,properties: null
	,flippedHorizontally: null
	,flippedVertically: null
	,template: null
	,__class__: format_tmx_TmxObject
};
var format_tmx_TmxText = function(fontFamily,pixelSize,wrap,color,bold,italic,underline,strikeout,kerning,halign,valign,text) {
	this.fontFamily = fontFamily;
	this.pixelSize = pixelSize;
	this.wrap = wrap;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.strikeout = strikeout;
	this.kerning = kerning;
	this.halign = halign;
	this.valign = valign;
	this.text = text;
};
$hxClasses["format.tmx.TmxText"] = format_tmx_TmxText;
format_tmx_TmxText.__name__ = "format.tmx.TmxText";
format_tmx_TmxText.prototype = {
	fontFamily: null
	,pixelSize: null
	,wrap: null
	,color: null
	,bold: null
	,italic: null
	,underline: null
	,strikeout: null
	,kerning: null
	,halign: null
	,valign: null
	,text: null
	,__class__: format_tmx_TmxText
};
var format_tmx_TmxPropertyType = $hxEnums["format.tmx.TmxPropertyType"] = { __ename__:true,__constructs__:null
	,PTString: {_hx_name:"PTString",_hx_index:0,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
	,PTInt: {_hx_name:"PTInt",_hx_index:1,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
	,PTBool: {_hx_name:"PTBool",_hx_index:2,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
	,PTFloat: {_hx_name:"PTFloat",_hx_index:3,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
	,PTFile: {_hx_name:"PTFile",_hx_index:4,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
	,PTColor: {_hx_name:"PTColor",_hx_index:5,__enum__:"format.tmx.TmxPropertyType",toString:$estr}
};
format_tmx_TmxPropertyType.__constructs__ = [format_tmx_TmxPropertyType.PTString,format_tmx_TmxPropertyType.PTInt,format_tmx_TmxPropertyType.PTBool,format_tmx_TmxPropertyType.PTFloat,format_tmx_TmxPropertyType.PTFile,format_tmx_TmxPropertyType.PTColor];
var format_tmx_TmxProperties = {};
format_tmx_TmxProperties._new = function() {
	var this1 = new format_tmx__$Data_ImplTmxProperties();
	return this1;
};
format_tmx_TmxProperties._get = function(this1,v) {
	return this1.getString(v);
};
format_tmx_TmxProperties._set = function(this1,k,v) {
	this1.setString(k,v);
	return v;
};
var format_tmx__$Data_ImplTmxProperties = function() {
	this.names = [];
	this.types = [];
	this.strings = [];
	this.cache = [];
	this.ints = [];
	this.floats = [];
};
$hxClasses["format.tmx._Data.ImplTmxProperties"] = format_tmx__$Data_ImplTmxProperties;
format_tmx__$Data_ImplTmxProperties.__name__ = "format.tmx._Data.ImplTmxProperties";
format_tmx__$Data_ImplTmxProperties.prototype = {
	names: null
	,types: null
	,strings: null
	,cache: null
	,ints: null
	,floats: null
	,propertyCount: function() {
		return this.names.length;
	}
	,exists: function(name) {
		return this.names.indexOf(name) != -1;
	}
	,existsType: function(name,type) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return false;
		}
		return this.types[idx] == type;
	}
	,setRaw: function(name,value,type) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			this.names.push(name);
			this.strings.push(value);
			this.types.push(type);
		} else {
			this.strings[idx] = value;
			this.types[idx] = type;
			this.cache[idx] = null;
		}
	}
	,setString: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			this.names.push(name);
			this.types.push(format_tmx_TmxPropertyType.PTString);
			this.strings.push(value);
		} else {
			this.types[idx] = format_tmx_TmxPropertyType.PTString;
			this.cache[idx] = null;
			this.strings[idx] = value;
		}
	}
	,setFile: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			this.names.push(name);
			this.types.push(format_tmx_TmxPropertyType.PTFile);
			this.strings.push(value);
		} else {
			this.types[idx] = format_tmx_TmxPropertyType.PTFile;
			this.strings[idx] = value;
			this.cache[idx] = null;
		}
	}
	,setInt: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			idx = this.names.push(name) - 1;
			this.types.push(format_tmx_TmxPropertyType.PTInt);
			this.strings.push(value == null ? "null" : "" + value);
			this.cache[idx] = this.ints.push(value) - 1;
		} else {
			var oldType = this.types[idx];
			this.types[idx] = format_tmx_TmxPropertyType.PTInt;
			this.strings[idx] = value == null ? "null" : "" + value;
			var cached = this.cache[idx];
			if((oldType == format_tmx_TmxPropertyType.PTInt || oldType == format_tmx_TmxPropertyType.PTColor) && cached != null) {
				this.ints[cached] = value;
			} else {
				this.cache[idx] = this.ints.push(value) - 1;
			}
		}
	}
	,setColor: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			idx = this.names.push(name) - 1;
			this.types.push(format_tmx_TmxPropertyType.PTColor);
			this.strings.push(value == null ? "null" : "" + value);
			this.cache[idx] = this.ints.push(value) - 1;
		} else {
			var oldType = this.types[idx];
			this.types[idx] = format_tmx_TmxPropertyType.PTColor;
			this.strings[idx] = value == null ? "null" : "" + value;
			var cached = this.cache[idx];
			if((oldType == format_tmx_TmxPropertyType.PTColor || oldType == format_tmx_TmxPropertyType.PTInt) && cached != null) {
				this.ints[cached] = value;
			} else {
				this.cache[idx] = this.ints.push(value) - 1;
			}
		}
	}
	,setFloat: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			var idx1 = this.names.push(name) - 1;
			this.types.push(format_tmx_TmxPropertyType.PTFloat);
			this.strings.push(value == null ? "null" : "" + value);
			this.cache[idx1] = this.floats.push(value) - 1;
		} else {
			var oldType = this.types[idx];
			this.types[idx] = format_tmx_TmxPropertyType.PTFloat;
			this.strings[idx] = value == null ? "null" : "" + value;
			var cached = this.cache[idx];
			if(oldType == format_tmx_TmxPropertyType.PTFloat && cached != null) {
				this.floats[cached] = value;
			} else {
				this.cache[idx] = this.floats.push(value) - 1;
			}
		}
	}
	,setBool: function(name,value) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			this.names.push(name);
			this.types.push(format_tmx_TmxPropertyType.PTBool);
			this.strings.push(value ? "true" : "false");
		} else {
			this.types[idx] = format_tmx_TmxPropertyType.PTBool;
			this.strings[idx] = value ? "true" : "false";
			this.cache[idx] = null;
		}
	}
	,getType: function(name) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return null;
		}
		return this.types[idx];
	}
	,get: function(name) {
		return this.getString(name);
	}
	,keys: function() {
		return new haxe_iterators_ArrayIterator(this.names);
	}
	,getString: function(name) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return null;
		}
		return this.strings[idx];
	}
	,getFile: function(name) {
		return this.getString(name);
	}
	,getInt: function(name) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return null;
		}
		var type = this.types[idx];
		if(type != format_tmx_TmxPropertyType.PTInt || type != format_tmx_TmxPropertyType.PTColor) {
			return null;
		}
		var cached = this.cache[idx];
		if(cached == null) {
			cached = Std.parseInt(this.strings[idx]);
			this.cache[idx] = this.ints.push(cached) - 1;
			return cached;
		}
		return this.ints[cached];
	}
	,getColor: function(name) {
		return this.getInt(name);
	}
	,getFloat: function(name) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return NaN;
		}
		var type = this.types[idx];
		if(type == format_tmx_TmxPropertyType.PTInt || type == format_tmx_TmxPropertyType.PTColor) {
			return this.getInt(name);
		}
		if(type != format_tmx_TmxPropertyType.PTFloat) {
			return NaN;
		}
		var cached = this.cache[idx];
		if(cached == null) {
			var fval = parseFloat(this.strings[idx]);
			this.cache[idx] = this.floats.push(fval) - 1;
			return fval;
		}
		return this.floats[cached];
	}
	,getBool: function(name) {
		var idx = this.names.indexOf(name);
		if(idx == -1) {
			return false;
		}
		return this.strings[idx] == "true";
	}
	,propagateTo: function(other,_override) {
		if(_override == null) {
			_override = false;
		}
		var i = 0;
		while(i < this.names.length) {
			if(other.names.indexOf(this.names[i]) == -1 || _override) {
				other.setRaw(this.names[i],this.strings[i],this.types[i]);
			}
			++i;
		}
	}
	,__class__: format_tmx__$Data_ImplTmxProperties
};
var format_tmx_TmxObjectTemplate = function(tileset,object) {
	this.tileset = tileset;
	this.object = object;
};
$hxClasses["format.tmx.TmxObjectTemplate"] = format_tmx_TmxObjectTemplate;
format_tmx_TmxObjectTemplate.__name__ = "format.tmx.TmxObjectTemplate";
format_tmx_TmxObjectTemplate.prototype = {
	tileset: null
	,object: null
	,__class__: format_tmx_TmxObjectTemplate
};
var format_tmx_TmxObjectTypeTemplate = function(name,color,properties) {
	this.name = name;
	this.color = color;
	this.properties = properties;
};
$hxClasses["format.tmx.TmxObjectTypeTemplate"] = format_tmx_TmxObjectTypeTemplate;
format_tmx_TmxObjectTypeTemplate.__name__ = "format.tmx.TmxObjectTypeTemplate";
format_tmx_TmxObjectTypeTemplate.prototype = {
	name: null
	,color: null
	,properties: null
	,__class__: format_tmx_TmxObjectTypeTemplate
};
var format_tmx_TmxObjectTypeProperty = function(name,type,defaultValue) {
	this.name = name;
	this.type = type;
	this.defaultValue = defaultValue;
};
$hxClasses["format.tmx.TmxObjectTypeProperty"] = format_tmx_TmxObjectTypeProperty;
format_tmx_TmxObjectTypeProperty.__name__ = "format.tmx.TmxObjectTypeProperty";
format_tmx_TmxObjectTypeProperty.prototype = {
	name: null
	,type: null
	,defaultValue: null
	,__class__: format_tmx_TmxObjectTypeProperty
};
var format_tmx_Reader = function() {
};
$hxClasses["format.tmx.Reader"] = format_tmx_Reader;
format_tmx_Reader.__name__ = "format.tmx.Reader";
format_tmx_Reader.prototype = {
	customUncompressors: null
	,customEncoders: null
	,width: null
	,height: null
	,resolveTSX: null
	,resolveTemplate: null
	,resolveTypeTemplate: null
	,read: function(xml) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var this1 = xml;
		var map = haxe_xml__$Access_NodeAccess.resolve(this1,"map");
		var properties = this.resolveProperties(map);
		var tilesets = [];
		var layers = [];
		var element = map.elements();
		while(element.hasNext()) {
			var element1 = element.next();
			var _g;
			if(element1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(element1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (element1.nodeType == null ? "null" : XmlType.toString(element1.nodeType)));
				}
				_g = element1.nodeName;
			}
			switch(_g) {
			case "group":
				layers.push(format_tmx_TmxLayer.LGroup(this.resolveGroup(element1)));
				break;
			case "imagelayer":
				layers.push(format_tmx_TmxLayer.LImageLayer(this.resolveImageLayer(element1)));
				break;
			case "layer":
				layers.push(format_tmx_TmxLayer.LTileLayer(this.resolveTileLayer(element1)));
				break;
			case "objectgroup":
				layers.push(format_tmx_TmxLayer.LObjectGroup(this.resolveObjectGroup(element1)));
				break;
			case "tileset":
				var root = null;
				var properties1 = this.resolveProperties(element1);
				var terrains = [];
				var hasTerrains = haxe_xml__$Access_HasNodeAccess.resolve(element1,"terraintypes");
				var tiles = [];
				var hasTiles = haxe_xml__$Access_HasNodeAccess.resolve(element1,"tile");
				var tileOffset = null;
				var hasTileOffset = haxe_xml__$Access_HasNodeAccess.resolve(element1,"tileoffset");
				var wangSets = [];
				var hasWangSets = haxe_xml__$Access_HasNodeAccess.resolve(element1,"wangsets");
				var grid = null;
				var hasGrid = haxe_xml__$Access_HasNodeAccess.resolve(element1,"grid");
				if(hasTileOffset) {
					var node = haxe_xml__$Access_NodeAccess.resolve(element1,"tileoffset");
					tileOffset = new format_tmx_TmxTileOffset(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")));
				}
				if(hasTerrains) {
					var _g1 = 0;
					var _g2 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(element1,"terraintypes"),"terrain");
					while(_g1 < _g2.length) {
						var node1 = _g2[_g1];
						++_g1;
						terrains.push(new format_tmx_TmxTerrain(haxe_xml__$Access_AttribAccess.resolve(node1,"name"),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node1,"tile")),this.resolveProperties(node1)));
					}
				}
				if(hasWangSets) {
					var _g3 = 0;
					var _g4 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(element1,"wangsets"),"wangset");
					while(_g3 < _g4.length) {
						var node2 = _g4[_g3];
						++_g3;
						wangSets.push(this.resolveWangSet(node2));
					}
				}
				if(hasGrid) {
					var gnode = haxe_xml__$Access_NodeAccess.resolve(element1,"grid");
					var _g5 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"width"));
					var _g6 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"height"));
					var input = haxe_xml__$Access_AttribAccess.resolve(gnode,"orientation");
					var grid1;
					switch(input) {
					case "hexagonal":
						grid1 = format_tmx_TmxOrientation.Hexagonal;
						break;
					case "isometric":
						grid1 = format_tmx_TmxOrientation.Isometric;
						break;
					case "orthogonal":
						grid1 = format_tmx_TmxOrientation.Orthogonal;
						break;
					case "staggered":
						grid1 = format_tmx_TmxOrientation.Staggered;
						break;
					default:
						grid1 = format_tmx_TmxOrientation.Unknown(input);
					}
					grid = new format_tmx_TmxTilesetGrid(grid1,_g5,_g6);
				}
				if(hasTiles) {
					var _g7 = 0;
					var _g8 = haxe_xml__$Access_NodeListAccess.resolve(element1,"tile");
					while(_g7 < _g8.length) {
						var node3 = _g8[_g7];
						++_g7;
						var animation = null;
						if(haxe_xml__$Access_HasNodeAccess.resolve(node3,"animation")) {
							animation = [];
							var _g9 = 0;
							var _g10 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(node3,"animation"),"frame");
							while(_g9 < _g10.length) {
								var frameInfo = _g10[_g9];
								++_g9;
								animation.push(new format_tmx_TmxTilesetTileFrame(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"tileid")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"duration"))));
							}
						}
						var _g11 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node3,"id"));
						var _g12 = haxe_xml__$Access_HasAttribAccess.resolve(node3,"terrain") ? haxe_xml__$Access_AttribAccess.resolve(node3,"terrain") : null;
						var _g13 = haxe_xml__$Access_HasAttribAccess.resolve(node3,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node3,"probability")) : 0;
						var _g14 = this.resolveProperties(node3);
						var _g15 = haxe_xml__$Access_HasNodeAccess.resolve(node3,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(node3,"image")) : null;
						var _g16 = haxe_xml__$Access_HasNodeAccess.resolve(node3,"objectgroup") ? this.resolveObjectGroup(haxe_xml__$Access_NodeAccess.resolve(node3,"objectgroup")) : null;
						tiles.push(new format_tmx_TmxTilesetTile(_g11,haxe_xml__$Access_HasAttribAccess.resolve(node3,"type") ? haxe_xml__$Access_AttribAccess.resolve(node3,"type") : null,_g12,_g13,_g14,_g15,_g16,animation));
					}
				}
				var tmp;
				if(root != null) {
					root.firstGID = haxe_xml__$Access_HasAttribAccess.resolve(element1,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"firstgid")) : root.firstGID;
					root.source = haxe_xml__$Access_HasAttribAccess.resolve(element1,"source") ? haxe_xml__$Access_AttribAccess.resolve(element1,"source") : root.source;
					root.name = haxe_xml__$Access_HasAttribAccess.resolve(element1,"name") ? haxe_xml__$Access_AttribAccess.resolve(element1,"name") : root.name;
					root.tileWidth = haxe_xml__$Access_HasAttribAccess.resolve(element1,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tilewidth")) : root.tileWidth;
					root.tileHeight = haxe_xml__$Access_HasAttribAccess.resolve(element1,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tileheight")) : root.tileHeight;
					root.spacing = haxe_xml__$Access_HasAttribAccess.resolve(element1,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"spacing")) : root.spacing;
					root.margin = haxe_xml__$Access_HasAttribAccess.resolve(element1,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"margin")) : root.margin;
					root.properties = haxe_xml__$Access_HasNodeAccess.resolve(element1,"properties") ? properties1 : root.properties;
					root.image = haxe_xml__$Access_HasNodeAccess.resolve(element1,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(element1,"image")) : root.image;
					root.tileCount = haxe_xml__$Access_HasAttribAccess.resolve(element1,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tilecount")) : 0;
					root.columns = haxe_xml__$Access_HasAttribAccess.resolve(element1,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"columns")) : 0;
					if(hasTerrains) {
						root.terrainTypes = terrains;
					}
					if(hasTiles) {
						root.tiles = tiles;
					}
					if(hasTileOffset) {
						root.tileOffset = tileOffset;
					}
					if(hasWangSets) {
						root.wangSets = wangSets;
					}
					if(hasGrid) {
						root.grid = grid;
					}
					tmp = root;
				} else {
					var _g17 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"firstgid")) : null;
					var _g18 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"source") ? haxe_xml__$Access_AttribAccess.resolve(element1,"source") : null;
					var _g19 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"name") ? haxe_xml__$Access_AttribAccess.resolve(element1,"name") : null;
					var _g20 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tilewidth")) : 0;
					var _g21 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tileheight")) : 0;
					var _g22 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"spacing")) : 0;
					var _g23 = haxe_xml__$Access_HasAttribAccess.resolve(element1,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"margin")) : 0;
					var _g24 = haxe_xml__$Access_HasNodeAccess.resolve(element1,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(element1,"image")) : null;
					var tset = new format_tmx_TmxTileset(_g17,_g18,_g19,_g20,_g21,_g22,_g23,haxe_xml__$Access_HasAttribAccess.resolve(element1,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"tilecount")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(element1,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(element1,"columns")) : 0,tileOffset,properties1,_g24,terrains,tiles,grid,wangSets);
					if(tset.source != null && this.resolveTSX != null) {
						var tsx = this.resolveTSX(tset.source);
						format_tmx_Tools.applyTSX(tsx,tset);
					}
					tmp = tset;
				}
				tilesets.push(tmp);
				break;
			}
		}
		this.width = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"width"));
		this.height = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"height"));
		var _g = haxe_xml__$Access_AttribAccess.resolve(map,"version");
		var input = haxe_xml__$Access_AttribAccess.resolve(map,"orientation");
		var _g1;
		switch(input) {
		case "hexagonal":
			_g1 = format_tmx_TmxOrientation.Hexagonal;
			break;
		case "isometric":
			_g1 = format_tmx_TmxOrientation.Isometric;
			break;
		case "orthogonal":
			_g1 = format_tmx_TmxOrientation.Orthogonal;
			break;
		case "staggered":
			_g1 = format_tmx_TmxOrientation.Staggered;
			break;
		default:
			_g1 = format_tmx_TmxOrientation.Unknown(input);
		}
		var _g2 = this.width;
		var _g3 = this.height;
		var _g4 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"tilewidth"));
		var _g5 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"tileheight"));
		var _g6;
		if(haxe_xml__$Access_HasAttribAccess.resolve(map,"backgroundcolor")) {
			var input = haxe_xml__$Access_AttribAccess.resolve(map,"backgroundcolor");
			_g6 = HxOverrides.cca(input,0) == 35 ? Std.parseInt("0x" + HxOverrides.substr(input,1,null)) : Std.parseInt("0x" + input);
		} else {
			_g6 = 0;
		}
		var _g7;
		if(haxe_xml__$Access_HasAttribAccess.resolve(map,"renderorder")) {
			var input = haxe_xml__$Access_AttribAccess.resolve(map,"renderorder");
			switch(input) {
			case "left-down":
				_g7 = format_tmx_TmxRenderOrder.LeftDown;
				break;
			case "left-up":
				_g7 = format_tmx_TmxRenderOrder.LeftUp;
				break;
			case "right-down":
				_g7 = format_tmx_TmxRenderOrder.RightDown;
				break;
			case "right-up":
				_g7 = format_tmx_TmxRenderOrder.RightUp;
				break;
			default:
				_g7 = format_tmx_TmxRenderOrder.Unknown(input);
			}
		} else {
			_g7 = format_tmx_TmxRenderOrder.RightDown;
		}
		var _g8 = properties;
		var _g9 = tilesets;
		var _g10 = layers;
		var _g11;
		if(haxe_xml__$Access_HasAttribAccess.resolve(map,"staggerindex")) {
			var input = haxe_xml__$Access_AttribAccess.resolve(map,"staggerindex");
			switch(input) {
			case "even":
				_g11 = format_tmx_TmxStaggerIndex.Even;
				break;
			case "odd":
				_g11 = format_tmx_TmxStaggerIndex.Odd;
				break;
			default:
				_g11 = format_tmx_TmxStaggerIndex.Unknown(input);
			}
		} else {
			_g11 = null;
		}
		var _g12;
		if(haxe_xml__$Access_HasAttribAccess.resolve(map,"staggeraxis")) {
			var input = haxe_xml__$Access_AttribAccess.resolve(map,"staggeraxis");
			switch(input) {
			case "x":
				_g12 = format_tmx_TmxStaggerAxis.AxisX;
				break;
			case "y":
				_g12 = format_tmx_TmxStaggerAxis.AxisY;
				break;
			default:
				_g12 = format_tmx_TmxStaggerAxis.Unknown(input);
			}
		} else {
			_g12 = null;
		}
		return new format_tmx_TmxMap(_g,_g1,_g2,_g3,_g4,_g5,_g6,_g7,_g11,_g12,haxe_xml__$Access_HasAttribAccess.resolve(map,"hexsidelength") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"hexsidelength")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(map,"nextobjectid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(map,"nextobjectid")) : 0,_g8,_g9,_g10,haxe_xml__$Access_HasAttribAccess.resolve(map,"infinite") && haxe_xml__$Access_AttribAccess.resolve(map,"infinite") == "1");
	}
	,readTSX: function(xml,root) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var this1 = xml;
		var input = haxe_xml__$Access_NodeAccess.resolve(this1,"tileset");
		var properties = this.resolveProperties(input);
		var terrains = [];
		var hasTerrains = haxe_xml__$Access_HasNodeAccess.resolve(input,"terraintypes");
		var tiles = [];
		var hasTiles = haxe_xml__$Access_HasNodeAccess.resolve(input,"tile");
		var tileOffset = null;
		var hasTileOffset = haxe_xml__$Access_HasNodeAccess.resolve(input,"tileoffset");
		var wangSets = [];
		var hasWangSets = haxe_xml__$Access_HasNodeAccess.resolve(input,"wangsets");
		var grid = null;
		var hasGrid = haxe_xml__$Access_HasNodeAccess.resolve(input,"grid");
		if(hasTileOffset) {
			var node = haxe_xml__$Access_NodeAccess.resolve(input,"tileoffset");
			tileOffset = new format_tmx_TmxTileOffset(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")));
		}
		if(hasTerrains) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"terraintypes"),"terrain");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				terrains.push(new format_tmx_TmxTerrain(haxe_xml__$Access_AttribAccess.resolve(node,"name"),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tile")),this.resolveProperties(node)));
			}
		}
		if(hasWangSets) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"wangsets"),"wangset");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				wangSets.push(this.resolveWangSet(node));
			}
		}
		if(hasGrid) {
			var gnode = haxe_xml__$Access_NodeAccess.resolve(input,"grid");
			var _g = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"width"));
			var _g1 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"height"));
			var input1 = haxe_xml__$Access_AttribAccess.resolve(gnode,"orientation");
			var grid1;
			switch(input1) {
			case "hexagonal":
				grid1 = format_tmx_TmxOrientation.Hexagonal;
				break;
			case "isometric":
				grid1 = format_tmx_TmxOrientation.Isometric;
				break;
			case "orthogonal":
				grid1 = format_tmx_TmxOrientation.Orthogonal;
				break;
			case "staggered":
				grid1 = format_tmx_TmxOrientation.Staggered;
				break;
			default:
				grid1 = format_tmx_TmxOrientation.Unknown(input1);
			}
			grid = new format_tmx_TmxTilesetGrid(grid1,_g,_g1);
		}
		if(hasTiles) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"tile");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				var animation = null;
				if(haxe_xml__$Access_HasNodeAccess.resolve(node,"animation")) {
					animation = [];
					var _g2 = 0;
					var _g3 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(node,"animation"),"frame");
					while(_g2 < _g3.length) {
						var frameInfo = _g3[_g2];
						++_g2;
						animation.push(new format_tmx_TmxTilesetTileFrame(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"tileid")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"duration"))));
					}
				}
				var _g4 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"id"));
				var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(node,"terrain") ? haxe_xml__$Access_AttribAccess.resolve(node,"terrain") : null;
				var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(node,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node,"probability")) : 0;
				var _g7 = this.resolveProperties(node);
				var _g8 = haxe_xml__$Access_HasNodeAccess.resolve(node,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(node,"image")) : null;
				var _g9 = haxe_xml__$Access_HasNodeAccess.resolve(node,"objectgroup") ? this.resolveObjectGroup(haxe_xml__$Access_NodeAccess.resolve(node,"objectgroup")) : null;
				tiles.push(new format_tmx_TmxTilesetTile(_g4,haxe_xml__$Access_HasAttribAccess.resolve(node,"type") ? haxe_xml__$Access_AttribAccess.resolve(node,"type") : null,_g5,_g6,_g7,_g8,_g9,animation));
			}
		}
		if(root != null) {
			root.firstGID = haxe_xml__$Access_HasAttribAccess.resolve(input,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"firstgid")) : root.firstGID;
			root.source = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : root.source;
			root.name = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : root.name;
			root.tileWidth = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilewidth")) : root.tileWidth;
			root.tileHeight = haxe_xml__$Access_HasAttribAccess.resolve(input,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tileheight")) : root.tileHeight;
			root.spacing = haxe_xml__$Access_HasAttribAccess.resolve(input,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"spacing")) : root.spacing;
			root.margin = haxe_xml__$Access_HasAttribAccess.resolve(input,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"margin")) : root.margin;
			root.properties = haxe_xml__$Access_HasNodeAccess.resolve(input,"properties") ? properties : root.properties;
			root.image = haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : root.image;
			root.tileCount = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilecount")) : 0;
			root.columns = haxe_xml__$Access_HasAttribAccess.resolve(input,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"columns")) : 0;
			if(hasTerrains) {
				root.terrainTypes = terrains;
			}
			if(hasTiles) {
				root.tiles = tiles;
			}
			if(hasTileOffset) {
				root.tileOffset = tileOffset;
			}
			if(hasWangSets) {
				root.wangSets = wangSets;
			}
			if(hasGrid) {
				root.grid = grid;
			}
			return root;
		} else {
			var _g = haxe_xml__$Access_HasAttribAccess.resolve(input,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"firstgid")) : null;
			var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : null;
			var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : null;
			var _g3 = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilewidth")) : 0;
			var _g4 = haxe_xml__$Access_HasAttribAccess.resolve(input,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tileheight")) : 0;
			var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(input,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"spacing")) : 0;
			var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(input,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"margin")) : 0;
			var _g7 = haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : null;
			var tset = new format_tmx_TmxTileset(_g,_g1,_g2,_g3,_g4,_g5,_g6,haxe_xml__$Access_HasAttribAccess.resolve(input,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilecount")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"columns")) : 0,tileOffset,properties,_g7,terrains,tiles,grid,wangSets);
			if(tset.source != null && this.resolveTSX != null) {
				var tsx = this.resolveTSX(tset.source);
				format_tmx_Tools.applyTSX(tsx,tset);
			}
			return tset;
		}
	}
	,readObjectTypes: function(xml,root) {
		var result = new haxe_ds_StringMap();
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var this1 = xml;
		var f = this1;
		if(!haxe_xml__$Access_HasNodeAccess.resolve(f,"objecttypes")) {
			return result;
		}
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(f,"objecttypes"),"objecttype");
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			var props = [];
			var _g2 = 0;
			var _g3 = haxe_xml__$Access_NodeListAccess.resolve(type,"property");
			while(_g2 < _g3.length) {
				var prop = _g3[_g2];
				++_g2;
				var ptype;
				if(haxe_xml__$Access_HasAttribAccess.resolve(prop,"type")) {
					switch(haxe_xml__$Access_AttribAccess.resolve(prop,"type")) {
					case "bool":
						ptype = format_tmx_TmxPropertyType.PTBool;
						break;
					case "color":
						ptype = format_tmx_TmxPropertyType.PTColor;
						break;
					case "file":
						ptype = format_tmx_TmxPropertyType.PTFile;
						break;
					case "float":
						ptype = format_tmx_TmxPropertyType.PTFloat;
						break;
					case "int":
						ptype = format_tmx_TmxPropertyType.PTInt;
						break;
					case "string":
						ptype = format_tmx_TmxPropertyType.PTString;
						break;
					default:
						ptype = format_tmx_TmxPropertyType.PTString;
					}
				} else {
					ptype = format_tmx_TmxPropertyType.PTString;
				}
				props.push(new format_tmx_TmxObjectTypeProperty(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),ptype,haxe_xml__$Access_HasAttribAccess.resolve(prop,"default") ? haxe_xml__$Access_AttribAccess.resolve(prop,"default") : null));
			}
			var key = haxe_xml__$Access_AttribAccess.resolve(type,"name");
			var value = new format_tmx_TmxObjectTypeTemplate(haxe_xml__$Access_AttribAccess.resolve(type,"name"),Std.parseInt("0x" + HxOverrides.substr(haxe_xml__$Access_AttribAccess.resolve(type,"color"),1,null)),props);
			result.h[key] = value;
		}
		if(root != null) {
			format_tmx_Tools.propagateObjectTypes(root,result);
		}
		return result;
	}
	,readTemplate: function(xml) {
		if(xml.nodeType != Xml.Document && xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		var this1 = xml;
		var f = this1;
		if(!haxe_xml__$Access_HasNodeAccess.resolve(f,"template")) {
			return null;
		}
		var input = haxe_xml__$Access_NodeAccess.resolve(f,"template");
		var _g;
		if(haxe_xml__$Access_HasNodeAccess.resolve(input,"tileset")) {
			var input1 = haxe_xml__$Access_NodeAccess.resolve(input,"tileset");
			var root = null;
			var properties = this.resolveProperties(input1);
			var terrains = [];
			var hasTerrains = haxe_xml__$Access_HasNodeAccess.resolve(input1,"terraintypes");
			var tiles = [];
			var hasTiles = haxe_xml__$Access_HasNodeAccess.resolve(input1,"tile");
			var tileOffset = null;
			var hasTileOffset = haxe_xml__$Access_HasNodeAccess.resolve(input1,"tileoffset");
			var wangSets = [];
			var hasWangSets = haxe_xml__$Access_HasNodeAccess.resolve(input1,"wangsets");
			var grid = null;
			var hasGrid = haxe_xml__$Access_HasNodeAccess.resolve(input1,"grid");
			if(hasTileOffset) {
				var node = haxe_xml__$Access_NodeAccess.resolve(input1,"tileoffset");
				tileOffset = new format_tmx_TmxTileOffset(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")));
			}
			if(hasTerrains) {
				var _g1 = 0;
				var _g2 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input1,"terraintypes"),"terrain");
				while(_g1 < _g2.length) {
					var node = _g2[_g1];
					++_g1;
					terrains.push(new format_tmx_TmxTerrain(haxe_xml__$Access_AttribAccess.resolve(node,"name"),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tile")),this.resolveProperties(node)));
				}
			}
			if(hasWangSets) {
				var _g1 = 0;
				var _g2 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input1,"wangsets"),"wangset");
				while(_g1 < _g2.length) {
					var node = _g2[_g1];
					++_g1;
					wangSets.push(this.resolveWangSet(node));
				}
			}
			if(hasGrid) {
				var gnode = haxe_xml__$Access_NodeAccess.resolve(input1,"grid");
				var _g1 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"width"));
				var _g2 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"height"));
				var input2 = haxe_xml__$Access_AttribAccess.resolve(gnode,"orientation");
				var grid1;
				switch(input2) {
				case "hexagonal":
					grid1 = format_tmx_TmxOrientation.Hexagonal;
					break;
				case "isometric":
					grid1 = format_tmx_TmxOrientation.Isometric;
					break;
				case "orthogonal":
					grid1 = format_tmx_TmxOrientation.Orthogonal;
					break;
				case "staggered":
					grid1 = format_tmx_TmxOrientation.Staggered;
					break;
				default:
					grid1 = format_tmx_TmxOrientation.Unknown(input2);
				}
				grid = new format_tmx_TmxTilesetGrid(grid1,_g1,_g2);
			}
			if(hasTiles) {
				var _g1 = 0;
				var _g2 = haxe_xml__$Access_NodeListAccess.resolve(input1,"tile");
				while(_g1 < _g2.length) {
					var node = _g2[_g1];
					++_g1;
					var animation = null;
					if(haxe_xml__$Access_HasNodeAccess.resolve(node,"animation")) {
						animation = [];
						var _g3 = 0;
						var _g4 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(node,"animation"),"frame");
						while(_g3 < _g4.length) {
							var frameInfo = _g4[_g3];
							++_g3;
							animation.push(new format_tmx_TmxTilesetTileFrame(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"tileid")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"duration"))));
						}
					}
					var _g5 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"id"));
					var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(node,"terrain") ? haxe_xml__$Access_AttribAccess.resolve(node,"terrain") : null;
					var _g7 = haxe_xml__$Access_HasAttribAccess.resolve(node,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node,"probability")) : 0;
					var _g8 = this.resolveProperties(node);
					var _g9 = haxe_xml__$Access_HasNodeAccess.resolve(node,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(node,"image")) : null;
					var _g10 = haxe_xml__$Access_HasNodeAccess.resolve(node,"objectgroup") ? this.resolveObjectGroup(haxe_xml__$Access_NodeAccess.resolve(node,"objectgroup")) : null;
					tiles.push(new format_tmx_TmxTilesetTile(_g5,haxe_xml__$Access_HasAttribAccess.resolve(node,"type") ? haxe_xml__$Access_AttribAccess.resolve(node,"type") : null,_g6,_g7,_g8,_g9,_g10,animation));
				}
			}
			if(root != null) {
				root.firstGID = haxe_xml__$Access_HasAttribAccess.resolve(input1,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"firstgid")) : root.firstGID;
				root.source = haxe_xml__$Access_HasAttribAccess.resolve(input1,"source") ? haxe_xml__$Access_AttribAccess.resolve(input1,"source") : root.source;
				root.name = haxe_xml__$Access_HasAttribAccess.resolve(input1,"name") ? haxe_xml__$Access_AttribAccess.resolve(input1,"name") : root.name;
				root.tileWidth = haxe_xml__$Access_HasAttribAccess.resolve(input1,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tilewidth")) : root.tileWidth;
				root.tileHeight = haxe_xml__$Access_HasAttribAccess.resolve(input1,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tileheight")) : root.tileHeight;
				root.spacing = haxe_xml__$Access_HasAttribAccess.resolve(input1,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"spacing")) : root.spacing;
				root.margin = haxe_xml__$Access_HasAttribAccess.resolve(input1,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"margin")) : root.margin;
				root.properties = haxe_xml__$Access_HasNodeAccess.resolve(input1,"properties") ? properties : root.properties;
				root.image = haxe_xml__$Access_HasNodeAccess.resolve(input1,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input1,"image")) : root.image;
				root.tileCount = haxe_xml__$Access_HasAttribAccess.resolve(input1,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tilecount")) : 0;
				root.columns = haxe_xml__$Access_HasAttribAccess.resolve(input1,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"columns")) : 0;
				if(hasTerrains) {
					root.terrainTypes = terrains;
				}
				if(hasTiles) {
					root.tiles = tiles;
				}
				if(hasTileOffset) {
					root.tileOffset = tileOffset;
				}
				if(hasWangSets) {
					root.wangSets = wangSets;
				}
				if(hasGrid) {
					root.grid = grid;
				}
				_g = root;
			} else {
				var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"firstgid")) : null;
				var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"source") ? haxe_xml__$Access_AttribAccess.resolve(input1,"source") : null;
				var _g3 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"name") ? haxe_xml__$Access_AttribAccess.resolve(input1,"name") : null;
				var _g4 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tilewidth")) : 0;
				var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tileheight")) : 0;
				var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"spacing")) : 0;
				var _g7 = haxe_xml__$Access_HasAttribAccess.resolve(input1,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"margin")) : 0;
				var _g8 = haxe_xml__$Access_HasNodeAccess.resolve(input1,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input1,"image")) : null;
				var tset = new format_tmx_TmxTileset(_g1,_g2,_g3,_g4,_g5,_g6,_g7,haxe_xml__$Access_HasAttribAccess.resolve(input1,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"tilecount")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input1,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input1,"columns")) : 0,tileOffset,properties,_g8,terrains,tiles,grid,wangSets);
				if(tset.source != null && this.resolveTSX != null) {
					var tsx = this.resolveTSX(tset.source);
					format_tmx_Tools.applyTSX(tsx,tset);
				}
				_g = tset;
			}
		} else {
			_g = null;
		}
		return new format_tmx_TmxObjectTemplate(_g,this.resolveObject(haxe_xml__$Access_NodeAccess.resolve(input,"object")));
	}
	,resolveGroup: function(input) {
		var layers = [];
		var element = input.elements();
		while(element.hasNext()) {
			var element1 = element.next();
			var _g;
			if(element1.nodeType == Xml.Document) {
				_g = "Document";
			} else {
				if(element1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (element1.nodeType == null ? "null" : XmlType.toString(element1.nodeType)));
				}
				_g = element1.nodeName;
			}
			switch(_g) {
			case "group":
				layers.push(format_tmx_TmxLayer.LGroup(this.resolveGroup(element1)));
				break;
			case "imagelayer":
				layers.push(format_tmx_TmxLayer.LImageLayer(this.resolveImageLayer(element1)));
				break;
			case "layer":
				layers.push(format_tmx_TmxLayer.LTileLayer(this.resolveTileLayer(element1)));
				break;
			case "objectgroup":
				layers.push(format_tmx_TmxLayer.LObjectGroup(this.resolveObjectGroup(element1)));
				break;
			}
		}
		return new format_tmx_TmxGroup(haxe_xml__$Access_AttribAccess.resolve(input,"name"),haxe_xml__$Access_HasAttribAccess.resolve(input,"offsetx") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsetx")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsety") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsety")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"opacity") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"opacity")) : 1,haxe_xml__$Access_HasAttribAccess.resolve(input,"visible") ? haxe_xml__$Access_AttribAccess.resolve(input,"visible") == "1" : true,this.resolveProperties(input),layers);
	}
	,resolveStaggerIndex: function(input) {
		switch(input) {
		case "even":
			return format_tmx_TmxStaggerIndex.Even;
		case "odd":
			return format_tmx_TmxStaggerIndex.Odd;
		default:
			return format_tmx_TmxStaggerIndex.Unknown(input);
		}
	}
	,resolveStaggerAxis: function(input) {
		switch(input) {
		case "x":
			return format_tmx_TmxStaggerAxis.AxisX;
		case "y":
			return format_tmx_TmxStaggerAxis.AxisY;
		default:
			return format_tmx_TmxStaggerAxis.Unknown(input);
		}
	}
	,resolveOrientation: function(input) {
		switch(input) {
		case "hexagonal":
			return format_tmx_TmxOrientation.Hexagonal;
		case "isometric":
			return format_tmx_TmxOrientation.Isometric;
		case "orthogonal":
			return format_tmx_TmxOrientation.Orthogonal;
		case "staggered":
			return format_tmx_TmxOrientation.Staggered;
		default:
			return format_tmx_TmxOrientation.Unknown(input);
		}
	}
	,resolveColor: function(input) {
		if(HxOverrides.cca(input,0) == 35) {
			return Std.parseInt("0x" + HxOverrides.substr(input,1,null));
		} else {
			return Std.parseInt("0x" + input);
		}
	}
	,resolveRenderOrder: function(input) {
		switch(input) {
		case "left-down":
			return format_tmx_TmxRenderOrder.LeftDown;
		case "left-up":
			return format_tmx_TmxRenderOrder.LeftUp;
		case "right-down":
			return format_tmx_TmxRenderOrder.RightDown;
		case "right-up":
			return format_tmx_TmxRenderOrder.RightUp;
		default:
			return format_tmx_TmxRenderOrder.Unknown(input);
		}
	}
	,resolveTileset: function(input,root) {
		var properties = this.resolveProperties(input);
		var terrains = [];
		var hasTerrains = haxe_xml__$Access_HasNodeAccess.resolve(input,"terraintypes");
		var tiles = [];
		var hasTiles = haxe_xml__$Access_HasNodeAccess.resolve(input,"tile");
		var tileOffset = null;
		var hasTileOffset = haxe_xml__$Access_HasNodeAccess.resolve(input,"tileoffset");
		var wangSets = [];
		var hasWangSets = haxe_xml__$Access_HasNodeAccess.resolve(input,"wangsets");
		var grid = null;
		var hasGrid = haxe_xml__$Access_HasNodeAccess.resolve(input,"grid");
		if(hasTileOffset) {
			var node = haxe_xml__$Access_NodeAccess.resolve(input,"tileoffset");
			tileOffset = new format_tmx_TmxTileOffset(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")));
		}
		if(hasTerrains) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"terraintypes"),"terrain");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				terrains.push(new format_tmx_TmxTerrain(haxe_xml__$Access_AttribAccess.resolve(node,"name"),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tile")),this.resolveProperties(node)));
			}
		}
		if(hasWangSets) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"wangsets"),"wangset");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				wangSets.push(this.resolveWangSet(node));
			}
		}
		if(hasGrid) {
			var gnode = haxe_xml__$Access_NodeAccess.resolve(input,"grid");
			var _g = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"width"));
			var _g1 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(gnode,"height"));
			var input1 = haxe_xml__$Access_AttribAccess.resolve(gnode,"orientation");
			var grid1;
			switch(input1) {
			case "hexagonal":
				grid1 = format_tmx_TmxOrientation.Hexagonal;
				break;
			case "isometric":
				grid1 = format_tmx_TmxOrientation.Isometric;
				break;
			case "orthogonal":
				grid1 = format_tmx_TmxOrientation.Orthogonal;
				break;
			case "staggered":
				grid1 = format_tmx_TmxOrientation.Staggered;
				break;
			default:
				grid1 = format_tmx_TmxOrientation.Unknown(input1);
			}
			grid = new format_tmx_TmxTilesetGrid(grid1,_g,_g1);
		}
		if(hasTiles) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"tile");
			while(_g < _g1.length) {
				var node = _g1[_g];
				++_g;
				var animation = null;
				if(haxe_xml__$Access_HasNodeAccess.resolve(node,"animation")) {
					animation = [];
					var _g2 = 0;
					var _g3 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(node,"animation"),"frame");
					while(_g2 < _g3.length) {
						var frameInfo = _g3[_g2];
						++_g2;
						animation.push(new format_tmx_TmxTilesetTileFrame(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"tileid")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(frameInfo,"duration"))));
					}
				}
				var _g4 = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"id"));
				var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(node,"terrain") ? haxe_xml__$Access_AttribAccess.resolve(node,"terrain") : null;
				var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(node,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node,"probability")) : 0;
				var _g7 = this.resolveProperties(node);
				var _g8 = haxe_xml__$Access_HasNodeAccess.resolve(node,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(node,"image")) : null;
				var _g9 = haxe_xml__$Access_HasNodeAccess.resolve(node,"objectgroup") ? this.resolveObjectGroup(haxe_xml__$Access_NodeAccess.resolve(node,"objectgroup")) : null;
				tiles.push(new format_tmx_TmxTilesetTile(_g4,haxe_xml__$Access_HasAttribAccess.resolve(node,"type") ? haxe_xml__$Access_AttribAccess.resolve(node,"type") : null,_g5,_g6,_g7,_g8,_g9,animation));
			}
		}
		if(root != null) {
			root.firstGID = haxe_xml__$Access_HasAttribAccess.resolve(input,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"firstgid")) : root.firstGID;
			root.source = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : root.source;
			root.name = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : root.name;
			root.tileWidth = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilewidth")) : root.tileWidth;
			root.tileHeight = haxe_xml__$Access_HasAttribAccess.resolve(input,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tileheight")) : root.tileHeight;
			root.spacing = haxe_xml__$Access_HasAttribAccess.resolve(input,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"spacing")) : root.spacing;
			root.margin = haxe_xml__$Access_HasAttribAccess.resolve(input,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"margin")) : root.margin;
			root.properties = haxe_xml__$Access_HasNodeAccess.resolve(input,"properties") ? properties : root.properties;
			root.image = haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : root.image;
			root.tileCount = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilecount")) : 0;
			root.columns = haxe_xml__$Access_HasAttribAccess.resolve(input,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"columns")) : 0;
			if(hasTerrains) {
				root.terrainTypes = terrains;
			}
			if(hasTiles) {
				root.tiles = tiles;
			}
			if(hasTileOffset) {
				root.tileOffset = tileOffset;
			}
			if(hasWangSets) {
				root.wangSets = wangSets;
			}
			if(hasGrid) {
				root.grid = grid;
			}
			return root;
		}
		var _g = haxe_xml__$Access_HasAttribAccess.resolve(input,"firstgid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"firstgid")) : null;
		var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : null;
		var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : null;
		var _g3 = haxe_xml__$Access_HasAttribAccess.resolve(input,"tilewidth") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilewidth")) : 0;
		var _g4 = haxe_xml__$Access_HasAttribAccess.resolve(input,"tileheight") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tileheight")) : 0;
		var _g5 = haxe_xml__$Access_HasAttribAccess.resolve(input,"spacing") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"spacing")) : 0;
		var _g6 = haxe_xml__$Access_HasAttribAccess.resolve(input,"margin") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"margin")) : 0;
		var _g7 = haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : null;
		var tset = new format_tmx_TmxTileset(_g,_g1,_g2,_g3,_g4,_g5,_g6,haxe_xml__$Access_HasAttribAccess.resolve(input,"tilecount") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tilecount")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"columns") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"columns")) : 0,tileOffset,properties,_g7,terrains,tiles,grid,wangSets);
		if(tset.source != null && this.resolveTSX != null) {
			var tsx = this.resolveTSX(tset.source);
			format_tmx_Tools.applyTSX(tsx,tset);
		}
		return tset;
	}
	,resolveWangSet: function(input) {
		var corners = [];
		var edges = [];
		var tiles = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"wangcornercolor");
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(node,"name") ? haxe_xml__$Access_AttribAccess.resolve(node,"name") : null;
			var _g3;
			if(haxe_xml__$Access_HasAttribAccess.resolve(node,"color")) {
				var input1 = haxe_xml__$Access_AttribAccess.resolve(node,"color");
				_g3 = HxOverrides.cca(input1,0) == 35 ? Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) : Std.parseInt("0x" + input1);
			} else {
				_g3 = 0;
			}
			corners.push(new format_tmx_TmxWangSetColor(_g2,_g3,haxe_xml__$Access_HasAttribAccess.resolve(node,"tile") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tile")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node,"probability")) : 0));
		}
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"wangedgecolor");
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(node,"name") ? haxe_xml__$Access_AttribAccess.resolve(node,"name") : null;
			var _g3;
			if(haxe_xml__$Access_HasAttribAccess.resolve(node,"color")) {
				var input1 = haxe_xml__$Access_AttribAccess.resolve(node,"color");
				_g3 = HxOverrides.cca(input1,0) == 35 ? Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) : Std.parseInt("0x" + input1);
			} else {
				_g3 = 0;
			}
			edges.push(new format_tmx_TmxWangSetColor(_g2,_g3,haxe_xml__$Access_HasAttribAccess.resolve(node,"tile") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tile")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(node,"probability")) : 0));
		}
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"wangtile");
		while(_g < _g1.length) {
			var node = _g1[_g];
			++_g;
			tiles.push(new format_tmx_TmxWangSetTile(haxe_xml__$Access_HasAttribAccess.resolve(node,"tileid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"tileid")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"wangid") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"wangid")) : 0));
		}
		return new format_tmx_TmxWangSet(haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : null,haxe_xml__$Access_HasAttribAccess.resolve(input,"tile") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tile")) : 0,corners,edges,tiles);
	}
	,resolveWangSetColor: function(input) {
		var _g = haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : null;
		var _g1;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"color")) {
			var input1 = haxe_xml__$Access_AttribAccess.resolve(input,"color");
			_g1 = HxOverrides.cca(input1,0) == 35 ? Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) : Std.parseInt("0x" + input1);
		} else {
			_g1 = 0;
		}
		return new format_tmx_TmxWangSetColor(_g,_g1,haxe_xml__$Access_HasAttribAccess.resolve(input,"tile") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"tile")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"probability") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"probability")) : 0);
	}
	,resolveImage: function(input) {
		var _g = haxe_xml__$Access_HasAttribAccess.resolve(input,"format") ? haxe_xml__$Access_AttribAccess.resolve(input,"format") : "";
		var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(input,"id") ? haxe_xml__$Access_AttribAccess.resolve(input,"id") : "";
		var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(input,"source") ? haxe_xml__$Access_AttribAccess.resolve(input,"source") : "";
		var _g3;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"transparent")) {
			var input1 = haxe_xml__$Access_AttribAccess.resolve(input,"transparent");
			_g3 = HxOverrides.cca(input1,0) == 35 ? Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) : Std.parseInt("0x" + input1);
		} else {
			_g3 = null;
		}
		return new format_tmx_TmxImage(_g,_g1,_g2,_g3,haxe_xml__$Access_HasAttribAccess.resolve(input,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"width")) : null,haxe_xml__$Access_HasAttribAccess.resolve(input,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"height")) : null,haxe_xml__$Access_HasNodeAccess.resolve(input,"data") ? this.resolveData(haxe_xml__$Access_NodeAccess.resolve(input,"data"),false) : null);
	}
	,resolveData: function(input,isTileData) {
		if(isTileData == null) {
			isTileData = true;
		}
		var encoding = format_tmx_TmxDataEncoding.None;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"encoding")) {
			switch(haxe_xml__$Access_AttribAccess.resolve(input,"encoding")) {
			case "base64":
				encoding = format_tmx_TmxDataEncoding.Base64;
				break;
			case "csv":
				encoding = format_tmx_TmxDataEncoding.CSV;
				break;
			default:
				throw haxe_Exception.thrown("Unknown encoding \"" + haxe_xml__$Access_AttribAccess.resolve(input,"encoding") + "\"");
			}
		}
		var compression = format_tmx_TmxDataCompression.None;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"compression")) {
			switch(haxe_xml__$Access_AttribAccess.resolve(input,"compression")) {
			case "gzip":
				compression = format_tmx_TmxDataCompression.GZip;
				break;
			case "zlib":
				compression = format_tmx_TmxDataCompression.ZLib;
				break;
			default:
				throw haxe_Exception.thrown("Unknown compression \"" + haxe_xml__$Access_AttribAccess.resolve(input,"compression") + "\"");
			}
		}
		var chunks = null;
		var tiles = null;
		var data = null;
		switch(encoding._hx_index) {
		case 0:
			if(isTileData) {
				if(haxe_xml__$Access_HasNodeAccess.resolve(input,"chunk")) {
					chunks = [];
					var _g = 0;
					var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"chunk");
					while(_g < _g1.length) {
						var node = _g1[_g];
						++_g;
						var chunk = new format_tmx_TmxChunk(haxe_xml__$Access_HasAttribAccess.resolve(node,"x") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"y") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"width")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"height")) : 0,[]);
						var chunkTiles = chunk.tiles;
						var _g2 = 0;
						var _g3 = haxe_xml__$Access_NodeListAccess.resolve(node,"tile");
						while(_g2 < _g3.length) {
							var tile = _g3[_g2];
							++_g2;
							chunkTiles.push(new format_tmx_TmxTile(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(tile,"gid")),false,false,false));
						}
						chunks.push(chunk);
					}
				} else {
					tiles = [];
					var _g = 0;
					var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"tile");
					while(_g < _g1.length) {
						var info = _g1[_g];
						++_g;
						tiles.push(new format_tmx_TmxTile(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(info,"gid")),false,false,false));
					}
				}
			} else if(compression == format_tmx_TmxDataCompression.None) {
				data = haxe_io_Bytes.ofString(StringTools.trim(haxe_xml_Access.get_innerData(input)));
			} else {
				data = this.uncompressData(new haxe_io_StringInput(StringTools.trim(haxe_xml_Access.get_innerData(input))),compression);
			}
			break;
		case 1:
			var tile;
			var flipH;
			if(isTileData && haxe_xml__$Access_HasNodeAccess.resolve(input,"chunk")) {
				chunks = [];
				var _g = 0;
				var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"chunk");
				while(_g < _g1.length) {
					var node = _g1[_g];
					++_g;
					var chunk = new format_tmx_TmxChunk(haxe_xml__$Access_HasAttribAccess.resolve(node,"x") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"y") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"width")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"height")) : 0,[]);
					var chunkTiles = chunk.tiles;
					data = haxe_crypto_Base64.decode(StringTools.trim(haxe_xml_Access.get_innerData(node)));
					if(compression != format_tmx_TmxDataCompression.None) {
						data = this.uncompressData(new haxe_io_BytesInput(data),compression);
					}
					var tilesCount = data.length / 4 | 0;
					var d = new haxe_io_BytesInput(data);
					d.set_bigEndian(false);
					var _g2 = 0;
					var _g3 = tilesCount;
					while(_g2 < _g3) {
						var i = _g2++;
						tile = d.readInt32();
						flipH = (tile & -2147483648) == -2147483648;
						chunkTiles.push(new format_tmx_TmxTile(tile & 536870911,flipH,(tile & 1073741824) == 1073741824,(tile & 536870912) == 536870912));
					}
					chunks.push(chunk);
				}
				data = null;
			} else {
				data = haxe_crypto_Base64.decode(StringTools.trim(haxe_xml_Access.get_innerData(input)));
				if(compression != format_tmx_TmxDataCompression.None) {
					data = this.uncompressData(new haxe_io_BytesInput(data),compression);
				}
				if(isTileData) {
					tiles = [];
					var tilesCount = data.length / 4 | 0;
					var offset = 0;
					var d = new haxe_io_BytesInput(data);
					d.set_bigEndian(false);
					var _g = 0;
					var _g1 = tilesCount;
					while(_g < _g1) {
						var i = _g++;
						tile = d.readInt32();
						flipH = (tile & -2147483648) == -2147483648;
						tiles.push(new format_tmx_TmxTile(tile & 536870911,flipH,(tile & 1073741824) == 1073741824,(tile & 536870912) == 536870912));
					}
					data = null;
				}
			}
			break;
		case 2:
			if(isTileData) {
				if(haxe_xml__$Access_HasNodeAccess.resolve(input,"chunk")) {
					chunks = [];
					var _g = 0;
					var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"chunk");
					while(_g < _g1.length) {
						var node = _g1[_g];
						++_g;
						var chunk = new format_tmx_TmxChunk(haxe_xml__$Access_HasAttribAccess.resolve(node,"x") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"y") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"width")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(node,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(node,"height")) : 0,[]);
						var chunkTiles = chunk.tiles;
						var split = StringTools.trim(haxe_xml_Access.get_innerData(node)).split(",");
						var _g2 = 0;
						while(_g2 < split.length) {
							var str = split[_g2];
							++_g2;
							chunkTiles.push(new format_tmx_TmxTile(Std.parseInt(str),false,false,false));
						}
						chunks.push(chunk);
					}
				} else {
					tiles = [];
					var split = StringTools.trim(haxe_xml_Access.get_innerData(input)).split(",");
					var _g = 0;
					while(_g < split.length) {
						var str = split[_g];
						++_g;
						tiles.push(new format_tmx_TmxTile(Std.parseInt(str),false,false,false));
					}
				}
			} else {
				throw haxe_Exception.thrown("CSV encoding available only for tile data");
			}
			break;
		case 3:
			var value = encoding.value;
			throw haxe_Exception.thrown("Unknown data encoding: " + value);
		}
		return new format_tmx_TmxData(encoding,compression,tiles,chunks,data);
	}
	,uncompressData: function(i,compression) {
		switch(compression._hx_index) {
		case 0:
			return i.readAll();
		case 1:
			throw haxe_Exception.thrown("GZip compression currently not supported. Link 'format' library to enable GZip decompression.");
		case 2:
			return haxe_zip_InflateImpl.run(i);
		case 3:
			var value = compression.value;
			throw haxe_Exception.thrown("Unknown compression method: " + value);
		}
	}
	,resolveTileLayer: function(input) {
		var layer = new format_tmx_TmxTileLayer(haxe_xml__$Access_HasNodeAccess.resolve(input,"data") ? this.resolveData(haxe_xml__$Access_NodeAccess.resolve(input,"data")) : null,haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : "",haxe_xml__$Access_HasAttribAccess.resolve(input,"x") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"y") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsetx") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsetx")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsety") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsety")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"width")) : this.width,haxe_xml__$Access_HasAttribAccess.resolve(input,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"height")) : this.height,haxe_xml__$Access_HasAttribAccess.resolve(input,"opacity") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"opacity")) : 1,haxe_xml__$Access_HasAttribAccess.resolve(input,"visible") ? haxe_xml__$Access_AttribAccess.resolve(input,"visible") == "1" : true,this.resolveProperties(input));
		return layer;
	}
	,resolveDraworder: function(input) {
		switch(input) {
		case "index":
			return format_tmx_TmxObjectGroupDrawOrder.Index;
		case "topdown":
			return format_tmx_TmxObjectGroupDrawOrder.Topdown;
		default:
			return format_tmx_TmxObjectGroupDrawOrder.Unknown(input);
		}
	}
	,resolveObjectGroup: function(input) {
		var objects = [];
		var _g = 0;
		var _g1 = haxe_xml__$Access_NodeListAccess.resolve(input,"object");
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			objects.push(this.resolveObject(obj));
		}
		var group;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"draworder")) {
			var input1 = haxe_xml__$Access_AttribAccess.resolve(input,"draworder");
			switch(input1) {
			case "index":
				group = format_tmx_TmxObjectGroupDrawOrder.Index;
				break;
			case "topdown":
				group = format_tmx_TmxObjectGroupDrawOrder.Topdown;
				break;
			default:
				group = format_tmx_TmxObjectGroupDrawOrder.Unknown(input1);
			}
		} else {
			group = format_tmx_TmxObjectGroupDrawOrder.Topdown;
		}
		var group1 = new format_tmx_TmxObjectGroup(group,objects,haxe_xml__$Access_HasAttribAccess.resolve(input,"color") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"color")) : null,haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : "",haxe_xml__$Access_HasAttribAccess.resolve(input,"x") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"y") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsetx") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsetx")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsety") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsety")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"width")) : this.width,haxe_xml__$Access_HasAttribAccess.resolve(input,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"height")) : this.height,haxe_xml__$Access_HasAttribAccess.resolve(input,"opacity") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"opacity")) : 1,haxe_xml__$Access_HasAttribAccess.resolve(input,"visible") ? haxe_xml__$Access_AttribAccess.resolve(input,"visible") == "1" : true,this.resolveProperties(input));
		return group1;
	}
	,resolveObject: function(obj) {
		var flippedV = false;
		var flippedH = false;
		var type;
		if(haxe_xml__$Access_HasNodeAccess.resolve(obj,"ellipse")) {
			type = format_tmx_TmxObjectType.OTEllipse;
		} else if(haxe_xml__$Access_HasAttribAccess.resolve(obj,"gid")) {
			var gid = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(obj,"gid"));
			flippedH = (gid & -2147483648) == -2147483648;
			if(flippedH && gid < 0) {
				gid = -gid;
			}
			flippedV = (gid & 1073741824) == 1073741824;
			type = format_tmx_TmxObjectType.OTTile(gid & 1073741823);
		} else {
			type = haxe_xml__$Access_HasNodeAccess.resolve(obj,"polygon") ? format_tmx_TmxObjectType.OTPolygon(this.readPoints(haxe_xml__$Access_NodeAccess.resolve(obj,"polygon"))) : haxe_xml__$Access_HasNodeAccess.resolve(obj,"polyline") ? format_tmx_TmxObjectType.OTPolyline(this.readPoints(haxe_xml__$Access_NodeAccess.resolve(obj,"polyline"))) : haxe_xml__$Access_HasNodeAccess.resolve(obj,"text") ? format_tmx_TmxObjectType.OTText(this.resolveText(haxe_xml__$Access_NodeAccess.resolve(obj,"text"))) : format_tmx_TmxObjectType.OTRectangle;
		}
		var object = new format_tmx_TmxObject(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(obj,"id")),haxe_xml__$Access_HasAttribAccess.resolve(obj,"name") ? haxe_xml__$Access_AttribAccess.resolve(obj,"name") : "",haxe_xml__$Access_HasAttribAccess.resolve(obj,"type") ? haxe_xml__$Access_AttribAccess.resolve(obj,"type") : "",haxe_xml__$Access_HasAttribAccess.resolve(obj,"x") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(obj,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(obj,"y") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(obj,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(obj,"width") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(obj,"width")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(obj,"height") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(obj,"height")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(obj,"rotation") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(obj,"rotation")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(obj,"visible") ? haxe_xml__$Access_AttribAccess.resolve(obj,"visible") == "1" : true,type,this.resolveProperties(obj),flippedH,flippedV,haxe_xml__$Access_HasAttribAccess.resolve(obj,"template") ? haxe_xml__$Access_AttribAccess.resolve(obj,"template") : null);
		if(object.type != null && object.type != "" && this.resolveTypeTemplate != null) {
			var template = this.resolveTypeTemplate(object.type);
			format_tmx_Tools.applyObjectTypeTemplate(object,template);
		}
		return object;
	}
	,readPoints: function(input) {
		var arr = [];
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"points")) {
			var points = haxe_xml__$Access_AttribAccess.resolve(input,"points").split(" ");
			var _g = 0;
			while(_g < points.length) {
				var point = points[_g];
				++_g;
				var idx = point.indexOf(",");
				arr.push(new format_tmx_TmxPoint(parseFloat(HxOverrides.substr(point,0,idx)),parseFloat(HxOverrides.substr(point,idx + 1,null))));
			}
		}
		return arr;
	}
	,resolveText: function(input) {
		var _g = haxe_xml__$Access_HasAttribAccess.resolve(input,"fontfamily") ? haxe_xml__$Access_AttribAccess.resolve(input,"fontfamily") : "sans-serif";
		var _g1 = haxe_xml__$Access_HasAttribAccess.resolve(input,"pixelsize") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"pixelsize")) : 16;
		var _g2 = haxe_xml__$Access_HasAttribAccess.resolve(input,"wrap") && haxe_xml__$Access_AttribAccess.resolve(input,"wrap") == "1";
		var _g3;
		if(haxe_xml__$Access_HasAttribAccess.resolve(input,"color")) {
			var input1 = haxe_xml__$Access_AttribAccess.resolve(input,"color");
			_g3 = HxOverrides.cca(input1,0) == 35 ? Std.parseInt("0x" + HxOverrides.substr(input1,1,null)) : Std.parseInt("0x" + input1);
		} else {
			_g3 = 0;
		}
		return new format_tmx_TmxText(_g,_g1,_g2,_g3,haxe_xml__$Access_HasAttribAccess.resolve(input,"bold") && haxe_xml__$Access_AttribAccess.resolve(input,"bold") == "1",haxe_xml__$Access_HasAttribAccess.resolve(input,"italic") && haxe_xml__$Access_AttribAccess.resolve(input,"italic") == "1",haxe_xml__$Access_HasAttribAccess.resolve(input,"underline") && haxe_xml__$Access_AttribAccess.resolve(input,"underline") == "1",haxe_xml__$Access_HasAttribAccess.resolve(input,"strikeout") && haxe_xml__$Access_AttribAccess.resolve(input,"strikeout") == "1",haxe_xml__$Access_HasAttribAccess.resolve(input,"kerning") ? haxe_xml__$Access_AttribAccess.resolve(input,"kerning") == "1" : true,haxe_xml__$Access_HasAttribAccess.resolve(input,"halign") ? haxe_xml__$Access_AttribAccess.resolve(input,"halign") : "left",haxe_xml__$Access_HasAttribAccess.resolve(input,"valign") ? haxe_xml__$Access_AttribAccess.resolve(input,"valign") : "top",haxe_xml_Access.get_innerData(input));
	}
	,resolveImageLayer: function(input) {
		var layer = new format_tmx_TmxImageLayer(haxe_xml__$Access_HasNodeAccess.resolve(input,"image") ? this.resolveImage(haxe_xml__$Access_NodeAccess.resolve(input,"image")) : null,haxe_xml__$Access_HasAttribAccess.resolve(input,"name") ? haxe_xml__$Access_AttribAccess.resolve(input,"name") : "",haxe_xml__$Access_HasAttribAccess.resolve(input,"x") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"x")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"y") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"y")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsetx") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsetx")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"offsety") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"offsety")) : 0,haxe_xml__$Access_HasAttribAccess.resolve(input,"width") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"width")) : this.width,haxe_xml__$Access_HasAttribAccess.resolve(input,"height") ? Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(input,"height")) : this.height,haxe_xml__$Access_HasAttribAccess.resolve(input,"opacity") ? parseFloat(haxe_xml__$Access_AttribAccess.resolve(input,"opacity")) : 1,haxe_xml__$Access_HasAttribAccess.resolve(input,"visible") ? haxe_xml__$Access_AttribAccess.resolve(input,"visible") == "1" : true,this.resolveProperties(input));
		return layer;
	}
	,resolveProperties: function(input) {
		var this1 = new format_tmx__$Data_ImplTmxProperties();
		var props = this1;
		var value;
		if(haxe_xml__$Access_HasNodeAccess.resolve(input,"properties")) {
			var _g = 0;
			var _g1 = haxe_xml__$Access_NodeListAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(input,"properties"),"property");
			while(_g < _g1.length) {
				var prop = _g1[_g];
				++_g;
				value = haxe_xml__$Access_HasAttribAccess.resolve(prop,"value") ? haxe_xml__$Access_AttribAccess.resolve(prop,"value") : haxe_xml_Access.get_innerData(prop);
				if(haxe_xml__$Access_HasAttribAccess.resolve(prop,"type")) {
					switch(haxe_xml__$Access_AttribAccess.resolve(prop,"type")) {
					case "bool":
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTBool);
						break;
					case "color":
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTColor);
						break;
					case "file":
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTFile);
						break;
					case "float":
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTFloat);
						break;
					case "int":
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTInt);
						break;
					default:
						props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTString);
					}
				} else {
					props.setRaw(haxe_xml__$Access_AttribAccess.resolve(prop,"name"),value,format_tmx_TmxPropertyType.PTString);
				}
			}
		}
		return props;
	}
	,__class__: format_tmx_Reader
};
var format_tmx_Tools = function() { };
$hxClasses["format.tmx.Tools"] = format_tmx_Tools;
format_tmx_Tools.__name__ = "format.tmx.Tools";
format_tmx_Tools.applyTSX = function(tsx,base) {
	base.properties = tsx.properties;
	base.name = tsx.name;
	base.columns = tsx.columns;
	base.grid = tsx.grid;
	base.image = tsx.image;
	base.margin = tsx.margin;
	base.spacing = tsx.spacing;
	base.tileOffset = tsx.tileOffset;
	base.tileCount = tsx.tileCount;
	base.tileHeight = tsx.tileHeight;
	base.tileWidth = tsx.tileWidth;
	base.terrainTypes = tsx.terrainTypes;
	base.tiles = tsx.tiles;
	base.wangSets = tsx.wangSets;
};
format_tmx_Tools.applyObjectTypeTemplate = function(obj,ot) {
	var props = obj.properties;
	var _g = 0;
	var _g1 = ot.properties;
	while(_g < _g1.length) {
		var prop = _g1[_g];
		++_g;
		if(prop.defaultValue != null && !props.exists(prop.name)) {
			props.setRaw(prop.name,prop.defaultValue,prop.type);
		}
	}
};
format_tmx_Tools.linearLayers = function(map) {
	var linear = [];
	var _g = 0;
	var _g1 = map.layers;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l._hx_index == 3) {
			var group = l.group;
			format_tmx_Tools.linearLayersInternal(group,linear);
		} else {
			linear.push(l);
		}
	}
	return linear;
};
format_tmx_Tools.linearLayersInternal = function(group,output) {
	var _g = 0;
	var _g1 = group.layers;
	while(_g < _g1.length) {
		var layer = _g1[_g];
		++_g;
		switch(layer._hx_index) {
		case 0:
			var l = layer.layer;
			l.offsetX += group.offsetX;
			l.offsetY += group.offsetY;
			l.visible = group.visible;
			l.opacity *= group.opacity;
			output.push(layer);
			break;
		case 1:
			var g = layer.group;
			g.offsetX += group.offsetX;
			g.offsetY += group.offsetY;
			g.visible = group.visible;
			g.opacity *= group.opacity;
			output.push(layer);
			break;
		case 2:
			var l1 = layer.layer;
			l1.offsetX += group.offsetX;
			l1.offsetY += group.offsetY;
			l1.visible = group.visible;
			l1.opacity *= group.opacity;
			output.push(layer);
			break;
		case 3:
			var g1 = layer.group;
			g1.offsetX += group.offsetX;
			g1.offsetY += group.offsetY;
			g1.visible = group.visible;
			g1.opacity *= group.opacity;
			format_tmx_Tools.linearLayersInternal(g1,output);
			break;
		}
	}
};
format_tmx_Tools.propagateObjectTypeToObject = function(obj,types) {
	if(obj.type != null) {
		var type = types.h[obj.type];
		if(type != null) {
			var props = obj.properties;
			var _g = 0;
			var _g1 = type.properties;
			while(_g < _g1.length) {
				var prop = _g1[_g];
				++_g;
				if(!props.exists(prop.name) && prop.defaultValue != null) {
					props.setRaw(prop.name,prop.defaultValue,prop.type);
				}
			}
		}
	}
};
format_tmx_Tools.propagateTilePropertiesToObject = function(obj,map,gid) {
	var tset = format_tmx_Tools.getTilesetByGid(map,gid);
	if(tset != null && tset.tiles != null) {
		var lid = gid - tset.firstGID;
		var _g = 0;
		var _g1 = tset.tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			if(tile.id == lid) {
				tile.properties.propagateTo(obj.properties);
				if(tile.type != null && (obj.type == null || obj.type == "")) {
					obj.type = tile.type;
				}
			}
		}
	}
};
format_tmx_Tools.propagateTileProperties = function(map) {
	var _g = 0;
	var _g1 = map.layers;
	while(_g < _g1.length) {
		var layer = _g1[_g];
		++_g;
		format_tmx_Tools.propagateTilePropertiesLayer(map,layer);
	}
};
format_tmx_Tools.propagateTilePropertiesLayer = function(map,layer) {
	var tset;
	switch(layer._hx_index) {
	case 1:
		var group = layer.group;
		var _g = 0;
		var _g1 = group.objects;
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			var _g2 = obj.objectType;
			if(_g2._hx_index == 1) {
				var gid = _g2.gid;
				tset = format_tmx_Tools.getTilesetByGid(map,gid);
				var lid = gid - tset.firstGID;
				var _g3 = 0;
				var _g4 = tset.tiles;
				while(_g3 < _g4.length) {
					var tile = _g4[_g3];
					++_g3;
					if(tile.id == lid) {
						tile.properties.propagateTo(obj.properties);
						if(tile.type != null && (obj.type == null || obj.type == "")) {
							obj.type = tile.type;
						}
					}
				}
			}
		}
		break;
	case 3:
		var g = layer.group;
		var _g = 0;
		var _g1 = g.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			format_tmx_Tools.propagateTilePropertiesLayer(map,l);
		}
		break;
	default:
	}
};
format_tmx_Tools.propagateObjectTypes = function(map,types,propagateObjectLayers,propagateTileColliders) {
	if(propagateTileColliders == null) {
		propagateTileColliders = true;
	}
	if(propagateObjectLayers == null) {
		propagateObjectLayers = true;
	}
	var propagateLayer = null;
	propagateLayer = function(layer) {
		switch(layer._hx_index) {
		case 1:
			var o = layer.group;
			var _g = 0;
			var _g1 = o.objects;
			while(_g < _g1.length) {
				var obj = _g1[_g];
				++_g;
				if(obj.type != null) {
					var type = types.h[obj.type];
					if(type != null) {
						var _g2 = 0;
						var _g3 = type.properties;
						while(_g2 < _g3.length) {
							var prop = _g3[_g2];
							++_g2;
							if(!obj.properties.exists(prop.name) && prop.defaultValue != null) {
								obj.properties.setRaw(prop.name,prop.defaultValue,prop.type);
							}
						}
					}
				}
			}
			break;
		case 3:
			var g = layer.group;
			var _g = 0;
			var _g1 = g.layers;
			while(_g < _g1.length) {
				var layer = _g1[_g];
				++_g;
				propagateLayer(layer);
			}
			break;
		default:
		}
	};
	if(propagateTileColliders) {
		var _g = 0;
		var _g1 = map.tilesets;
		while(_g < _g1.length) {
			var tset = _g1[_g];
			++_g;
			if(tset.tiles != null) {
				var _g2 = 0;
				var _g3 = tset.tiles;
				while(_g2 < _g3.length) {
					var tile = _g3[_g2];
					++_g2;
					if(tile.objectGroup != null) {
						var _g4 = 0;
						var _g5 = tile.objectGroup.objects;
						while(_g4 < _g5.length) {
							var obj = _g5[_g4];
							++_g4;
							if(obj.type != null) {
								var type = types.h[obj.type];
								if(type != null) {
									var _g6 = 0;
									var _g7 = type.properties;
									while(_g6 < _g7.length) {
										var prop = _g7[_g6];
										++_g6;
										if(!obj.properties.exists(prop.name) && prop.defaultValue != null) {
											obj.properties.setRaw(prop.name,prop.defaultValue,prop.type);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	if(propagateObjectLayers) {
		var _g = 0;
		var _g1 = map.layers;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			propagateLayer(l);
		}
	}
};
format_tmx_Tools.getTileByGid = function(map,gid) {
	var tset = format_tmx_Tools.getTilesetByGid(map,gid);
	if(tset != null && tset.tiles != null) {
		var lid = gid - tset.firstGID;
		var _g = 0;
		var _g1 = tset.tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			if(tile.id == lid) {
				return tile;
			}
		}
	}
	return null;
};
format_tmx_Tools.getTilesetByGid = function(map,gid) {
	if(gid <= 0) {
		return null;
	}
	var i = 0;
	while(i < map.tilesets.length) {
		if(map.tilesets[i].firstGID > gid) {
			return map.tilesets[i - 1];
		}
		++i;
	}
	return map.tilesets[i - 1];
};
format_tmx_Tools.getTilesetIndexByGid = function(map,gid) {
	if(gid <= 0) {
		return -1;
	}
	var i = 0;
	while(i < map.tilesets.length) {
		if(map.tilesets[i].firstGID > gid) {
			return i - 1;
		}
		++i;
	}
	return i - 1;
};
format_tmx_Tools.getTileUVByLidUnsafe = function(tileset,localId,output) {
	var tilesInLine = format_tmx_Tools.getTilesCountInLineOnTileset(tileset);
	Reflect.setProperty(output,"x",localId % tilesInLine * (tileset.tileWidth + tileset.spacing) + tileset.margin);
	Reflect.setProperty(output,"y",Math.floor(localId / tilesInLine) * (tileset.tileHeight + tileset.spacing) + tileset.margin);
};
format_tmx_Tools.fixObjectPlacement = function(map) {
	format_tmx_Tools.topLeftObjectOrigin(map);
};
format_tmx_Tools.topLeftObjectOrigin = function(map) {
	var toRad = Math.PI / 180;
	var _g = 0;
	var _g1 = map.layers;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		if(type._hx_index == 1) {
			var group = type.group;
			var _g2 = 0;
			var _g3 = group.objects;
			while(_g2 < _g3.length) {
				var obj = _g3[_g2];
				++_g2;
				var height = obj.height;
				if(height == null || height == 0) {
					var _g4 = obj.objectType;
					if(_g4._hx_index == 1) {
						var gid = _g4.gid;
						var tset = format_tmx_Tools.getTilesetByGid(map,gid);
						if(tset != null && tset.tileHeight != null) {
							height = tset.tileHeight;
						} else {
							height = map.tileHeight;
						}
					} else {
						height = map.tileHeight;
					}
				}
				var radians = obj.rotation * toRad;
				obj.x += Math.sin(radians) * height;
				obj.y -= Math.cos(radians) * height;
			}
		}
	}
};
format_tmx_Tools.getTilesCountInLineOnTileset = function(tileset) {
	return Math.floor((tileset.image.width - tileset.margin * 2 + tileset.spacing) / (tileset.tileWidth + tileset.spacing));
};
format_tmx_Tools.getTilesCountInColumnOnTileset = function(tileset) {
	return Math.floor((tileset.image.height - tileset.margin * 2 + tileset.spacing) / (tileset.tileHeight + tileset.spacing));
};
format_tmx_Tools.getTilesCountInTileset = function(tileset) {
	return Math.floor((tileset.image.width - tileset.margin * 2 + tileset.spacing) / (tileset.tileWidth + tileset.spacing)) * Math.floor((tileset.image.height - tileset.margin * 2 + tileset.spacing) / (tileset.tileHeight + tileset.spacing));
};
var gameObjects_Portal = function(x,y,groupCollision) {
	com_framework_utils_Entity.call(this);
	this.facingDir = new kha_math_FastVector2(-1,0);
	this.facingDir2 = new kha_math_FastVector2(-1,0);
	this.death = false;
	this.display = new com_gEngine_helpers_RectangleDisplay();
	this.display.scaleX = 10;
	this.display.scaleY = 10;
	states_GlobalGameData.simulationLayer.addChild(this.display);
	this.collision = new com_collision_platformer_CollisionBox();
	this.collision.width = this.display.width();
	this.collision.height = this.display.height();
	this.collision.x = x;
	this.collision.y = y;
	groupCollision.clear();
	groupCollision.add(this.collision);
	this.collision.userData = this;
};
$hxClasses["gameObjects.Portal"] = gameObjects_Portal;
gameObjects_Portal.__name__ = "gameObjects.Portal";
gameObjects_Portal.__super__ = com_framework_utils_Entity;
gameObjects_Portal.prototype = $extend(com_framework_utils_Entity.prototype,{
	display: null
	,collision: null
	,detect: null
	,facingDir: null
	,facingDir2: null
	,death: null
	,update: function(dt) {
		com_framework_utils_Entity.prototype.update.call(this,dt);
	}
	,render: function() {
		com_framework_utils_Entity.prototype.render.call(this);
		this.display.x = this.collision.x;
		this.display.y = this.collision.y;
	}
	,destroy: function() {
		com_framework_utils_Entity.prototype.destroy.call(this);
		this.display.removeFromParent();
		this.collision.removeFromParent();
	}
	,__class__: gameObjects_Portal
});
